{"version":3,"sources":["node_modules/browser-pack/_prelude.js","app/src/RenderLoop.js","app.js","app/src/Shapes.js","app/src/game.js","node_modules/lodash/dist/lodash.js"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\nlet _ = require('lodash');\n\nclass RenderLoop {\n    constructor(options = {}) {\n        this.id = null;\n        this.requested = false;\n        this.ctx = options.canvas.getContext('2d');\n        this.setSize(options.width, options.height);\n        this.fetchShapes = options.fetchShapes;\n    }\n\n    setSize(w, h) {\n        this.width = w;\n        this.height = h;\n    }\n\n    clear() {\n        this.ctx.clearRect(0, 0, this.w, this.h);\n    }\n\n    _secretRender() {\n        if (this.requested) {\n            this.requested = false;\n            this.clear();\n            this.ctx.save();\n            _.forEach(this.fetchShapes(), (shape) => {\n                shape.prerender(this.ctx);\n                shape.render(this.ctx);\n                shape.postrender(this.ctx);\n            });\n            this.ctx.restore();\n        }\n    }\n\n    render() {\n        this.requested = true;\n    }\n\n    start() {\n        this.id = setInterval(_.bind(this._secretRender, this), 33);\n    }\n\n    stop() {\n        clearInterval(this.id);\n    }\n}\n\nmodule.exports = { RenderLoop };\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\nlet _ = require('lodash');\n\nclass RenderLoop {\n    constructor(options = {}) {\n        this.id = null;\n        this.requested = false;\n        this.ctx = options.canvas.getContext('2d');\n        this.setSize(options.width, options.height);\n        this.fetchShapes = options.fetchShapes;\n    }\n\n    setSize(w, h) {\n        this.width = w;\n        this.height = h;\n    }\n\n    clear() {\n        this.ctx.clearRect(0, 0, this.w, this.h);\n    }\n\n    _secretRender() {\n        if (this.requested) {\n            this.requested = false;\n            this.clear();\n            this.ctx.save();\n            _.forEach(this.fetchShapes(), (shape) => {\n                shape.prerender(this.ctx);\n                shape.render(this.ctx);\n                shape.postrender(this.ctx);\n            });\n            this.ctx.restore();\n        }\n    }\n\n    render() {\n        this.requested = true;\n    }\n\n    start() {\n        this.id = setInterval(_.bind(this._secretRender, this), 33);\n    }\n\n    stop() {\n        clearInterval(this.id);\n    }\n}\n\nmodule.exports = { RenderLoop };\n\n},{\"lodash\":4}],2:[function(require,module,exports){\n\nclass Rectangle {\n    constructor(opts = {}) {\n        this.x = opts.x;\n        this.y = opts.y;\n        this.width = opts.width;\n        this.height = opts.height;\n        this.fillStyle = opts.fillStyle;\n    }\n\n    prerender(ctx) {\n        ctx.save();\n        ctx.translate(this.x, this.y);\n    }\n\n    render(ctx) {\n        ctx.beginPath();\n        ctx.rect(0, 0, this.width, this.height);\n        ctx.closePath();\n    }\n\n    postrender(ctx) {\n        if (this.fillStyle) {\n            ctx.fillStyle = this.fillStyle;\n            ctx.fill();\n        }\n\n        ctx.restore();\n    }\n}\n\nmodule.exports = { Rectangle };\n\n},{}],3:[function(require,module,exports){\n\nlet _ = require('lodash');\nlet { Rectangle } = require('./Shapes');\nlet { RenderLoop } = require('./RenderLoop');\n\nclass Game {\n    constructor() {\n        this.shapes = [];\n\n        this.addShape(new Rectangle({\n            x: 0, y: 0,\n            width: 500, height: 400,\n            fillStyle: '#e5e5e5'\n        }));\n\n        this.addShape(new Rectangle({\n            x: 10, y: 10,\n            width: 50, height: 50,\n            fillStyle: '#ff0055'\n        }));\n    }\n\n    getShapes() {\n        return this.shapes;\n    }\n\n    addShape(shape) {\n        this.shapes.push(shape);\n    }\n}\n\nfunction startApp() {\n    let canvas = document.getElementById('gamecanvas');\n    let game = new Game();\n    window.myGame = game;\n\n    let renderLoop = new RenderLoop({\n        canvas,\n        width: 500, height: 400,\n        fetchShapes: _.bind(game.getShapes, game)\n    });\n\n    renderLoop.start();\n    console.log('started!');\n    renderLoop.render();\n    console.log('rendered!')\n};\n\nwindow.onload = function onAppLoad(){\n    startApp();\n};\n\n},{\"./RenderLoop\":1,\"./Shapes\":2,\"lodash\":4}],4:[function(require,module,exports){\n(function (global){\n/**\n * @license\n * Lo-Dash 1.0.2 (Custom Build) <http://lodash.com/>\n * Build: `lodash modern -o ./dist/lodash.js`\n * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.4.4 <http://underscorejs.org/>\n * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud Inc.\n * Available under MIT license <http://lodash.com/license>\n */\n;(function(window, undefined) {\n\n  /** Detect free variable `exports` */\n  var freeExports = typeof exports == 'object' && exports;\n\n  /** Detect free variable `module` */\n  var freeModule = typeof module == 'object' && module && module.exports == freeExports && module;\n\n  /** Detect free variable `global` and use it as `window` */\n  var freeGlobal = typeof global == 'object' && global;\n  if (freeGlobal.global === freeGlobal) {\n    window = freeGlobal;\n  }\n\n  /** Used for array and object method references */\n  var arrayRef = [],\n      objectRef = {};\n\n  /** Used to generate unique IDs */\n  var idCounter = 0;\n\n  /** Used internally to indicate various things */\n  var indicatorObject = objectRef;\n\n  /** Used by `cachedContains` as the default size when optimizations are enabled for large arrays */\n  var largeArraySize = 30;\n\n  /** Used to restore the original `_` reference in `noConflict` */\n  var oldDash = window._;\n\n  /** Used to match HTML entities */\n  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g;\n\n  /** Used to match empty string literals in compiled template source */\n  var reEmptyStringLeading = /\\b__p \\+= '';/g,\n      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n  /** Used to match regexp flags from their coerced string values */\n  var reFlags = /\\w*$/;\n\n  /** Used to detect if a method is native */\n  var reNative = RegExp('^' +\n    (objectRef.valueOf + '')\n      .replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n      .replace(/valueOf|for [^\\]]+/g, '.+?') + '$'\n  );\n\n  /**\n   * Used to match ES6 template delimiters\n   * http://people.mozilla.org/~jorendorff/es6-draft.html#sec-7.8.6\n   */\n  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n\n  /** Used to match \"interpolate\" template delimiters */\n  var reInterpolate = /<%=([\\s\\S]+?)%>/g;\n\n  /** Used to ensure capturing order of template delimiters */\n  var reNoMatch = /($^)/;\n\n  /** Used to match HTML characters */\n  var reUnescapedHtml = /[&<>\"']/g;\n\n  /** Used to match unescaped characters in compiled string literals */\n  var reUnescapedString = /['\\n\\r\\t\\u2028\\u2029\\\\]/g;\n\n  /** Used to make template sourceURLs easier to identify */\n  var templateCounter = 0;\n\n  /** Native method shortcuts */\n  var ceil = Math.ceil,\n      concat = arrayRef.concat,\n      floor = Math.floor,\n      getPrototypeOf = reNative.test(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf,\n      hasOwnProperty = objectRef.hasOwnProperty,\n      push = arrayRef.push,\n      toString = objectRef.toString;\n\n  /* Native method shortcuts for methods with the same name as other `lodash` methods */\n  var nativeBind = reNative.test(nativeBind = slice.bind) && nativeBind,\n      nativeIsArray = reNative.test(nativeIsArray = Array.isArray) && nativeIsArray,\n      nativeIsFinite = window.isFinite,\n      nativeIsNaN = window.isNaN,\n      nativeKeys = reNative.test(nativeKeys = Object.keys) && nativeKeys,\n      nativeMax = Math.max,\n      nativeMin = Math.min,\n      nativeRandom = Math.random;\n\n  /** `Object#toString` result shortcuts */\n  var argsClass = '[object Arguments]',\n      arrayClass = '[object Array]',\n      boolClass = '[object Boolean]',\n      dateClass = '[object Date]',\n      funcClass = '[object Function]',\n      numberClass = '[object Number]',\n      objectClass = '[object Object]',\n      regexpClass = '[object RegExp]',\n      stringClass = '[object String]';\n\n  /** Detect various environments */\n  var isIeOpera = !!window.attachEvent,\n      isV8 = nativeBind && !/\\n|true/.test(nativeBind + isIeOpera);\n\n  /* Detect if `Function#bind` exists and is inferred to be fast (all but V8) */\n  var isBindFast = nativeBind && !isV8;\n\n  /* Detect if `Object.keys` exists and is inferred to be fast (IE, Opera, V8) */\n  var isKeysFast = nativeKeys && (isIeOpera || isV8);\n\n  /** Used to identify object classifications that `_.clone` supports */\n  var cloneableClasses = {};\n  cloneableClasses[funcClass] = false;\n  cloneableClasses[argsClass] = cloneableClasses[arrayClass] =\n  cloneableClasses[boolClass] = cloneableClasses[dateClass] =\n  cloneableClasses[numberClass] = cloneableClasses[objectClass] =\n  cloneableClasses[regexpClass] = cloneableClasses[stringClass] = true;\n\n  /** Used to lookup a built-in constructor by [[Class]] */\n  var ctorByClass = {};\n  ctorByClass[arrayClass] = Array;\n  ctorByClass[boolClass] = Boolean;\n  ctorByClass[dateClass] = Date;\n  ctorByClass[objectClass] = Object;\n  ctorByClass[numberClass] = Number;\n  ctorByClass[regexpClass] = RegExp;\n  ctorByClass[stringClass] = String;\n\n  /** Used to determine if values are of the language type Object */\n  var objectTypes = {\n    'boolean': false,\n    'function': true,\n    'object': true,\n    'number': false,\n    'string': false,\n    'undefined': false\n  };\n\n  /** Used to escape characters for inclusion in compiled string literals */\n  var stringEscapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\\n': 'n',\n    '\\r': 'r',\n    '\\t': 't',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Creates a `lodash` object, that wraps the given `value`, to enable method\n   * chaining.\n   *\n   * In addition to Lo-Dash methods, wrappers also have the following `Array` methods:\n   * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`, `splice`,\n   * and `unshift`\n   *\n   * The chainable wrapper functions are:\n   * `after`, `assign`, `bind`, `bindAll`, `bindKey`, `chain`, `compact`, `compose`,\n   * `concat`, `countBy`, `debounce`, `defaults`, `defer`, `delay`, `difference`,\n   * `filter`, `flatten`, `forEach`, `forIn`, `forOwn`, `functions`, `groupBy`,\n   * `initial`, `intersection`, `invert`, `invoke`, `keys`, `map`, `max`, `memoize`,\n   * `merge`, `min`, `object`, `omit`, `once`, `pairs`, `partial`, `partialRight`,\n   * `pick`, `pluck`, `push`, `range`, `reject`, `rest`, `reverse`, `shuffle`,\n   * `slice`, `sort`, `sortBy`, `splice`, `tap`, `throttle`, `times`, `toArray`,\n   * `union`, `uniq`, `unshift`, `values`, `where`, `without`, `wrap`, and `zip`\n   *\n   * The non-chainable wrapper functions are:\n   * `clone`, `cloneDeep`, `contains`, `escape`, `every`, `find`, `has`, `identity`,\n   * `indexOf`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`, `isEmpty`,\n   * `isEqual`, `isFinite`, `isFunction`, `isNaN`, `isNull`, `isNumber`, `isObject`,\n   * `isPlainObject`, `isRegExp`, `isString`, `isUndefined`, `join`, `lastIndexOf`,\n   * `mixin`, `noConflict`, `pop`, `random`, `reduce`, `reduceRight`, `result`,\n   * `shift`, `size`, `some`, `sortedIndex`, `template`, `unescape`, and `uniqueId`\n   *\n   * The wrapper functions `first` and `last` return wrapped values when `n` is\n   * passed, otherwise they return unwrapped values.\n   *\n   * @name _\n   * @constructor\n   * @category Chaining\n   * @param {Mixed} value The value to wrap in a `lodash` instance.\n   * @returns {Object} Returns a `lodash` instance.\n   */\n  function lodash(value) {\n    // exit early if already wrapped, even if wrapped by a different `lodash` constructor\n    if (value && typeof value == 'object' && value.__wrapped__) {\n      return value;\n    }\n    // allow invoking `lodash` without the `new` operator\n    if (!(this instanceof lodash)) {\n      return new lodash(value);\n    }\n    this.__wrapped__ = value;\n  }\n\n  /**\n   * By default, the template delimiters used by Lo-Dash are similar to those in\n   * embedded Ruby (ERB). Change the following template settings to use alternative\n   * delimiters.\n   *\n   * @static\n   * @memberOf _\n   * @type Object\n   */\n  lodash.templateSettings = {\n\n    /**\n     * Used to detect `data` property values to be HTML-escaped.\n     *\n     * @memberOf _.templateSettings\n     * @type RegExp\n     */\n    'escape': /<%-([\\s\\S]+?)%>/g,\n\n    /**\n     * Used to detect code to be evaluated.\n     *\n     * @memberOf _.templateSettings\n     * @type RegExp\n     */\n    'evaluate': /<%([\\s\\S]+?)%>/g,\n\n    /**\n     * Used to detect `data` property values to inject.\n     *\n     * @memberOf _.templateSettings\n     * @type RegExp\n     */\n    'interpolate': reInterpolate,\n\n    /**\n     * Used to reference the data object in the template text.\n     *\n     * @memberOf _.templateSettings\n     * @type String\n     */\n    'variable': '',\n\n    /**\n     * Used to import variables into the compiled template.\n     *\n     * @memberOf _.templateSettings\n     * @type Object\n     */\n    'imports': {\n\n      /**\n       * A reference to the `lodash` function.\n       *\n       * @memberOf _.templateSettings.imports\n       * @type Function\n       */\n      '_': lodash\n    }\n  };\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * The template used to create iterator functions.\n   *\n   * @private\n   * @param {Obect} data The data object used to populate the text.\n   * @returns {String} Returns the interpolated text.\n   */\n  var iteratorTemplate = function(obj) {\n    \n    var __p = 'var index, iterable = ' +\n    (obj.firstArg ) +\n    ', result = iterable;\\nif (!iterable) return result;\\n' +\n    (obj.top ) +\n    ';\\n';\n     if (obj.arrays) {\n    __p += 'var length = iterable.length; index = -1;\\nif (' +\n    (obj.arrays ) +\n    ') {\\n  while (++index < length) {\\n    ' +\n    (obj.loop ) +\n    '\\n  }\\n}\\nelse {  ';\n     } ;\n    \n     if (obj.isKeysFast && obj.useHas) {\n    __p += '\\n  var ownIndex = -1,\\n      ownProps = objectTypes[typeof iterable] ? nativeKeys(iterable) : [],\\n      length = ownProps.length;\\n\\n  while (++ownIndex < length) {\\n    index = ownProps[ownIndex];\\n    ' +\n    (obj.loop ) +\n    '\\n  }  ';\n     } else {\n    __p += '\\n  for (index in iterable) {';\n        if (obj.useHas) {\n    __p += '\\n    if (';\n          if (obj.useHas) {\n    __p += 'hasOwnProperty.call(iterable, index)';\n     }    ;\n    __p += ') {    ';\n     } ;\n    __p += \n    (obj.loop ) +\n    ';    ';\n     if (obj.useHas) {\n    __p += '\\n    }';\n     } ;\n    __p += '\\n  }  ';\n     } ;\n    \n     if (obj.arrays) {\n    __p += '\\n}';\n     } ;\n    __p += \n    (obj.bottom ) +\n    ';\\nreturn result';\n    \n    \n    return __p\n  };\n\n  /** Reusable iterator options for `assign` and `defaults` */\n  var defaultsIteratorOptions = {\n    'args': 'object, source, guard',\n    'top':\n      'var args = arguments,\\n' +\n      '    argsIndex = 0,\\n' +\n      \"    argsLength = typeof guard == 'number' ? 2 : args.length;\\n\" +\n      'while (++argsIndex < argsLength) {\\n' +\n      '  iterable = args[argsIndex];\\n' +\n      '  if (iterable && objectTypes[typeof iterable]) {',\n    'loop': \"if (typeof result[index] == 'undefined') result[index] = iterable[index]\",\n    'bottom': '  }\\n}'\n  };\n\n  /** Reusable iterator options shared by `each`, `forIn`, and `forOwn` */\n  var eachIteratorOptions = {\n    'args': 'collection, callback, thisArg',\n    'top': \"callback = callback && typeof thisArg == 'undefined' ? callback : createCallback(callback, thisArg)\",\n    'arrays': \"typeof length == 'number'\",\n    'loop': 'if (callback(iterable[index], index, collection) === false) return result'\n  };\n\n  /** Reusable iterator options for `forIn` and `forOwn` */\n  var forOwnIteratorOptions = {\n    'top': 'if (!objectTypes[typeof iterable]) return result;\\n' + eachIteratorOptions.top,\n    'arrays': false\n  };\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Creates a function optimized to search large arrays for a given `value`,\n   * starting at `fromIndex`, using strict equality for comparisons, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to search.\n   * @param {Mixed} value The value to search for.\n   * @param {Number} [fromIndex=0] The index to search from.\n   * @param {Number} [largeSize=30] The length at which an array is considered large.\n   * @returns {Boolean} Returns `true`, if `value` is found, else `false`.\n   */\n  function cachedContains(array, fromIndex, largeSize) {\n    fromIndex || (fromIndex = 0);\n\n    var length = array.length,\n        isLarge = (length - fromIndex) >= (largeSize || largeArraySize);\n\n    if (isLarge) {\n      var cache = {},\n          index = fromIndex - 1;\n\n      while (++index < length) {\n        // manually coerce `value` to a string because `hasOwnProperty`, in some\n        // older versions of Firefox, coerces objects incorrectly\n        var key = array[index] + '';\n        (hasOwnProperty.call(cache, key) ? cache[key] : (cache[key] = [])).push(array[index]);\n      }\n    }\n    return function(value) {\n      if (isLarge) {\n        var key = value + '';\n        return hasOwnProperty.call(cache, key) && indexOf(cache[key], value) > -1;\n      }\n      return indexOf(array, value, fromIndex) > -1;\n    }\n  }\n\n  /**\n   * Used by `_.max` and `_.min` as the default `callback` when a given\n   * `collection` is a string value.\n   *\n   * @private\n   * @param {String} value The character to inspect.\n   * @returns {Number} Returns the code unit of given character.\n   */\n  function charAtCallback(value) {\n    return value.charCodeAt(0);\n  }\n\n  /**\n   * Used by `sortBy` to compare transformed `collection` values, stable sorting\n   * them in ascending order.\n   *\n   * @private\n   * @param {Object} a The object to compare to `b`.\n   * @param {Object} b The object to compare to `a`.\n   * @returns {Number} Returns the sort order indicator of `1` or `-1`.\n   */\n  function compareAscending(a, b) {\n    var ai = a.index,\n        bi = b.index;\n\n    a = a.criteria;\n    b = b.criteria;\n\n    // ensure a stable sort in V8 and other engines\n    // http://code.google.com/p/v8/issues/detail?id=90\n    if (a !== b) {\n      if (a > b || typeof a == 'undefined') {\n        return 1;\n      }\n      if (a < b || typeof b == 'undefined') {\n        return -1;\n      }\n    }\n    return ai < bi ? -1 : 1;\n  }\n\n  /**\n   * Creates a function that, when called, invokes `func` with the `this` binding\n   * of `thisArg` and prepends any `partialArgs` to the arguments passed to the\n   * bound function.\n   *\n   * @private\n   * @param {Function|String} func The function to bind or the method name.\n   * @param {Mixed} [thisArg] The `this` binding of `func`.\n   * @param {Array} partialArgs An array of arguments to be partially applied.\n   * @param {Object} [rightIndicator] Used to indicate partially applying arguments from the right.\n   * @returns {Function} Returns the new bound function.\n   */\n  function createBound(func, thisArg, partialArgs, rightIndicator) {\n    var isFunc = isFunction(func),\n        isPartial = !partialArgs,\n        key = thisArg;\n\n    // juggle arguments\n    if (isPartial) {\n      partialArgs = thisArg;\n    }\n    if (!isFunc) {\n      thisArg = func;\n    }\n\n    function bound() {\n      // `Function#bind` spec\n      // http://es5.github.com/#x15.3.4.5\n      var args = arguments,\n          thisBinding = isPartial ? this : thisArg;\n\n      if (!isFunc) {\n        func = thisArg[key];\n      }\n      if (partialArgs.length) {\n        args = args.length\n          ? (args = slice(args), rightIndicator ? args.concat(partialArgs) : partialArgs.concat(args))\n          : partialArgs;\n      }\n      if (this instanceof bound) {\n        // ensure `new bound` is an instance of `bound` and `func`\n        noop.prototype = func.prototype;\n        thisBinding = new noop;\n        noop.prototype = null;\n\n        // mimic the constructor's `return` behavior\n        // http://es5.github.com/#x13.2.2\n        var result = func.apply(thisBinding, args);\n        return isObject(result) ? result : thisBinding;\n      }\n      return func.apply(thisBinding, args);\n    }\n    return bound;\n  }\n\n  /**\n   * Produces a callback bound to an optional `thisArg`. If `func` is a property\n   * name, the created callback will return the property value for a given element.\n   * If `func` is an object, the created callback will return `true` for elements\n   * that contain the equivalent object properties, otherwise it will return `false`.\n   *\n   * @private\n   * @param {Mixed} [func=identity] The value to convert to a callback.\n   * @param {Mixed} [thisArg] The `this` binding of the created callback.\n   * @param {Number} [argCount=3] The number of arguments the callback accepts.\n   * @returns {Function} Returns a callback function.\n   */\n  function createCallback(func, thisArg, argCount) {\n    if (func == null) {\n      return identity;\n    }\n    var type = typeof func;\n    if (type != 'function') {\n      if (type != 'object') {\n        return function(object) {\n          return object[func];\n        };\n      }\n      var props = keys(func);\n      return function(object) {\n        var length = props.length,\n            result = false;\n        while (length--) {\n          if (!(result = isEqual(object[props[length]], func[props[length]], indicatorObject))) {\n            break;\n          }\n        }\n        return result;\n      };\n    }\n    if (typeof thisArg != 'undefined') {\n      if (argCount === 1) {\n        return function(value) {\n          return func.call(thisArg, value);\n        };\n      }\n      if (argCount === 2) {\n        return function(a, b) {\n          return func.call(thisArg, a, b);\n        };\n      }\n      if (argCount === 4) {\n        return function(accumulator, value, index, object) {\n          return func.call(thisArg, accumulator, value, index, object);\n        };\n      }\n      return function(value, index, object) {\n        return func.call(thisArg, value, index, object);\n      };\n    }\n    return func;\n  }\n\n  /**\n   * Creates compiled iteration functions.\n   *\n   * @private\n   * @param {Object} [options1, options2, ...] The compile options object(s).\n   *  arrays - A string of code to determine if the iterable is an array or array-like.\n   *  useHas - A boolean to specify using `hasOwnProperty` checks in the object loop.\n   *  args - A string of comma separated arguments the iteration function will accept.\n   *  top - A string of code to execute before the iteration branches.\n   *  loop - A string of code to execute in the object loop.\n   *  bottom - A string of code to execute after the iteration branches.\n   *\n   * @returns {Function} Returns the compiled function.\n   */\n  function createIterator() {\n    var data = {\n      // support properties\n      'isKeysFast': isKeysFast,\n\n      // iterator options\n      'arrays': 'isArray(iterable)',\n      'bottom': '',\n      'loop': '',\n      'top': '',\n      'useHas': true\n    };\n\n    // merge options into a template data object\n    for (var object, index = 0; object = arguments[index]; index++) {\n      for (var key in object) {\n        data[key] = object[key];\n      }\n    }\n    var args = data.args;\n    data.firstArg = /^[^,]+/.exec(args)[0];\n\n    // create the function factory\n    var factory = Function(\n        'createCallback, hasOwnProperty, isArguments, isArray, isString, ' +\n        'objectTypes, nativeKeys',\n      'return function(' + args + ') {\\n' + iteratorTemplate(data) + '\\n}'\n    );\n    // return the compiled function\n    return factory(\n      createCallback, hasOwnProperty, isArguments, isArray, isString,\n      objectTypes, nativeKeys\n    );\n  }\n\n  /**\n   * A function compiled to iterate `arguments` objects, arrays, objects, and\n   * strings consistenly across environments, executing the `callback` for each\n   * element in the `collection`. The `callback` is bound to `thisArg` and invoked\n   * with three arguments; (value, index|key, collection). Callbacks may exit\n   * iteration early by explicitly returning `false`.\n   *\n   * @private\n   * @type Function\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function} [callback=identity] The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array|Object|String} Returns `collection`.\n   */\n  var each = createIterator(eachIteratorOptions);\n\n  /**\n   * Used by `template` to escape characters for inclusion in compiled\n   * string literals.\n   *\n   * @private\n   * @param {String} match The matched character to escape.\n   * @returns {String} Returns the escaped character.\n   */\n  function escapeStringChar(match) {\n    return '\\\\' + stringEscapes[match];\n  }\n\n  /**\n   * Used by `escape` to convert characters to HTML entities.\n   *\n   * @private\n   * @param {String} match The matched character to escape.\n   * @returns {String} Returns the escaped character.\n   */\n  function escapeHtmlChar(match) {\n    return htmlEscapes[match];\n  }\n\n  /**\n   * Checks if `value` is a DOM node in IE < 9.\n   *\n   * @private\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true` if the `value` is a DOM node, else `false`.\n   */\n  function isNode(value) {\n    // IE < 9 presents DOM nodes as `Object` objects except they have `toString`\n    // methods that are `typeof` \"string\" and still can coerce nodes to strings\n    return typeof value.toString != 'function' && typeof (value + '') == 'string';\n  }\n\n  /**\n   * A no-operation function.\n   *\n   * @private\n   */\n  function noop() {\n    // no operation performed\n  }\n\n  /**\n   * Slices the `collection` from the `start` index up to, but not including,\n   * the `end` index.\n   *\n   * Note: This function is used, instead of `Array#slice`, to support node lists\n   * in IE < 9 and to ensure dense arrays are returned.\n   *\n   * @private\n   * @param {Array|Object|String} collection The collection to slice.\n   * @param {Number} start The start index.\n   * @param {Number} end The end index.\n   * @returns {Array} Returns the new array.\n   */\n  function slice(array, start, end) {\n    start || (start = 0);\n    if (typeof end == 'undefined') {\n      end = array ? array.length : 0;\n    }\n    var index = -1,\n        length = end - start || 0,\n        result = Array(length < 0 ? 0 : length);\n\n    while (++index < length) {\n      result[index] = array[start + index];\n    }\n    return result;\n  }\n\n  /**\n   * Used by `unescape` to convert HTML entities to characters.\n   *\n   * @private\n   * @param {String} match The matched character to unescape.\n   * @returns {String} Returns the unescaped character.\n   */\n  function unescapeHtmlChar(match) {\n    return htmlUnescapes[match];\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Checks if `value` is an `arguments` object.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is an `arguments` object, else `false`.\n   * @example\n   *\n   * (function() { return _.isArguments(arguments); })(1, 2, 3);\n   * // => true\n   *\n   * _.isArguments([1, 2, 3]);\n   * // => false\n   */\n  function isArguments(value) {\n    return toString.call(value) == argsClass;\n  }\n\n  /**\n   * Iterates over `object`'s own and inherited enumerable properties, executing\n   * the `callback` for each property. The `callback` is bound to `thisArg` and\n   * invoked with three arguments; (value, key, object). Callbacks may exit iteration\n   * early by explicitly returning `false`.\n   *\n   * @static\n   * @memberOf _\n   * @type Function\n   * @category Objects\n   * @param {Object} object The object to iterate over.\n   * @param {Function} [callback=identity] The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Object} Returns `object`.\n   * @example\n   *\n   * function Dog(name) {\n   *   this.name = name;\n   * }\n   *\n   * Dog.prototype.bark = function() {\n   *   alert('Woof, woof!');\n   * };\n   *\n   * _.forIn(new Dog('Dagny'), function(value, key) {\n   *   alert(key);\n   * });\n   * // => alerts 'name' and 'bark' (order is not guaranteed)\n   */\n  var forIn = createIterator(eachIteratorOptions, forOwnIteratorOptions, {\n    'useHas': false\n  });\n\n  /**\n   * Iterates over an object's own enumerable properties, executing the `callback`\n   * for each property. The `callback` is bound to `thisArg` and invoked with three\n   * arguments; (value, key, object). Callbacks may exit iteration early by explicitly\n   * returning `false`.\n   *\n   * @static\n   * @memberOf _\n   * @type Function\n   * @category Objects\n   * @param {Object} object The object to iterate over.\n   * @param {Function} [callback=identity] The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Object} Returns `object`.\n   * @example\n   *\n   * _.forOwn({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {\n   *   alert(key);\n   * });\n   * // => alerts '0', '1', and 'length' (order is not guaranteed)\n   */\n  var forOwn = createIterator(eachIteratorOptions, forOwnIteratorOptions);\n\n  /**\n   * Checks if `value` is an array.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is an array, else `false`.\n   * @example\n   *\n   * (function() { return _.isArray(arguments); })();\n   * // => false\n   *\n   * _.isArray([1, 2, 3]);\n   * // => true\n   */\n  var isArray = nativeIsArray || function(value) {\n    // `instanceof` may cause a memory leak in IE 7 if `value` is a host object\n    // http://ajaxian.com/archives/working-aroung-the-instanceof-memory-leak\n    return value instanceof Array || toString.call(value) == arrayClass;\n  };\n\n  /**\n   * Creates an array composed of the own enumerable property names of `object`.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The object to inspect.\n   * @returns {Array} Returns a new array of property names.\n   * @example\n   *\n   * _.keys({ 'one': 1, 'two': 2, 'three': 3 });\n   * // => ['one', 'two', 'three'] (order is not guaranteed)\n   */\n  var keys = !nativeKeys ? shimKeys : function(object) {\n    if (!isObject(object)) {\n      return [];\n    }\n    return nativeKeys(object);\n  };\n\n  /**\n   * A fallback implementation of `isPlainObject` that checks if a given `value`\n   * is an object created by the `Object` constructor, assuming objects created\n   * by the `Object` constructor have no inherited enumerable properties and that\n   * there are no `Object.prototype` extensions.\n   *\n   * @private\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if `value` is a plain object, else `false`.\n   */\n  function shimIsPlainObject(value) {\n    // avoid non-objects and false positives for `arguments` objects\n    var result = false;\n    if (!(value && typeof value == 'object') || isArguments(value)) {\n      return result;\n    }\n    // check that the constructor is `Object` (i.e. `Object instanceof Object`)\n    var ctor = value.constructor;\n    if ((!isFunction(ctor)) || ctor instanceof ctor) {\n      // In most environments an object's own properties are iterated before\n      // its inherited properties. If the last iterated property is an object's\n      // own property then there are no inherited enumerable properties.\n      forIn(value, function(value, key) {\n        result = key;\n      });\n      return result === false || hasOwnProperty.call(value, result);\n    }\n    return result;\n  }\n\n  /**\n   * A fallback implementation of `Object.keys` that produces an array of the\n   * given object's own enumerable property names.\n   *\n   * @private\n   * @param {Object} object The object to inspect.\n   * @returns {Array} Returns a new array of property names.\n   */\n  function shimKeys(object) {\n    var result = [];\n    forOwn(object, function(value, key) {\n      result.push(key);\n    });\n    return result;\n  }\n\n  /**\n   * Used to convert characters to HTML entities:\n   *\n   * Though the `>` character is escaped for symmetry, characters like `>` and `/`\n   * don't require escaping in HTML and have no special meaning unless they're part\n   * of a tag or an unquoted attribute value.\n   * http://mathiasbynens.be/notes/ambiguous-ampersands (under \"semi-related fun fact\")\n   */\n  var htmlEscapes = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n  };\n\n  /** Used to convert HTML entities to characters */\n  var htmlUnescapes = invert(htmlEscapes);\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Assigns own enumerable properties of source object(s) to the destination\n   * object. Subsequent sources will overwrite propery assignments of previous\n   * sources. If a `callback` function is passed, it will be executed to produce\n   * the assigned values. The `callback` is bound to `thisArg` and invoked with\n   * two arguments; (objectValue, sourceValue).\n   *\n   * @static\n   * @memberOf _\n   * @type Function\n   * @alias extend\n   * @category Objects\n   * @param {Object} object The destination object.\n   * @param {Object} [source1, source2, ...] The source objects.\n   * @param {Function} [callback] The function to customize assigning values.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Object} Returns the destination object.\n   * @example\n   *\n   * _.assign({ 'name': 'moe' }, { 'age': 40 });\n   * // => { 'name': 'moe', 'age': 40 }\n   *\n   * var defaults = _.partialRight(_.assign, function(a, b) {\n   *   return typeof a == 'undefined' ? b : a;\n   * });\n   *\n   * var food = { 'name': 'apple' };\n   * defaults(food, { 'name': 'banana', 'type': 'fruit' });\n   * // => { 'name': 'apple', 'type': 'fruit' }\n   */\n  var assign = createIterator(defaultsIteratorOptions, {\n    'top':\n      defaultsIteratorOptions.top.replace(';',\n        ';\\n' +\n        \"if (argsLength > 3 && typeof args[argsLength - 2] == 'function') {\\n\" +\n        '  var callback = createCallback(args[--argsLength - 1], args[argsLength--], 2);\\n' +\n        \"} else if (argsLength > 2 && typeof args[argsLength - 1] == 'function') {\\n\" +\n        '  callback = args[--argsLength];\\n' +\n        '}'\n      ),\n    'loop': 'result[index] = callback ? callback(result[index], iterable[index]) : iterable[index]'\n  });\n\n  /**\n   * Creates a clone of `value`. If `deep` is `true`, nested objects will also\n   * be cloned, otherwise they will be assigned by reference. If a `callback`\n   * function is passed, it will be executed to produce the cloned values. If\n   * `callback` returns `undefined`, cloning will be handled by the method instead.\n   * The `callback` is bound to `thisArg` and invoked with one argument; (value).\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to clone.\n   * @param {Boolean} [deep=false] A flag to indicate a deep clone.\n   * @param {Function} [callback] The function to customize cloning values.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @param- {Array} [stackA=[]] Internally used to track traversed source objects.\n   * @param- {Array} [stackB=[]] Internally used to associate clones with source counterparts.\n   * @returns {Mixed} Returns the cloned `value`.\n   * @example\n   *\n   * var stooges = [\n   *   { 'name': 'moe', 'age': 40 },\n   *   { 'name': 'larry', 'age': 50 }\n   * ];\n   *\n   * var shallow = _.clone(stooges);\n   * shallow[0] === stooges[0];\n   * // => true\n   *\n   * var deep = _.clone(stooges, true);\n   * deep[0] === stooges[0];\n   * // => false\n   *\n   * _.mixin({\n   *   'clone': _.partialRight(_.clone, function(value) {\n   *     return _.isElement(value) ? value.cloneNode(false) : undefined;\n   *   })\n   * });\n   *\n   * var clone = _.clone(document.body);\n   * clone.childNodes.length;\n   * // => 0\n   */\n  function clone(value, deep, callback, thisArg, stackA, stackB) {\n    var result = value;\n\n    // allows working with \"Collections\" methods without using their `callback`\n    // argument, `index|key`, for this method's `callback`\n    if (typeof deep == 'function') {\n      thisArg = callback;\n      callback = deep;\n      deep = false;\n    }\n    if (typeof callback == 'function') {\n      callback = typeof thisArg == 'undefined' ? callback : createCallback(callback, thisArg, 1);\n      result = callback(result);\n\n      var done = typeof result != 'undefined';\n      if (!done) {\n        result = value;\n      }\n    }\n    // inspect [[Class]]\n    var isObj = isObject(result);\n    if (isObj) {\n      var className = toString.call(result);\n      if (!cloneableClasses[className]) {\n        return result;\n      }\n      var isArr = isArray(result);\n    }\n    // shallow clone\n    if (!isObj || !deep) {\n      return isObj && !done\n        ? (isArr ? slice(result) : assign({}, result))\n        : result;\n    }\n    var ctor = ctorByClass[className];\n    switch (className) {\n      case boolClass:\n      case dateClass:\n        return done ? result : new ctor(+result);\n\n      case numberClass:\n      case stringClass:\n        return done ? result : new ctor(result);\n\n      case regexpClass:\n        return done ? result : ctor(result.source, reFlags.exec(result));\n    }\n    // check for circular references and return corresponding clone\n    stackA || (stackA = []);\n    stackB || (stackB = []);\n\n    var length = stackA.length;\n    while (length--) {\n      if (stackA[length] == value) {\n        return stackB[length];\n      }\n    }\n    // init cloned object\n    if (!done) {\n      result = isArr ? ctor(result.length) : {};\n\n      // add array properties assigned by `RegExp#exec`\n      if (isArr) {\n        if (hasOwnProperty.call(value, 'index')) {\n          result.index = value.index;\n        }\n        if (hasOwnProperty.call(value, 'input')) {\n          result.input = value.input;\n        }\n      }\n    }\n    // add the source value to the stack of traversed objects\n    // and associate it with its clone\n    stackA.push(value);\n    stackB.push(result);\n\n    // recursively populate clone (susceptible to call stack limits)\n    (isArr ? forEach : forOwn)(done ? result : value, function(objValue, key) {\n      result[key] = clone(objValue, deep, callback, undefined, stackA, stackB);\n    });\n\n    return result;\n  }\n\n  /**\n   * Creates a deep clone of `value`. If a `callback` function is passed, it will\n   * be executed to produce the cloned values. If `callback` returns the value it\n   * was passed, cloning will be handled by the method instead. The `callback` is\n   * bound to `thisArg` and invoked with one argument; (value).\n   *\n   * Note: This function is loosely based on the structured clone algorithm. Functions\n   * and DOM nodes are **not** cloned. The enumerable properties of `arguments` objects and\n   * objects created by constructors other than `Object` are cloned to plain `Object` objects.\n   * See http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to deep clone.\n   * @param {Function} [callback] The function to customize cloning values.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Mixed} Returns the deep cloned `value`.\n   * @example\n   *\n   * var stooges = [\n   *   { 'name': 'moe', 'age': 40 },\n   *   { 'name': 'larry', 'age': 50 }\n   * ];\n   *\n   * var deep = _.cloneDeep(stooges);\n   * deep[0] === stooges[0];\n   * // => false\n   *\n   * var view = {\n   *   'label': 'docs',\n   *   'node': element\n   * };\n   *\n   * var clone = _.cloneDeep(view, function(value) {\n   *   return _.isElement(value) ? value.cloneNode(true) : value;\n   * });\n   *\n   * clone.node == view.node;\n   * // => false\n   */\n  function cloneDeep(value, callback, thisArg) {\n    return clone(value, true, callback, thisArg);\n  }\n\n  /**\n   * Assigns own enumerable properties of source object(s) to the destination\n   * object for all destination properties that resolve to `undefined`. Once a\n   * property is set, additional defaults of the same property will be ignored.\n   *\n   * @static\n   * @memberOf _\n   * @type Function\n   * @category Objects\n   * @param {Object} object The destination object.\n   * @param {Object} [source1, source2, ...] The source objects.\n   * @param- {Object} [guard] Internally used to allow working with `_.reduce`\n   *  without using its callback's `key` and `object` arguments as sources.\n   * @returns {Object} Returns the destination object.\n   * @example\n   *\n   * var food = { 'name': 'apple' };\n   * _.defaults(food, { 'name': 'banana', 'type': 'fruit' });\n   * // => { 'name': 'apple', 'type': 'fruit' }\n   */\n  var defaults = createIterator(defaultsIteratorOptions);\n\n  /**\n   * Creates a sorted array of all enumerable properties, own and inherited,\n   * of `object` that have function values.\n   *\n   * @static\n   * @memberOf _\n   * @alias methods\n   * @category Objects\n   * @param {Object} object The object to inspect.\n   * @returns {Array} Returns a new array of property names that have function values.\n   * @example\n   *\n   * _.functions(_);\n   * // => ['all', 'any', 'bind', 'bindAll', 'clone', 'compact', 'compose', ...]\n   */\n  function functions(object) {\n    var result = [];\n    forIn(object, function(value, key) {\n      if (isFunction(value)) {\n        result.push(key);\n      }\n    });\n    return result.sort();\n  }\n\n  /**\n   * Checks if the specified object `property` exists and is a direct property,\n   * instead of an inherited property.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The object to check.\n   * @param {String} property The property to check for.\n   * @returns {Boolean} Returns `true` if key is a direct property, else `false`.\n   * @example\n   *\n   * _.has({ 'a': 1, 'b': 2, 'c': 3 }, 'b');\n   * // => true\n   */\n  function has(object, property) {\n    return object ? hasOwnProperty.call(object, property) : false;\n  }\n\n  /**\n   * Creates an object composed of the inverted keys and values of the given `object`.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The object to invert.\n   * @returns {Object} Returns the created inverted object.\n   * @example\n   *\n   *  _.invert({ 'first': 'moe', 'second': 'larry' });\n   * // => { 'moe': 'first', 'larry': 'second' } (order is not guaranteed)\n   */\n  function invert(object) {\n    var index = -1,\n        props = keys(object),\n        length = props.length,\n        result = {};\n\n    while (++index < length) {\n      var key = props[index];\n      result[object[key]] = key;\n    }\n    return result;\n  }\n\n  /**\n   * Checks if `value` is a boolean value.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is a boolean value, else `false`.\n   * @example\n   *\n   * _.isBoolean(null);\n   * // => false\n   */\n  function isBoolean(value) {\n    return value === true || value === false || toString.call(value) == boolClass;\n  }\n\n  /**\n   * Checks if `value` is a date.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is a date, else `false`.\n   * @example\n   *\n   * _.isDate(new Date);\n   * // => true\n   */\n  function isDate(value) {\n    return value instanceof Date || toString.call(value) == dateClass;\n  }\n\n  /**\n   * Checks if `value` is a DOM element.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is a DOM element, else `false`.\n   * @example\n   *\n   * _.isElement(document.body);\n   * // => true\n   */\n  function isElement(value) {\n    return value ? value.nodeType === 1 : false;\n  }\n\n  /**\n   * Checks if `value` is empty. Arrays, strings, or `arguments` objects with a\n   * length of `0` and objects with no own enumerable properties are considered\n   * \"empty\".\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Array|Object|String} value The value to inspect.\n   * @returns {Boolean} Returns `true`, if the `value` is empty, else `false`.\n   * @example\n   *\n   * _.isEmpty([1, 2, 3]);\n   * // => false\n   *\n   * _.isEmpty({});\n   * // => true\n   *\n   * _.isEmpty('');\n   * // => true\n   */\n  function isEmpty(value) {\n    var result = true;\n    if (!value) {\n      return result;\n    }\n    var className = toString.call(value),\n        length = value.length;\n\n    if ((className == arrayClass || className == stringClass ||\n        className == argsClass) ||\n        (className == objectClass && typeof length == 'number' && isFunction(value.splice))) {\n      return !length;\n    }\n    forOwn(value, function() {\n      return (result = false);\n    });\n    return result;\n  }\n\n  /**\n   * Performs a deep comparison between two values to determine if they are\n   * equivalent to each other. If `callback` is passed, it will be executed to\n   * compare values. If `callback` returns `undefined`, comparisons will be handled\n   * by the method instead. The `callback` is bound to `thisArg` and invoked with\n   * two arguments; (a, b).\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} a The value to compare.\n   * @param {Mixed} b The other value to compare.\n   * @param {Function} [callback] The function to customize comparing values.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @param- {Object} [stackA=[]] Internally used track traversed `a` objects.\n   * @param- {Object} [stackB=[]] Internally used track traversed `b` objects.\n   * @returns {Boolean} Returns `true`, if the values are equvalent, else `false`.\n   * @example\n   *\n   * var moe = { 'name': 'moe', 'age': 40 };\n   * var copy = { 'name': 'moe', 'age': 40 };\n   *\n   * moe == copy;\n   * // => false\n   *\n   * _.isEqual(moe, copy);\n   * // => true\n   *\n   * var words = ['hello', 'goodbye'];\n   * var otherWords = ['hi', 'goodbye'];\n   *\n   * _.isEqual(words, otherWords, function(a, b) {\n   *   var reGreet = /^(?:hello|hi)$/i,\n   *       aGreet = _.isString(a) && reGreet.test(a),\n   *       bGreet = _.isString(b) && reGreet.test(b);\n   *\n   *   return (aGreet || bGreet) ? (aGreet == bGreet) : undefined;\n   * });\n   * // => true\n   */\n  function isEqual(a, b, callback, thisArg, stackA, stackB) {\n    // used to indicate that when comparing objects, `a` has at least the properties of `b`\n    var whereIndicator = callback === indicatorObject;\n    if (callback && !whereIndicator) {\n      callback = typeof thisArg == 'undefined' ? callback : createCallback(callback, thisArg, 2);\n      var result = callback(a, b);\n      if (typeof result != 'undefined') {\n        return !!result;\n      }\n    }\n    // exit early for identical values\n    if (a === b) {\n      // treat `+0` vs. `-0` as not equal\n      return a !== 0 || (1 / a == 1 / b);\n    }\n    var type = typeof a,\n        otherType = typeof b;\n\n    // exit early for unlike primitive values\n    if (a === a &&\n        (!a || (type != 'function' && type != 'object')) &&\n        (!b || (otherType != 'function' && otherType != 'object'))) {\n      return false;\n    }\n    // exit early for `null` and `undefined`, avoiding ES3's Function#call behavior\n    // http://es5.github.com/#x15.3.4.4\n    if (a == null || b == null) {\n      return a === b;\n    }\n    // compare [[Class]] names\n    var className = toString.call(a),\n        otherClass = toString.call(b);\n\n    if (className == argsClass) {\n      className = objectClass;\n    }\n    if (otherClass == argsClass) {\n      otherClass = objectClass;\n    }\n    if (className != otherClass) {\n      return false;\n    }\n    switch (className) {\n      case boolClass:\n      case dateClass:\n        // coerce dates and booleans to numbers, dates to milliseconds and booleans\n        // to `1` or `0`, treating invalid dates coerced to `NaN` as not equal\n        return +a == +b;\n\n      case numberClass:\n        // treat `NaN` vs. `NaN` as equal\n        return a != +a\n          ? b != +b\n          // but treat `+0` vs. `-0` as not equal\n          : (a == 0 ? (1 / a == 1 / b) : a == +b);\n\n      case regexpClass:\n      case stringClass:\n        // coerce regexes to strings (http://es5.github.com/#x15.10.6.4)\n        // treat string primitives and their corresponding object instances as equal\n        return a == b + '';\n    }\n    var isArr = className == arrayClass;\n    if (!isArr) {\n      // unwrap any `lodash` wrapped values\n      if (a.__wrapped__ || b.__wrapped__) {\n        return isEqual(a.__wrapped__ || a, b.__wrapped__ || b, callback, thisArg, stackA, stackB);\n      }\n      // exit for functions and DOM nodes\n      if (className != objectClass) {\n        return false;\n      }\n      // in older versions of Opera, `arguments` objects have `Array` constructors\n      var ctorA = a.constructor,\n          ctorB = b.constructor;\n\n      // non `Object` object instances with different constructors are not equal\n      if (ctorA != ctorB && !(\n            isFunction(ctorA) && ctorA instanceof ctorA &&\n            isFunction(ctorB) && ctorB instanceof ctorB\n          )) {\n        return false;\n      }\n    }\n    // assume cyclic structures are equal\n    // the algorithm for detecting cyclic structures is adapted from ES 5.1\n    // section 15.12.3, abstract operation `JO` (http://es5.github.com/#x15.12.3)\n    stackA || (stackA = []);\n    stackB || (stackB = []);\n\n    var length = stackA.length;\n    while (length--) {\n      if (stackA[length] == a) {\n        return stackB[length] == b;\n      }\n    }\n    var size = 0;\n    result = true;\n\n    // add `a` and `b` to the stack of traversed objects\n    stackA.push(a);\n    stackB.push(b);\n\n    // recursively compare objects and arrays (susceptible to call stack limits)\n    if (isArr) {\n      length = a.length;\n      size = b.length;\n\n      // compare lengths to determine if a deep comparison is necessary\n      result = size == a.length;\n      if (!result && !whereIndicator) {\n        return result;\n      }\n      // deep compare the contents, ignoring non-numeric properties\n      while (size--) {\n        var index = length,\n            value = b[size];\n\n        if (whereIndicator) {\n          while (index--) {\n            if ((result = isEqual(a[index], value, callback, thisArg, stackA, stackB))) {\n              break;\n            }\n          }\n        } else if (!(result = isEqual(a[size], value, callback, thisArg, stackA, stackB))) {\n          break;\n        }\n      }\n      return result;\n    }\n    // deep compare objects using `forIn`, instead of `forOwn`, to avoid `Object.keys`\n    // which, in this case, is more costly\n    forIn(b, function(value, key, b) {\n      if (hasOwnProperty.call(b, key)) {\n        // count the number of properties.\n        size++;\n        // deep compare each property value.\n        return (result = hasOwnProperty.call(a, key) && isEqual(a[key], value, callback, thisArg, stackA, stackB));\n      }\n    });\n\n    if (result && !whereIndicator) {\n      // ensure both objects have the same number of properties\n      forIn(a, function(value, key, a) {\n        if (hasOwnProperty.call(a, key)) {\n          // `size` will be `-1` if `a` has more properties than `b`\n          return (result = --size > -1);\n        }\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Checks if `value` is, or can be coerced to, a finite number.\n   *\n   * Note: This is not the same as native `isFinite`, which will return true for\n   * booleans and empty strings. See http://es5.github.com/#x15.1.2.5.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is finite, else `false`.\n   * @example\n   *\n   * _.isFinite(-101);\n   * // => true\n   *\n   * _.isFinite('10');\n   * // => true\n   *\n   * _.isFinite(true);\n   * // => false\n   *\n   * _.isFinite('');\n   * // => false\n   *\n   * _.isFinite(Infinity);\n   * // => false\n   */\n  function isFinite(value) {\n    return nativeIsFinite(value) && !nativeIsNaN(parseFloat(value));\n  }\n\n  /**\n   * Checks if `value` is a function.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is a function, else `false`.\n   * @example\n   *\n   * _.isFunction(_);\n   * // => true\n   */\n  function isFunction(value) {\n    return typeof value == 'function';\n  }\n  // fallback for older versions of Chrome and Safari\n  if (isFunction(/x/)) {\n    isFunction = function(value) {\n      return value instanceof Function || toString.call(value) == funcClass;\n    };\n  }\n\n  /**\n   * Checks if `value` is the language type of Object.\n   * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(1);\n   * // => false\n   */\n  function isObject(value) {\n    // check if the value is the ECMAScript language type of Object\n    // http://es5.github.com/#x8\n    // and avoid a V8 bug\n    // http://code.google.com/p/v8/issues/detail?id=2291\n    return value ? objectTypes[typeof value] : false;\n  }\n\n  /**\n   * Checks if `value` is `NaN`.\n   *\n   * Note: This is not the same as native `isNaN`, which will return `true` for\n   * `undefined` and other values. See http://es5.github.com/#x15.1.2.4.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is `NaN`, else `false`.\n   * @example\n   *\n   * _.isNaN(NaN);\n   * // => true\n   *\n   * _.isNaN(new Number(NaN));\n   * // => true\n   *\n   * isNaN(undefined);\n   * // => true\n   *\n   * _.isNaN(undefined);\n   * // => false\n   */\n  function isNaN(value) {\n    // `NaN` as a primitive is the only value that is not equal to itself\n    // (perform the [[Class]] check first to avoid errors with some host objects in IE)\n    return isNumber(value) && value != +value\n  }\n\n  /**\n   * Checks if `value` is `null`.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is `null`, else `false`.\n   * @example\n   *\n   * _.isNull(null);\n   * // => true\n   *\n   * _.isNull(undefined);\n   * // => false\n   */\n  function isNull(value) {\n    return value === null;\n  }\n\n  /**\n   * Checks if `value` is a number.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is a number, else `false`.\n   * @example\n   *\n   * _.isNumber(8.4 * 5);\n   * // => true\n   */\n  function isNumber(value) {\n    return typeof value == 'number' || toString.call(value) == numberClass;\n  }\n\n  /**\n   * Checks if a given `value` is an object created by the `Object` constructor.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if `value` is a plain object, else `false`.\n   * @example\n   *\n   * function Stooge(name, age) {\n   *   this.name = name;\n   *   this.age = age;\n   * }\n   *\n   * _.isPlainObject(new Stooge('moe', 40));\n   * // => false\n   *\n   * _.isPlainObject([1, 2, 3]);\n   * // => false\n   *\n   * _.isPlainObject({ 'name': 'moe', 'age': 40 });\n   * // => true\n   */\n  var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function(value) {\n    if (!(value && typeof value == 'object')) {\n      return false;\n    }\n    var valueOf = value.valueOf,\n        objProto = typeof valueOf == 'function' && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);\n\n    return objProto\n      ? value == objProto || (getPrototypeOf(value) == objProto && !isArguments(value))\n      : shimIsPlainObject(value);\n  };\n\n  /**\n   * Checks if `value` is a regular expression.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is a regular expression, else `false`.\n   * @example\n   *\n   * _.isRegExp(/moe/);\n   * // => true\n   */\n  function isRegExp(value) {\n    return value instanceof RegExp || toString.call(value) == regexpClass;\n  }\n\n  /**\n   * Checks if `value` is a string.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is a string, else `false`.\n   * @example\n   *\n   * _.isString('moe');\n   * // => true\n   */\n  function isString(value) {\n    return typeof value == 'string' || toString.call(value) == stringClass;\n  }\n\n  /**\n   * Checks if `value` is `undefined`.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is `undefined`, else `false`.\n   * @example\n   *\n   * _.isUndefined(void 0);\n   * // => true\n   */\n  function isUndefined(value) {\n    return typeof value == 'undefined';\n  }\n\n  /**\n   * Recursively merges own enumerable properties of the source object(s), that\n   * don't resolve to `undefined`, into the destination object. Subsequent sources\n   * will overwrite propery assignments of previous sources. If a `callback` function\n   * is passed, it will be executed to produce the merged values of the destination\n   * and source properties. If `callback` returns `undefined`, merging will be\n   * handled by the method instead. The `callback` is bound to `thisArg` and\n   * invoked with two arguments; (objectValue, sourceValue).\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The destination object.\n   * @param {Object} [source1, source2, ...] The source objects.\n   * @param {Function} [callback] The function to customize merging properties.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @param- {Object} [deepIndicator] Internally used to indicate that `stackA`\n   *  and `stackB` are arrays of traversed objects instead of source objects.\n   * @param- {Array} [stackA=[]] Internally used to track traversed source objects.\n   * @param- {Array} [stackB=[]] Internally used to associate values with their\n   *  source counterparts.\n   * @returns {Object} Returns the destination object.\n   * @example\n   *\n   * var names = {\n   *   'stooges': [\n   *     { 'name': 'moe' },\n   *     { 'name': 'larry' }\n   *   ]\n   * };\n   *\n   * var ages = {\n   *   'stooges': [\n   *     { 'age': 40 },\n   *     { 'age': 50 }\n   *   ]\n   * };\n   *\n   * _.merge(names, ages);\n   * // => { 'stooges': [{ 'name': 'moe', 'age': 40 }, { 'name': 'larry', 'age': 50 }] }\n   *\n   * var food = {\n   *   'fruits': ['apple'],\n   *   'vegetables': ['beet']\n   * };\n   *\n   * var otherFood = {\n   *   'fruits': ['banana'],\n   *   'vegetables': ['carrot']\n   * };\n   *\n   * _.merge(food, otherFood, function(a, b) {\n   *   return _.isArray(a) ? a.concat(b) : undefined;\n   * });\n   * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot] }\n   */\n  function merge(object, source, deepIndicator) {\n    var args = arguments,\n        index = 0,\n        length = 2;\n\n    if (!isObject(object)) {\n      return object;\n    }\n    if (deepIndicator === indicatorObject) {\n      var callback = args[3],\n          stackA = args[4],\n          stackB = args[5];\n    } else {\n      stackA = [];\n      stackB = [];\n\n      // allows working with `_.reduce` and `_.reduceRight` without\n      // using their `callback` arguments, `index|key` and `collection`\n      if (typeof deepIndicator != 'number') {\n        length = args.length;\n      }\n      if (length > 3 && typeof args[length - 2] == 'function') {\n        callback = createCallback(args[--length - 1], args[length--], 2);\n      } else if (length > 2 && typeof args[length - 1] == 'function') {\n        callback = args[--length];\n      }\n    }\n    while (++index < length) {\n      (isArray(args[index]) ? forEach : forOwn)(args[index], function(source, key) {\n        var found,\n            isArr,\n            result = source,\n            value = object[key];\n\n        if (source && ((isArr = isArray(source)) || isPlainObject(source))) {\n          // avoid merging previously merged cyclic sources\n          var stackLength = stackA.length;\n          while (stackLength--) {\n            if ((found = stackA[stackLength] == source)) {\n              value = stackB[stackLength];\n              break;\n            }\n          }\n          if (!found) {\n            value = isArr\n              ? (isArray(value) ? value : [])\n              : (isPlainObject(value) ? value : {});\n\n            if (callback) {\n              result = callback(value, source);\n              if (typeof result != 'undefined') {\n                value = result;\n              }\n            }\n            // add `source` and associated `value` to the stack of traversed objects\n            stackA.push(source);\n            stackB.push(value);\n\n            // recursively merge objects and arrays (susceptible to call stack limits)\n            if (!callback) {\n              value = merge(value, source, indicatorObject, callback, stackA, stackB);\n            }\n          }\n        }\n        else {\n          if (callback) {\n            result = callback(value, source);\n            if (typeof result == 'undefined') {\n              result = source;\n            }\n          }\n          if (typeof result != 'undefined') {\n            value = result;\n          }\n        }\n        object[key] = value;\n      });\n    }\n    return object;\n  }\n\n  /**\n   * Creates a shallow clone of `object` excluding the specified properties.\n   * Property names may be specified as individual arguments or as arrays of\n   * property names. If a `callback` function is passed, it will be executed\n   * for each property in the `object`, omitting the properties `callback`\n   * returns truthy for. The `callback` is bound to `thisArg` and invoked\n   * with three arguments; (value, key, object).\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The source object.\n   * @param {Function|String} callback|[prop1, prop2, ...] The properties to omit\n   *  or the function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Object} Returns an object without the omitted properties.\n   * @example\n   *\n   * _.omit({ 'name': 'moe', 'age': 40 }, 'age');\n   * // => { 'name': 'moe' }\n   *\n   * _.omit({ 'name': 'moe', 'age': 40 }, function(value) {\n   *   return typeof value == 'number';\n   * });\n   * // => { 'name': 'moe' }\n   */\n  function omit(object, callback, thisArg) {\n    var isFunc = typeof callback == 'function',\n        result = {};\n\n    if (isFunc) {\n      callback = createCallback(callback, thisArg);\n    } else {\n      var props = concat.apply(arrayRef, arguments);\n    }\n    forIn(object, function(value, key, object) {\n      if (isFunc\n            ? !callback(value, key, object)\n            : indexOf(props, key, 1) < 0\n          ) {\n        result[key] = value;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * Creates a two dimensional array of the given object's key-value pairs,\n   * i.e. `[[key1, value1], [key2, value2]]`.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The object to inspect.\n   * @returns {Array} Returns new array of key-value pairs.\n   * @example\n   *\n   * _.pairs({ 'moe': 30, 'larry': 40 });\n   * // => [['moe', 30], ['larry', 40]] (order is not guaranteed)\n   */\n  function pairs(object) {\n    var index = -1,\n        props = keys(object),\n        length = props.length,\n        result = Array(length);\n\n    while (++index < length) {\n      var key = props[index];\n      result[index] = [key, object[key]];\n    }\n    return result;\n  }\n\n  /**\n   * Creates a shallow clone of `object` composed of the specified properties.\n   * Property names may be specified as individual arguments or as arrays of property\n   * names. If `callback` is passed, it will be executed for each property in the\n   * `object`, picking the properties `callback` returns truthy for. The `callback`\n   * is bound to `thisArg` and invoked with three arguments; (value, key, object).\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The source object.\n   * @param {Array|Function|String} callback|[prop1, prop2, ...] The function called\n   *  per iteration or properties to pick, either as individual arguments or arrays.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Object} Returns an object composed of the picked properties.\n   * @example\n   *\n   * _.pick({ 'name': 'moe', '_userid': 'moe1' }, 'name');\n   * // => { 'name': 'moe' }\n   *\n   * _.pick({ 'name': 'moe', '_userid': 'moe1' }, function(value, key) {\n   *   return key.charAt(0) != '_';\n   * });\n   * // => { 'name': 'moe' }\n   */\n  function pick(object, callback, thisArg) {\n    var result = {};\n    if (typeof callback != 'function') {\n      var index = 0,\n          props = concat.apply(arrayRef, arguments),\n          length = isObject(object) ? props.length : 0;\n\n      while (++index < length) {\n        var key = props[index];\n        if (key in object) {\n          result[key] = object[key];\n        }\n      }\n    } else {\n      callback = createCallback(callback, thisArg);\n      forIn(object, function(value, key, object) {\n        if (callback(value, key, object)) {\n          result[key] = value;\n        }\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Creates an array composed of the own enumerable property values of `object`.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The object to inspect.\n   * @returns {Array} Returns a new array of property values.\n   * @example\n   *\n   * _.values({ 'one': 1, 'two': 2, 'three': 3 });\n   * // => [1, 2, 3]\n   */\n  function values(object) {\n    var index = -1,\n        props = keys(object),\n        length = props.length,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = object[props[index]];\n    }\n    return result;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Creates an array of elements from the specified indexes, or keys, of the\n   * `collection`. Indexes may be specified as individual arguments or as arrays\n   * of indexes.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Array|Number|String} [index1, index2, ...] The indexes of\n   *  `collection` to retrieve, either as individual arguments or arrays.\n   * @returns {Array} Returns a new array of elements corresponding to the\n   *  provided indexes.\n   * @example\n   *\n   * _.at(['a', 'b', 'c', 'd', 'e'], [0, 2, 4]);\n   * // => ['a', 'c', 'e']\n   *\n   * _.at(['moe', 'larry', 'curly'], 0, 2);\n   * // => ['moe', 'curly']\n   */\n  function at(collection) {\n    var index = -1,\n        props = concat.apply(arrayRef, slice(arguments, 1)),\n        length = props.length,\n        result = Array(length);\n\n    while(++index < length) {\n      result[index] = collection[props[index]];\n    }\n    return result;\n  }\n\n  /**\n   * Checks if a given `target` element is present in a `collection` using strict\n   * equality for comparisons, i.e. `===`. If `fromIndex` is negative, it is used\n   * as the offset from the end of the collection.\n   *\n   * @static\n   * @memberOf _\n   * @alias include\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Mixed} target The value to check for.\n   * @param {Number} [fromIndex=0] The index to search from.\n   * @returns {Boolean} Returns `true` if the `target` element is found, else `false`.\n   * @example\n   *\n   * _.contains([1, 2, 3], 1);\n   * // => true\n   *\n   * _.contains([1, 2, 3], 1, 2);\n   * // => false\n   *\n   * _.contains({ 'name': 'moe', 'age': 40 }, 'moe');\n   * // => true\n   *\n   * _.contains('curly', 'ur');\n   * // => true\n   */\n  function contains(collection, target, fromIndex) {\n    var index = -1,\n        length = collection ? collection.length : 0,\n        result = false;\n\n    fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex) || 0;\n    if (typeof length == 'number') {\n      result = (isString(collection)\n        ? collection.indexOf(target, fromIndex)\n        : indexOf(collection, target, fromIndex)\n      ) > -1;\n    } else {\n      each(collection, function(value) {\n        if (++index >= fromIndex) {\n          return !(result = value === target);\n        }\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Creates an object composed of keys returned from running each element of the\n   * `collection` through the given `callback`. The corresponding value of each key\n   * is the number of times the key was returned by the `callback`. The `callback`\n   * is bound to `thisArg` and invoked with three arguments; (value, index|key, collection).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Object} Returns the composed aggregate object.\n   * @example\n   *\n   * _.countBy([4.3, 6.1, 6.4], function(num) { return Math.floor(num); });\n   * // => { '4': 1, '6': 2 }\n   *\n   * _.countBy([4.3, 6.1, 6.4], function(num) { return this.floor(num); }, Math);\n   * // => { '4': 1, '6': 2 }\n   *\n   * _.countBy(['one', 'two', 'three'], 'length');\n   * // => { '3': 2, '5': 1 }\n   */\n  function countBy(collection, callback, thisArg) {\n    var result = {};\n    callback = createCallback(callback, thisArg);\n\n    forEach(collection, function(value, key, collection) {\n      key = callback(value, key, collection) + '';\n      (hasOwnProperty.call(result, key) ? result[key]++ : result[key] = 1);\n    });\n    return result;\n  }\n\n  /**\n   * Checks if the `callback` returns a truthy value for **all** elements of a\n   * `collection`. The `callback` is bound to `thisArg` and invoked with three\n   * arguments; (value, index|key, collection).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @alias all\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Boolean} Returns `true` if all elements pass the callback check,\n   *  else `false`.\n   * @example\n   *\n   * _.every([true, 1, null, 'yes'], Boolean);\n   * // => false\n   *\n   * var stooges = [\n   *   { 'name': 'moe', 'age': 40 },\n   *   { 'name': 'larry', 'age': 50 }\n   * ];\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.every(stooges, 'age');\n   * // => true\n   *\n   * // using \"_.where\" callback shorthand\n   * _.every(stooges, { 'age': 50 });\n   * // => false\n   */\n  function every(collection, callback, thisArg) {\n    var result = true;\n    callback = createCallback(callback, thisArg);\n\n    if (isArray(collection)) {\n      var index = -1,\n          length = collection.length;\n\n      while (++index < length) {\n        if (!(result = !!callback(collection[index], index, collection))) {\n          break;\n        }\n      }\n    } else {\n      each(collection, function(value, index, collection) {\n        return (result = !!callback(value, index, collection));\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Examines each element in a `collection`, returning an array of all elements\n   * the `callback` returns truthy for. The `callback` is bound to `thisArg` and\n   * invoked with three arguments; (value, index|key, collection).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @alias select\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array} Returns a new array of elements that passed the callback check.\n   * @example\n   *\n   * var evens = _.filter([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });\n   * // => [2, 4, 6]\n   *\n   * var food = [\n   *   { 'name': 'apple',  'organic': false, 'type': 'fruit' },\n   *   { 'name': 'carrot', 'organic': true,  'type': 'vegetable' }\n   * ];\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.filter(food, 'organic');\n   * // => [{ 'name': 'carrot', 'organic': true, 'type': 'vegetable' }]\n   *\n   * // using \"_.where\" callback shorthand\n   * _.filter(food, { 'type': 'fruit' });\n   * // => [{ 'name': 'apple', 'organic': false, 'type': 'fruit' }]\n   */\n  function filter(collection, callback, thisArg) {\n    var result = [];\n    callback = createCallback(callback, thisArg);\n\n    if (isArray(collection)) {\n      var index = -1,\n          length = collection.length;\n\n      while (++index < length) {\n        var value = collection[index];\n        if (callback(value, index, collection)) {\n          result.push(value);\n        }\n      }\n    } else {\n      each(collection, function(value, index, collection) {\n        if (callback(value, index, collection)) {\n          result.push(value);\n        }\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Examines each element in a `collection`, returning the first that the `callback`\n   * returns truthy for. The `callback` is bound to `thisArg` and invoked with three\n   * arguments; (value, index|key, collection).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @alias detect\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Mixed} Returns the element that passed the callback check,\n   *  else `undefined`.\n   * @example\n   *\n   * var even = _.find([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });\n   * // => 2\n   *\n   * var food = [\n   *   { 'name': 'apple',  'organic': false, 'type': 'fruit' },\n   *   { 'name': 'banana', 'organic': true,  'type': 'fruit' },\n   *   { 'name': 'beet',   'organic': false, 'type': 'vegetable' },\n   *   { 'name': 'carrot', 'organic': true,  'type': 'vegetable' }\n   * ];\n   *\n   * // using \"_.where\" callback shorthand\n   * var veggie = _.find(food, { 'type': 'vegetable' });\n   * // => { 'name': 'beet', 'organic': false, 'type': 'vegetable' }\n   *\n   * // using \"_.pluck\" callback shorthand\n   * var healthy = _.find(food, 'organic');\n   * // => { 'name': 'banana', 'organic': true, 'type': 'fruit' }\n   */\n  function find(collection, callback, thisArg) {\n    var result;\n    callback = createCallback(callback, thisArg);\n\n    forEach(collection, function(value, index, collection) {\n      if (callback(value, index, collection)) {\n        result = value;\n        return false;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * Iterates over a `collection`, executing the `callback` for each element in\n   * the `collection`. The `callback` is bound to `thisArg` and invoked with three\n   * arguments; (value, index|key, collection). Callbacks may exit iteration early\n   * by explicitly returning `false`.\n   *\n   * @static\n   * @memberOf _\n   * @alias each\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function} [callback=identity] The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array|Object|String} Returns `collection`.\n   * @example\n   *\n   * _([1, 2, 3]).forEach(alert).join(',');\n   * // => alerts each number and returns '1,2,3'\n   *\n   * _.forEach({ 'one': 1, 'two': 2, 'three': 3 }, alert);\n   * // => alerts each number value (order is not guaranteed)\n   */\n  function forEach(collection, callback, thisArg) {\n    if (callback && typeof thisArg == 'undefined' && isArray(collection)) {\n      var index = -1,\n          length = collection.length;\n\n      while (++index < length) {\n        if (callback(collection[index], index, collection) === false) {\n          break;\n        }\n      }\n    } else {\n      each(collection, callback, thisArg);\n    }\n    return collection;\n  }\n\n  /**\n   * Creates an object composed of keys returned from running each element of the\n   * `collection` through the `callback`. The corresponding value of each key is\n   * an array of elements passed to `callback` that returned the key. The `callback`\n   * is bound to `thisArg` and invoked with three arguments; (value, index|key, collection).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Object} Returns the composed aggregate object.\n   * @example\n   *\n   * _.groupBy([4.2, 6.1, 6.4], function(num) { return Math.floor(num); });\n   * // => { '4': [4.2], '6': [6.1, 6.4] }\n   *\n   * _.groupBy([4.2, 6.1, 6.4], function(num) { return this.floor(num); }, Math);\n   * // => { '4': [4.2], '6': [6.1, 6.4] }\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.groupBy(['one', 'two', 'three'], 'length');\n   * // => { '3': ['one', 'two'], '5': ['three'] }\n   */\n  function groupBy(collection, callback, thisArg) {\n    var result = {};\n    callback = createCallback(callback, thisArg);\n\n    forEach(collection, function(value, key, collection) {\n      key = callback(value, key, collection) + '';\n      (hasOwnProperty.call(result, key) ? result[key] : result[key] = []).push(value);\n    });\n    return result;\n  }\n\n  /**\n   * Invokes the method named by `methodName` on each element in the `collection`,\n   * returning an array of the results of each invoked method. Additional arguments\n   * will be passed to each invoked method. If `methodName` is a function, it will\n   * be invoked for, and `this` bound to, each element in the `collection`.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|String} methodName The name of the method to invoke or\n   *  the function invoked per iteration.\n   * @param {Mixed} [arg1, arg2, ...] Arguments to invoke the method with.\n   * @returns {Array} Returns a new array of the results of each invoked method.\n   * @example\n   *\n   * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');\n   * // => [[1, 5, 7], [1, 2, 3]]\n   *\n   * _.invoke([123, 456], String.prototype.split, '');\n   * // => [['1', '2', '3'], ['4', '5', '6']]\n   */\n  function invoke(collection, methodName) {\n    var args = slice(arguments, 2),\n        index = -1,\n        isFunc = typeof methodName == 'function',\n        length = collection ? collection.length : 0,\n        result = Array(typeof length == 'number' ? length : 0);\n\n    forEach(collection, function(value) {\n      result[++index] = (isFunc ? methodName : value[methodName]).apply(value, args);\n    });\n    return result;\n  }\n\n  /**\n   * Creates an array of values by running each element in the `collection`\n   * through the `callback`. The `callback` is bound to `thisArg` and invoked with\n   * three arguments; (value, index|key, collection).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @alias collect\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array} Returns a new array of the results of each `callback` execution.\n   * @example\n   *\n   * _.map([1, 2, 3], function(num) { return num * 3; });\n   * // => [3, 6, 9]\n   *\n   * _.map({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { return num * 3; });\n   * // => [3, 6, 9] (order is not guaranteed)\n   *\n   * var stooges = [\n   *   { 'name': 'moe', 'age': 40 },\n   *   { 'name': 'larry', 'age': 50 }\n   * ];\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.map(stooges, 'name');\n   * // => ['moe', 'larry']\n   */\n  function map(collection, callback, thisArg) {\n    var index = -1,\n        length = collection ? collection.length : 0,\n        result = Array(typeof length == 'number' ? length : 0);\n\n    callback = createCallback(callback, thisArg);\n    if (isArray(collection)) {\n      while (++index < length) {\n        result[index] = callback(collection[index], index, collection);\n      }\n    } else {\n      each(collection, function(value, key, collection) {\n        result[++index] = callback(value, key, collection);\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Retrieves the maximum value of an `array`. If `callback` is passed,\n   * it will be executed for each value in the `array` to generate the\n   * criterion by which the value is ranked. The `callback` is bound to\n   * `thisArg` and invoked with three arguments; (value, index, collection).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Mixed} Returns the maximum value.\n   * @example\n   *\n   * _.max([4, 2, 8, 6]);\n   * // => 8\n   *\n   * var stooges = [\n   *   { 'name': 'moe', 'age': 40 },\n   *   { 'name': 'larry', 'age': 50 }\n   * ];\n   *\n   * _.max(stooges, function(stooge) { return stooge.age; });\n   * // => { 'name': 'larry', 'age': 50 };\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.max(stooges, 'age');\n   * // => { 'name': 'larry', 'age': 50 };\n   */\n  function max(collection, callback, thisArg) {\n    var computed = -Infinity,\n        result = computed;\n\n    if (!callback && isArray(collection)) {\n      var index = -1,\n          length = collection.length;\n\n      while (++index < length) {\n        var value = collection[index];\n        if (value > result) {\n          result = value;\n        }\n      }\n    } else {\n      callback = !callback && isString(collection)\n        ? charAtCallback\n        : createCallback(callback, thisArg);\n\n      each(collection, function(value, index, collection) {\n        var current = callback(value, index, collection);\n        if (current > computed) {\n          computed = current;\n          result = value;\n        }\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Retrieves the minimum value of an `array`. If `callback` is passed,\n   * it will be executed for each value in the `array` to generate the\n   * criterion by which the value is ranked. The `callback` is bound to `thisArg`\n   * and invoked with three arguments; (value, index, collection).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Mixed} Returns the minimum value.\n   * @example\n   *\n   * _.min([4, 2, 8, 6]);\n   * // => 2\n   *\n   * var stooges = [\n   *   { 'name': 'moe', 'age': 40 },\n   *   { 'name': 'larry', 'age': 50 }\n   * ];\n   *\n   * _.min(stooges, function(stooge) { return stooge.age; });\n   * // => { 'name': 'moe', 'age': 40 };\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.min(stooges, 'age');\n   * // => { 'name': 'moe', 'age': 40 };\n   */\n  function min(collection, callback, thisArg) {\n    var computed = Infinity,\n        result = computed;\n\n    if (!callback && isArray(collection)) {\n      var index = -1,\n          length = collection.length;\n\n      while (++index < length) {\n        var value = collection[index];\n        if (value < result) {\n          result = value;\n        }\n      }\n    } else {\n      callback = !callback && isString(collection)\n        ? charAtCallback\n        : createCallback(callback, thisArg);\n\n      each(collection, function(value, index, collection) {\n        var current = callback(value, index, collection);\n        if (current < computed) {\n          computed = current;\n          result = value;\n        }\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Retrieves the value of a specified property from all elements in the `collection`.\n   *\n   * @static\n   * @memberOf _\n   * @type Function\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {String} property The property to pluck.\n   * @returns {Array} Returns a new array of property values.\n   * @example\n   *\n   * var stooges = [\n   *   { 'name': 'moe', 'age': 40 },\n   *   { 'name': 'larry', 'age': 50 }\n   * ];\n   *\n   * _.pluck(stooges, 'name');\n   * // => ['moe', 'larry']\n   */\n  var pluck = map;\n\n  /**\n   * Reduces a `collection` to a value that is the accumulated result of running\n   * each element in the `collection` through the `callback`, where each successive\n   * `callback` execution consumes the return value of the previous execution.\n   * If `accumulator` is not passed, the first element of the `collection` will be\n   * used as the initial `accumulator` value. The `callback` is bound to `thisArg`\n   * and invoked with four arguments; (accumulator, value, index|key, collection).\n   *\n   * @static\n   * @memberOf _\n   * @alias foldl, inject\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function} [callback=identity] The function called per iteration.\n   * @param {Mixed} [accumulator] Initial value of the accumulator.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Mixed} Returns the accumulated value.\n   * @example\n   *\n   * var sum = _.reduce([1, 2, 3], function(sum, num) {\n   *   return sum + num;\n   * });\n   * // => 6\n   *\n   * var mapped = _.reduce({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {\n   *   result[key] = num * 3;\n   *   return result;\n   * }, {});\n   * // => { 'a': 3, 'b': 6, 'c': 9 }\n   */\n  function reduce(collection, callback, accumulator, thisArg) {\n    var noaccum = arguments.length < 3;\n    callback = createCallback(callback, thisArg, 4);\n\n    if (isArray(collection)) {\n      var index = -1,\n          length = collection.length;\n\n      if (noaccum) {\n        accumulator = collection[++index];\n      }\n      while (++index < length) {\n        accumulator = callback(accumulator, collection[index], index, collection);\n      }\n    } else {\n      each(collection, function(value, index, collection) {\n        accumulator = noaccum\n          ? (noaccum = false, value)\n          : callback(accumulator, value, index, collection)\n      });\n    }\n    return accumulator;\n  }\n\n  /**\n   * This method is similar to `_.reduce`, except that it iterates over a\n   * `collection` from right to left.\n   *\n   * @static\n   * @memberOf _\n   * @alias foldr\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function} [callback=identity] The function called per iteration.\n   * @param {Mixed} [accumulator] Initial value of the accumulator.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Mixed} Returns the accumulated value.\n   * @example\n   *\n   * var list = [[0, 1], [2, 3], [4, 5]];\n   * var flat = _.reduceRight(list, function(a, b) { return a.concat(b); }, []);\n   * // => [4, 5, 2, 3, 0, 1]\n   */\n  function reduceRight(collection, callback, accumulator, thisArg) {\n    var iterable = collection,\n        length = collection ? collection.length : 0,\n        noaccum = arguments.length < 3;\n\n    if (typeof length != 'number') {\n      var props = keys(collection);\n      length = props.length;\n    }\n    callback = createCallback(callback, thisArg, 4);\n    forEach(collection, function(value, index, collection) {\n      index = props ? props[--length] : --length;\n      accumulator = noaccum\n        ? (noaccum = false, iterable[index])\n        : callback(accumulator, iterable[index], index, collection);\n    });\n    return accumulator;\n  }\n\n  /**\n   * The opposite of `_.filter`, this method returns the elements of a\n   * `collection` that `callback` does **not** return truthy for.\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array} Returns a new array of elements that did **not** pass the\n   *  callback check.\n   * @example\n   *\n   * var odds = _.reject([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });\n   * // => [1, 3, 5]\n   *\n   * var food = [\n   *   { 'name': 'apple',  'organic': false, 'type': 'fruit' },\n   *   { 'name': 'carrot', 'organic': true,  'type': 'vegetable' }\n   * ];\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.reject(food, 'organic');\n   * // => [{ 'name': 'apple', 'organic': false, 'type': 'fruit' }]\n   *\n   * // using \"_.where\" callback shorthand\n   * _.reject(food, { 'type': 'fruit' });\n   * // => [{ 'name': 'carrot', 'organic': true, 'type': 'vegetable' }]\n   */\n  function reject(collection, callback, thisArg) {\n    callback = createCallback(callback, thisArg);\n    return filter(collection, function(value, index, collection) {\n      return !callback(value, index, collection);\n    });\n  }\n\n  /**\n   * Creates an array of shuffled `array` values, using a version of the\n   * Fisher-Yates shuffle. See http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to shuffle.\n   * @returns {Array} Returns a new shuffled collection.\n   * @example\n   *\n   * _.shuffle([1, 2, 3, 4, 5, 6]);\n   * // => [4, 1, 6, 3, 5, 2]\n   */\n  function shuffle(collection) {\n    var index = -1,\n        length = collection ? collection.length : 0,\n        result = Array(typeof length == 'number' ? length : 0);\n\n    forEach(collection, function(value) {\n      var rand = floor(nativeRandom() * (++index + 1));\n      result[index] = result[rand];\n      result[rand] = value;\n    });\n    return result;\n  }\n\n  /**\n   * Gets the size of the `collection` by returning `collection.length` for arrays\n   * and array-like objects or the number of own enumerable properties for objects.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to inspect.\n   * @returns {Number} Returns `collection.length` or number of own enumerable properties.\n   * @example\n   *\n   * _.size([1, 2]);\n   * // => 2\n   *\n   * _.size({ 'one': 1, 'two': 2, 'three': 3 });\n   * // => 3\n   *\n   * _.size('curly');\n   * // => 5\n   */\n  function size(collection) {\n    var length = collection ? collection.length : 0;\n    return typeof length == 'number' ? length : keys(collection).length;\n  }\n\n  /**\n   * Checks if the `callback` returns a truthy value for **any** element of a\n   * `collection`. The function returns as soon as it finds passing value, and\n   * does not iterate over the entire `collection`. The `callback` is bound to\n   * `thisArg` and invoked with three arguments; (value, index|key, collection).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @alias any\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Boolean} Returns `true` if any element passes the callback check,\n   *  else `false`.\n   * @example\n   *\n   * _.some([null, 0, 'yes', false], Boolean);\n   * // => true\n   *\n   * var food = [\n   *   { 'name': 'apple',  'organic': false, 'type': 'fruit' },\n   *   { 'name': 'carrot', 'organic': true,  'type': 'vegetable' }\n   * ];\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.some(food, 'organic');\n   * // => true\n   *\n   * // using \"_.where\" callback shorthand\n   * _.some(food, { 'type': 'meat' });\n   * // => false\n   */\n  function some(collection, callback, thisArg) {\n    var result;\n    callback = createCallback(callback, thisArg);\n\n    if (isArray(collection)) {\n      var index = -1,\n          length = collection.length;\n\n      while (++index < length) {\n        if ((result = callback(collection[index], index, collection))) {\n          break;\n        }\n      }\n    } else {\n      each(collection, function(value, index, collection) {\n        return !(result = callback(value, index, collection));\n      });\n    }\n    return !!result;\n  }\n\n  /**\n   * Creates an array of elements, sorted in ascending order by the results of\n   * running each element in the `collection` through the `callback`. This method\n   * performs a stable sort, that is, it will preserve the original sort order of\n   * equal elements. The `callback` is bound to `thisArg` and invoked with three\n   * arguments; (value, index|key, collection).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array} Returns a new array of sorted elements.\n   * @example\n   *\n   * _.sortBy([1, 2, 3], function(num) { return Math.sin(num); });\n   * // => [3, 1, 2]\n   *\n   * _.sortBy([1, 2, 3], function(num) { return this.sin(num); }, Math);\n   * // => [3, 1, 2]\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.sortBy(['banana', 'strawberry', 'apple'], 'length');\n   * // => ['apple', 'banana', 'strawberry']\n   */\n  function sortBy(collection, callback, thisArg) {\n    var index = -1,\n        length = collection ? collection.length : 0,\n        result = Array(typeof length == 'number' ? length : 0);\n\n    callback = createCallback(callback, thisArg);\n    forEach(collection, function(value, key, collection) {\n      result[++index] = {\n        'criteria': callback(value, key, collection),\n        'index': index,\n        'value': value\n      };\n    });\n\n    length = result.length;\n    result.sort(compareAscending);\n    while (length--) {\n      result[length] = result[length].value;\n    }\n    return result;\n  }\n\n  /**\n   * Converts the `collection` to an array.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to convert.\n   * @returns {Array} Returns the new converted array.\n   * @example\n   *\n   * (function() { return _.toArray(arguments).slice(1); })(1, 2, 3, 4);\n   * // => [2, 3, 4]\n   */\n  function toArray(collection) {\n    if (collection && typeof collection.length == 'number') {\n      return  slice(collection);\n    }\n    return values(collection);\n  }\n\n  /**\n   * Examines each element in a `collection`, returning an array of all elements\n   * that have the given `properties`. When checking `properties`, this method\n   * performs a deep comparison between values to determine if they are equivalent\n   * to each other.\n   *\n   * @static\n   * @memberOf _\n   * @type Function\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Object} properties The object of property values to filter by.\n   * @returns {Array} Returns a new array of elements that have the given `properties`.\n   * @example\n   *\n   * var stooges = [\n   *   { 'name': 'moe', 'age': 40 },\n   *   { 'name': 'larry', 'age': 50 }\n   * ];\n   *\n   * _.where(stooges, { 'age': 40 });\n   * // => [{ 'name': 'moe', 'age': 40 }]\n   */\n  var where = filter;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Creates an array with all falsey values of `array` removed. The values\n   * `false`, `null`, `0`, `\"\"`, `undefined` and `NaN` are all falsey.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to compact.\n   * @returns {Array} Returns a new filtered array.\n   * @example\n   *\n   * _.compact([0, 1, false, 2, '', 3]);\n   * // => [1, 2, 3]\n   */\n  function compact(array) {\n    var index = -1,\n        length = array ? array.length : 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (value) {\n        result.push(value);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Creates an array of `array` elements not present in the other arrays\n   * using strict equality for comparisons, i.e. `===`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to process.\n   * @param {Array} [array1, array2, ...] Arrays to check.\n   * @returns {Array} Returns a new array of `array` elements not present in the\n   *  other arrays.\n   * @example\n   *\n   * _.difference([1, 2, 3, 4, 5], [5, 2, 10]);\n   * // => [1, 3, 4]\n   */\n  function difference(array) {\n    var index = -1,\n        length = array ? array.length : 0,\n        flattened = concat.apply(arrayRef, arguments),\n        contains = cachedContains(flattened, length),\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (!contains(value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Gets the first element of the `array`. If a number `n` is passed, the first\n   * `n` elements of the `array` are returned. If a `callback` function is passed,\n   * the first elements the `callback` returns truthy for are returned. The `callback`\n   * is bound to `thisArg` and invoked with three arguments; (value, index, array).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @alias head, take\n   * @category Arrays\n   * @param {Array} array The array to query.\n   * @param {Function|Object|Number|String} [callback|n] The function called\n   *  per element or the number of elements to return. If a property name or\n   *  object is passed, it will be used to create a \"_.pluck\" or \"_.where\"\n   *  style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Mixed} Returns the first element(s) of `array`.\n   * @example\n   *\n   * _.first([1, 2, 3]);\n   * // => 1\n   *\n   * _.first([1, 2, 3], 2);\n   * // => [1, 2]\n   *\n   * _.first([1, 2, 3], function(num) {\n   *   return num < 3;\n   * });\n   * // => [1, 2]\n   *\n   * var food = [\n   *   { 'name': 'banana', 'organic': true },\n   *   { 'name': 'beet',   'organic': false },\n   * ];\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.first(food, 'organic');\n   * // => [{ 'name': 'banana', 'organic': true }]\n   *\n   * var food = [\n   *   { 'name': 'apple',  'type': 'fruit' },\n   *   { 'name': 'banana', 'type': 'fruit' },\n   *   { 'name': 'beet',   'type': 'vegetable' }\n   * ];\n   *\n   * // using \"_.where\" callback shorthand\n   * _.first(food, { 'type': 'fruit' });\n   * // => [{ 'name': 'apple', 'type': 'fruit' }, { 'name': 'banana', 'type': 'fruit' }]\n   */\n  function first(array, callback, thisArg) {\n    if (array) {\n      var n = 0,\n          length = array.length;\n\n      if (typeof callback != 'number' && callback != null) {\n        var index = -1;\n        callback = createCallback(callback, thisArg);\n        while (++index < length && callback(array[index], index, array)) {\n          n++;\n        }\n      } else {\n        n = callback;\n        if (n == null || thisArg) {\n          return array[0];\n        }\n      }\n      return slice(array, 0, nativeMin(nativeMax(0, n), length));\n    }\n  }\n\n  /**\n   * Flattens a nested array (the nesting can be to any depth). If `shallow` is\n   * truthy, `array` will only be flattened a single level.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to compact.\n   * @param {Boolean} shallow A flag to indicate only flattening a single level.\n   * @returns {Array} Returns a new flattened array.\n   * @example\n   *\n   * _.flatten([1, [2], [3, [[4]]]]);\n   * // => [1, 2, 3, 4];\n   *\n   * _.flatten([1, [2], [3, [[4]]]], true);\n   * // => [1, 2, 3, [[4]]];\n   */\n  function flatten(array, shallow) {\n    var index = -1,\n        length = array ? array.length : 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n\n      // recursively flatten arrays (susceptible to call stack limits)\n      if (isArray(value)) {\n        push.apply(result, shallow ? value : flatten(value));\n      } else {\n        result.push(value);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Gets the index at which the first occurrence of `value` is found using\n   * strict equality for comparisons, i.e. `===`. If the `array` is already\n   * sorted, passing `true` for `fromIndex` will run a faster binary search.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to search.\n   * @param {Mixed} value The value to search for.\n   * @param {Boolean|Number} [fromIndex=0] The index to search from or `true` to\n   *  perform a binary search on a sorted `array`.\n   * @returns {Number} Returns the index of the matched value or `-1`.\n   * @example\n   *\n   * _.indexOf([1, 2, 3, 1, 2, 3], 2);\n   * // => 1\n   *\n   * _.indexOf([1, 2, 3, 1, 2, 3], 2, 3);\n   * // => 4\n   *\n   * _.indexOf([1, 1, 2, 2, 3, 3], 2, true);\n   * // => 2\n   */\n  function indexOf(array, value, fromIndex) {\n    var index = -1,\n        length = array ? array.length : 0;\n\n    if (typeof fromIndex == 'number') {\n      index = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex || 0) - 1;\n    } else if (fromIndex) {\n      index = sortedIndex(array, value);\n      return array[index] === value ? index : -1;\n    }\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Gets all but the last element of `array`. If a number `n` is passed, the\n   * last `n` elements are excluded from the result. If a `callback` function\n   * is passed, the last elements the `callback` returns truthy for are excluded\n   * from the result. The `callback` is bound to `thisArg` and invoked with three\n   * arguments; (value, index, array).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to query.\n   * @param {Function|Object|Number|String} [callback|n=1] The function called\n   *  per element or the number of elements to exclude. If a property name or\n   *  object is passed, it will be used to create a \"_.pluck\" or \"_.where\"\n   *  style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array} Returns a slice of `array`.\n   * @example\n   *\n   * _.initial([1, 2, 3]);\n   * // => [1, 2]\n   *\n   * _.initial([1, 2, 3], 2);\n   * // => [1]\n   *\n   * _.initial([1, 2, 3], function(num) {\n   *   return num > 1;\n   * });\n   * // => [1]\n   *\n   * var food = [\n   *   { 'name': 'beet',   'organic': false },\n   *   { 'name': 'carrot', 'organic': true }\n   * ];\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.initial(food, 'organic');\n   * // => [{ 'name': 'beet',   'organic': false }]\n   *\n   * var food = [\n   *   { 'name': 'banana', 'type': 'fruit' },\n   *   { 'name': 'beet',   'type': 'vegetable' },\n   *   { 'name': 'carrot', 'type': 'vegetable' }\n   * ];\n   *\n   * // using \"_.where\" callback shorthand\n   * _.initial(food, { 'type': 'vegetable' });\n   * // => [{ 'name': 'banana', 'type': 'fruit' }]\n   */\n  function initial(array, callback, thisArg) {\n    if (!array) {\n      return [];\n    }\n    var n = 0,\n        length = array.length;\n\n    if (typeof callback != 'number' && callback != null) {\n      var index = length;\n      callback = createCallback(callback, thisArg);\n      while (index-- && callback(array[index], index, array)) {\n        n++;\n      }\n    } else {\n      n = (callback == null || thisArg) ? 1 : callback || n;\n    }\n    return slice(array, 0, nativeMin(nativeMax(0, length - n), length));\n  }\n\n  /**\n   * Computes the intersection of all the passed-in arrays using strict equality\n   * for comparisons, i.e. `===`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} [array1, array2, ...] Arrays to process.\n   * @returns {Array} Returns a new array of unique elements that are present\n   *  in **all** of the arrays.\n   * @example\n   *\n   * _.intersection([1, 2, 3], [101, 2, 1, 10], [2, 1]);\n   * // => [1, 2]\n   */\n  function intersection(array) {\n    var args = arguments,\n        argsLength = args.length,\n        cache = { '0': {} },\n        index = -1,\n        length = array ? array.length : 0,\n        isLarge = length >= 100,\n        result = [],\n        seen = result;\n\n    outer:\n    while (++index < length) {\n      var value = array[index];\n      if (isLarge) {\n        var key = value + '';\n        var inited = hasOwnProperty.call(cache[0], key)\n          ? !(seen = cache[0][key])\n          : (seen = cache[0][key] = []);\n      }\n      if (inited || indexOf(seen, value) < 0) {\n        if (isLarge) {\n          seen.push(value);\n        }\n        var argsIndex = argsLength;\n        while (--argsIndex) {\n          if (!(cache[argsIndex] || (cache[argsIndex] = cachedContains(args[argsIndex], 0, 100)))(value)) {\n            continue outer;\n          }\n        }\n        result.push(value);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Gets the last element of the `array`. If a number `n` is passed, the last\n   * `n` elements of the `array` are returned. If a `callback` function is passed,\n   * the last elements the `callback` returns truthy for are returned. The `callback`\n   * is bound to `thisArg` and invoked with three arguments; (value, index, array).\n   *\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to query.\n   * @param {Function|Object|Number|String} [callback|n] The function called\n   *  per element or the number of elements to return. If a property name or\n   *  object is passed, it will be used to create a \"_.pluck\" or \"_.where\"\n   *  style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Mixed} Returns the last element(s) of `array`.\n   * @example\n   *\n   * _.last([1, 2, 3]);\n   * // => 3\n   *\n   * _.last([1, 2, 3], 2);\n   * // => [2, 3]\n   *\n   * _.last([1, 2, 3], function(num) {\n   *   return num > 1;\n   * });\n   * // => [2, 3]\n   *\n   * var food = [\n   *   { 'name': 'beet',   'organic': false },\n   *   { 'name': 'carrot', 'organic': true }\n   * ];\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.last(food, 'organic');\n   * // => [{ 'name': 'carrot', 'organic': true }]\n   *\n   * var food = [\n   *   { 'name': 'banana', 'type': 'fruit' },\n   *   { 'name': 'beet',   'type': 'vegetable' },\n   *   { 'name': 'carrot', 'type': 'vegetable' }\n   * ];\n   *\n   * // using \"_.where\" callback shorthand\n   * _.last(food, { 'type': 'vegetable' });\n   * // => [{ 'name': 'beet', 'type': 'vegetable' }, { 'name': 'carrot', 'type': 'vegetable' }]\n   */\n  function last(array, callback, thisArg) {\n    if (array) {\n      var n = 0,\n          length = array.length;\n\n      if (typeof callback != 'number' && callback != null) {\n        var index = length;\n        callback = createCallback(callback, thisArg);\n        while (index-- && callback(array[index], index, array)) {\n          n++;\n        }\n      } else {\n        n = callback;\n        if (n == null || thisArg) {\n          return array[length - 1];\n        }\n      }\n      return slice(array, nativeMax(0, length - n));\n    }\n  }\n\n  /**\n   * Gets the index at which the last occurrence of `value` is found using strict\n   * equality for comparisons, i.e. `===`. If `fromIndex` is negative, it is used\n   * as the offset from the end of the collection.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to search.\n   * @param {Mixed} value The value to search for.\n   * @param {Number} [fromIndex=array.length-1] The index to search from.\n   * @returns {Number} Returns the index of the matched value or `-1`.\n   * @example\n   *\n   * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2);\n   * // => 4\n   *\n   * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2, 3);\n   * // => 1\n   */\n  function lastIndexOf(array, value, fromIndex) {\n    var index = array ? array.length : 0;\n    if (typeof fromIndex == 'number') {\n      index = (fromIndex < 0 ? nativeMax(0, index + fromIndex) : nativeMin(fromIndex, index - 1)) + 1;\n    }\n    while (index--) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Creates an object composed from arrays of `keys` and `values`. Pass either\n   * a single two dimensional array, i.e. `[[key1, value1], [key2, value2]]`, or\n   * two arrays, one of `keys` and one of corresponding `values`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} keys The array of keys.\n   * @param {Array} [values=[]] The array of values.\n   * @returns {Object} Returns an object composed of the given keys and\n   *  corresponding values.\n   * @example\n   *\n   * _.object(['moe', 'larry'], [30, 40]);\n   * // => { 'moe': 30, 'larry': 40 }\n   */\n  function object(keys, values) {\n    var index = -1,\n        length = keys ? keys.length : 0,\n        result = {};\n\n    while (++index < length) {\n      var key = keys[index];\n      if (values) {\n        result[key] = values[index];\n      } else {\n        result[key[0]] = key[1];\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Creates an array of numbers (positive and/or negative) progressing from\n   * `start` up to but not including `end`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Number} [start=0] The start of the range.\n   * @param {Number} end The end of the range.\n   * @param {Number} [step=1] The value to increment or descrement by.\n   * @returns {Array} Returns a new range array.\n   * @example\n   *\n   * _.range(10);\n   * // => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n   *\n   * _.range(1, 11);\n   * // => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n   *\n   * _.range(0, 30, 5);\n   * // => [0, 5, 10, 15, 20, 25]\n   *\n   * _.range(0, -10, -1);\n   * // => [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]\n   *\n   * _.range(0);\n   * // => []\n   */\n  function range(start, end, step) {\n    start = +start || 0;\n    step = +step || 1;\n\n    if (end == null) {\n      end = start;\n      start = 0;\n    }\n    // use `Array(length)` so V8 will avoid the slower \"dictionary\" mode\n    // http://youtu.be/XAqIpGU8ZZk#t=17m25s\n    var index = -1,\n        length = nativeMax(0, ceil((end - start) / step)),\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = start;\n      start += step;\n    }\n    return result;\n  }\n\n  /**\n   * The opposite of `_.initial`, this method gets all but the first value of `array`.\n   * If a number `n` is passed, the first `n` values are excluded from the result.\n   * If a `callback` function is passed, the first elements the `callback` returns\n   * truthy for are excluded from the result. The `callback` is bound to `thisArg`\n   * and invoked with three arguments; (value, index, array).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @alias drop, tail\n   * @category Arrays\n   * @param {Array} array The array to query.\n   * @param {Function|Object|Number|String} [callback|n=1] The function called\n   *  per element or the number of elements to exclude. If a property name or\n   *  object is passed, it will be used to create a \"_.pluck\" or \"_.where\"\n   *  style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array} Returns a slice of `array`.\n   * @example\n   *\n   * _.rest([1, 2, 3]);\n   * // => [2, 3]\n   *\n   * _.rest([1, 2, 3], 2);\n   * // => [3]\n   *\n   * _.rest([1, 2, 3], function(num) {\n   *   return num < 3;\n   * });\n   * // => [3]\n   *\n   * var food = [\n   *   { 'name': 'banana', 'organic': true },\n   *   { 'name': 'beet',   'organic': false },\n   * ];\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.rest(food, 'organic');\n   * // => [{ 'name': 'beet', 'organic': false }]\n   *\n   * var food = [\n   *   { 'name': 'apple',  'type': 'fruit' },\n   *   { 'name': 'banana', 'type': 'fruit' },\n   *   { 'name': 'beet',   'type': 'vegetable' }\n   * ];\n   *\n   * // using \"_.where\" callback shorthand\n   * _.rest(food, { 'type': 'fruit' });\n   * // => [{ 'name': 'beet', 'type': 'vegetable' }]\n   */\n  function rest(array, callback, thisArg) {\n    if (typeof callback != 'number' && callback != null) {\n      var n = 0,\n          index = -1,\n          length = array ? array.length : 0;\n\n      callback = createCallback(callback, thisArg);\n      while (++index < length && callback(array[index], index, array)) {\n        n++;\n      }\n    } else {\n      n = (callback == null || thisArg) ? 1 : nativeMax(0, callback);\n    }\n    return slice(array, n);\n  }\n\n  /**\n   * Uses a binary search to determine the smallest index at which the `value`\n   * should be inserted into `array` in order to maintain the sort order of the\n   * sorted `array`. If `callback` is passed, it will be executed for `value` and\n   * each element in `array` to compute their sort ranking. The `callback` is\n   * bound to `thisArg` and invoked with one argument; (value).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to iterate over.\n   * @param {Mixed} value The value to evaluate.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Number} Returns the index at which the value should be inserted\n   *  into `array`.\n   * @example\n   *\n   * _.sortedIndex([20, 30, 50], 40);\n   * // => 2\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.sortedIndex([{ 'x': 20 }, { 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');\n   * // => 2\n   *\n   * var dict = {\n   *   'wordToNumber': { 'twenty': 20, 'thirty': 30, 'fourty': 40, 'fifty': 50 }\n   * };\n   *\n   * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {\n   *   return dict.wordToNumber[word];\n   * });\n   * // => 2\n   *\n   * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {\n   *   return this.wordToNumber[word];\n   * }, dict);\n   * // => 2\n   */\n  function sortedIndex(array, value, callback, thisArg) {\n    var low = 0,\n        high = array ? array.length : low;\n\n    // explicitly reference `identity` for better inlining in Firefox\n    callback = callback ? createCallback(callback, thisArg, 1) : identity;\n    value = callback(value);\n\n    while (low < high) {\n      var mid = (low + high) >>> 1;\n      callback(array[mid]) < value\n        ? low = mid + 1\n        : high = mid;\n    }\n    return low;\n  }\n\n  /**\n   * Computes the union of the passed-in arrays using strict equality for\n   * comparisons, i.e. `===`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} [array1, array2, ...] Arrays to process.\n   * @returns {Array} Returns a new array of unique values, in order, that are\n   *  present in one or more of the arrays.\n   * @example\n   *\n   * _.union([1, 2, 3], [101, 2, 1, 10], [2, 1]);\n   * // => [1, 2, 3, 101, 10]\n   */\n  function union() {\n    return uniq(concat.apply(arrayRef, arguments));\n  }\n\n  /**\n   * Creates a duplicate-value-free version of the `array` using strict equality\n   * for comparisons, i.e. `===`. If the `array` is already sorted, passing `true`\n   * for `isSorted` will run a faster algorithm. If `callback` is passed, each\n   * element of `array` is passed through a callback` before uniqueness is computed.\n   * The `callback` is bound to `thisArg` and invoked with three arguments; (value, index, array).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @alias unique\n   * @category Arrays\n   * @param {Array} array The array to process.\n   * @param {Boolean} [isSorted=false] A flag to indicate that the `array` is already sorted.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array} Returns a duplicate-value-free array.\n   * @example\n   *\n   * _.uniq([1, 2, 1, 3, 1]);\n   * // => [1, 2, 3]\n   *\n   * _.uniq([1, 1, 2, 2, 3], true);\n   * // => [1, 2, 3]\n   *\n   * _.uniq([1, 2, 1.5, 3, 2.5], function(num) { return Math.floor(num); });\n   * // => [1, 2, 3]\n   *\n   * _.uniq([1, 2, 1.5, 3, 2.5], function(num) { return this.floor(num); }, Math);\n   * // => [1, 2, 3]\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n   * // => [{ 'x': 1 }, { 'x': 2 }]\n   */\n  function uniq(array, isSorted, callback, thisArg) {\n    var index = -1,\n        length = array ? array.length : 0,\n        result = [],\n        seen = result;\n\n    // juggle arguments\n    if (typeof isSorted == 'function') {\n      thisArg = callback;\n      callback = isSorted;\n      isSorted = false;\n    }\n    // init value cache for large arrays\n    var isLarge = !isSorted && length >= 75;\n    if (isLarge) {\n      var cache = {};\n    }\n    if (callback) {\n      seen = [];\n      callback = createCallback(callback, thisArg);\n    }\n    while (++index < length) {\n      var value = array[index],\n          computed = callback ? callback(value, index, array) : value;\n\n      if (isLarge) {\n        var key = computed + '';\n        var inited = hasOwnProperty.call(cache, key)\n          ? !(seen = cache[key])\n          : (seen = cache[key] = []);\n      }\n      if (isSorted\n            ? !index || seen[seen.length - 1] !== computed\n            : inited || indexOf(seen, computed) < 0\n          ) {\n        if (callback || isLarge) {\n          seen.push(computed);\n        }\n        result.push(value);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Creates an array with all occurrences of the passed values removed using\n   * strict equality for comparisons, i.e. `===`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to filter.\n   * @param {Mixed} [value1, value2, ...] Values to remove.\n   * @returns {Array} Returns a new filtered array.\n   * @example\n   *\n   * _.without([1, 2, 1, 0, 3, 1, 4], 0, 1);\n   * // => [2, 3, 4]\n   */\n  function without(array) {\n    var index = -1,\n        length = array ? array.length : 0,\n        contains = cachedContains(arguments, 1),\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (!contains(value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Groups the elements of each array at their corresponding indexes. Useful for\n   * separate data sources that are coordinated through matching array indexes.\n   * For a matrix of nested arrays, `_.zip.apply(...)` can transpose the matrix\n   * in a similar fashion.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} [array1, array2, ...] Arrays to process.\n   * @returns {Array} Returns a new array of grouped elements.\n   * @example\n   *\n   * _.zip(['moe', 'larry'], [30, 40], [true, false]);\n   * // => [['moe', 30, true], ['larry', 40, false]]\n   */\n  function zip(array) {\n    var index = -1,\n        length = array ? max(pluck(arguments, 'length')) : 0,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = pluck(arguments, index);\n    }\n    return result;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Creates a function that is restricted to executing `func` only after it is\n   * called `n` times. The `func` is executed with the `this` binding of the\n   * created function.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Number} n The number of times the function must be called before\n   * it is executed.\n   * @param {Function} func The function to restrict.\n   * @returns {Function} Returns the new restricted function.\n   * @example\n   *\n   * var renderNotes = _.after(notes.length, render);\n   * _.forEach(notes, function(note) {\n   *   note.asyncSave({ 'success': renderNotes });\n   * });\n   * // `renderNotes` is run once, after all notes have saved\n   */\n  function after(n, func) {\n    if (n < 1) {\n      return func();\n    }\n    return function() {\n      if (--n < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  }\n\n  /**\n   * Creates a function that, when called, invokes `func` with the `this`\n   * binding of `thisArg` and prepends any additional `bind` arguments to those\n   * passed to the bound function.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to bind.\n   * @param {Mixed} [thisArg] The `this` binding of `func`.\n   * @param {Mixed} [arg1, arg2, ...] Arguments to be partially applied.\n   * @returns {Function} Returns the new bound function.\n   * @example\n   *\n   * var func = function(greeting) {\n   *   return greeting + ' ' + this.name;\n   * };\n   *\n   * func = _.bind(func, { 'name': 'moe' }, 'hi');\n   * func();\n   * // => 'hi moe'\n   */\n  function bind(func, thisArg) {\n    // use `Function#bind` if it exists and is fast\n    // (in V8 `Function#bind` is slower except when partially applied)\n    return isBindFast || (nativeBind && arguments.length > 2)\n      ? nativeBind.call.apply(nativeBind, arguments)\n      : createBound(func, thisArg, slice(arguments, 2));\n  }\n\n  /**\n   * Binds methods on `object` to `object`, overwriting the existing method.\n   * Method names may be specified as individual arguments or as arrays of method\n   * names. If no method names are provided, all the function properties of `object`\n   * will be bound.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Object} object The object to bind and assign the bound methods to.\n   * @param {String} [methodName1, methodName2, ...] Method names on the object to bind.\n   * @returns {Object} Returns `object`.\n   * @example\n   *\n   * var view = {\n   *  'label': 'docs',\n   *  'onClick': function() { alert('clicked ' + this.label); }\n   * };\n   *\n   * _.bindAll(view);\n   * jQuery('#docs').on('click', view.onClick);\n   * // => alerts 'clicked docs', when the button is clicked\n   */\n  function bindAll(object) {\n    var funcs = concat.apply(arrayRef, arguments),\n        index = funcs.length > 1 ? 0 : (funcs = functions(object), -1),\n        length = funcs.length;\n\n    while (++index < length) {\n      var key = funcs[index];\n      object[key] = bind(object[key], object);\n    }\n    return object;\n  }\n\n  /**\n   * Creates a function that, when called, invokes the method at `object[key]`\n   * and prepends any additional `bindKey` arguments to those passed to the bound\n   * function. This method differs from `_.bind` by allowing bound functions to\n   * reference methods that will be redefined or don't yet exist.\n   * See http://michaux.ca/articles/lazy-function-definition-pattern.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Object} object The object the method belongs to.\n   * @param {String} key The key of the method.\n   * @param {Mixed} [arg1, arg2, ...] Arguments to be partially applied.\n   * @returns {Function} Returns the new bound function.\n   * @example\n   *\n   * var object = {\n   *   'name': 'moe',\n   *   'greet': function(greeting) {\n   *     return greeting + ' ' + this.name;\n   *   }\n   * };\n   *\n   * var func = _.bindKey(object, 'greet', 'hi');\n   * func();\n   * // => 'hi moe'\n   *\n   * object.greet = function(greeting) {\n   *   return greeting + ', ' + this.name + '!';\n   * };\n   *\n   * func();\n   * // => 'hi, moe!'\n   */\n  function bindKey(object, key) {\n    return createBound(object, key, slice(arguments, 2));\n  }\n\n  /**\n   * Creates a function that is the composition of the passed functions,\n   * where each function consumes the return value of the function that follows.\n   * For example, composing the functions `f()`, `g()`, and `h()` produces `f(g(h()))`.\n   * Each function is executed with the `this` binding of the composed function.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} [func1, func2, ...] Functions to compose.\n   * @returns {Function} Returns the new composed function.\n   * @example\n   *\n   * var greet = function(name) { return 'hi ' + name; };\n   * var exclaim = function(statement) { return statement + '!'; };\n   * var welcome = _.compose(exclaim, greet);\n   * welcome('moe');\n   * // => 'hi moe!'\n   */\n  function compose() {\n    var funcs = arguments;\n    return function() {\n      var args = arguments,\n          length = funcs.length;\n\n      while (length--) {\n        args = [funcs[length].apply(this, args)];\n      }\n      return args[0];\n    };\n  }\n\n  /**\n   * Creates a function that will delay the execution of `func` until after\n   * `wait` milliseconds have elapsed since the last time it was invoked. Pass\n   * `true` for `immediate` to cause debounce to invoke `func` on the leading,\n   * instead of the trailing, edge of the `wait` timeout. Subsequent calls to\n   * the debounced function will return the result of the last `func` call.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to debounce.\n   * @param {Number} wait The number of milliseconds to delay.\n   * @param {Boolean} immediate A flag to indicate execution is on the leading\n   *  edge of the timeout.\n   * @returns {Function} Returns the new debounced function.\n   * @example\n   *\n   * var lazyLayout = _.debounce(calculateLayout, 300);\n   * jQuery(window).on('resize', lazyLayout);\n   */\n  function debounce(func, wait, immediate) {\n    var args,\n        result,\n        thisArg,\n        timeoutId;\n\n    function delayed() {\n      timeoutId = null;\n      if (!immediate) {\n        result = func.apply(thisArg, args);\n      }\n    }\n    return function() {\n      var isImmediate = immediate && !timeoutId;\n      args = arguments;\n      thisArg = this;\n\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(delayed, wait);\n\n      if (isImmediate) {\n        result = func.apply(thisArg, args);\n      }\n      return result;\n    };\n  }\n\n  /**\n   * Executes the `func` function after `wait` milliseconds. Additional arguments\n   * will be passed to `func` when it is invoked.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to delay.\n   * @param {Number} wait The number of milliseconds to delay execution.\n   * @param {Mixed} [arg1, arg2, ...] Arguments to invoke the function with.\n   * @returns {Number} Returns the `setTimeout` timeout id.\n   * @example\n   *\n   * var log = _.bind(console.log, console);\n   * _.delay(log, 1000, 'logged later');\n   * // => 'logged later' (Appears after one second.)\n   */\n  function delay(func, wait) {\n    var args = slice(arguments, 2);\n    return setTimeout(function() { func.apply(undefined, args); }, wait);\n  }\n\n  /**\n   * Defers executing the `func` function until the current call stack has cleared.\n   * Additional arguments will be passed to `func` when it is invoked.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to defer.\n   * @param {Mixed} [arg1, arg2, ...] Arguments to invoke the function with.\n   * @returns {Number} Returns the `setTimeout` timeout id.\n   * @example\n   *\n   * _.defer(function() { alert('deferred'); });\n   * // returns from the function before `alert` is called\n   */\n  function defer(func) {\n    var args = slice(arguments, 1);\n    return setTimeout(function() { func.apply(undefined, args); }, 1);\n  }\n  // use `setImmediate` if it's available in Node.js\n  if (isV8 && freeModule && typeof setImmediate == 'function') {\n    defer = bind(setImmediate, window);\n  }\n\n  /**\n   * Creates a function that memoizes the result of `func`. If `resolver` is\n   * passed, it will be used to determine the cache key for storing the result\n   * based on the arguments passed to the memoized function. By default, the first\n   * argument passed to the memoized function is used as the cache key. The `func`\n   * is executed with the `this` binding of the memoized function.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to have its output memoized.\n   * @param {Function} [resolver] A function used to resolve the cache key.\n   * @returns {Function} Returns the new memoizing function.\n   * @example\n   *\n   * var fibonacci = _.memoize(function(n) {\n   *   return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);\n   * });\n   */\n  function memoize(func, resolver) {\n    var cache = {};\n    return function() {\n      var key = (resolver ? resolver.apply(this, arguments) : arguments[0]) + '';\n      return hasOwnProperty.call(cache, key)\n        ? cache[key]\n        : (cache[key] = func.apply(this, arguments));\n    };\n  }\n\n  /**\n   * Creates a function that is restricted to execute `func` once. Repeat calls to\n   * the function will return the value of the first call. The `func` is executed\n   * with the `this` binding of the created function.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to restrict.\n   * @returns {Function} Returns the new restricted function.\n   * @example\n   *\n   * var initialize = _.once(createApplication);\n   * initialize();\n   * initialize();\n   * // `initialize` executes `createApplication` once\n   */\n  function once(func) {\n    var ran,\n        result;\n\n    return function() {\n      if (ran) {\n        return result;\n      }\n      ran = true;\n      result = func.apply(this, arguments);\n\n      // clear the `func` variable so the function may be garbage collected\n      func = null;\n      return result;\n    };\n  }\n\n  /**\n   * Creates a function that, when called, invokes `func` with any additional\n   * `partial` arguments prepended to those passed to the new function. This\n   * method is similar to `_.bind`, except it does **not** alter the `this` binding.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to partially apply arguments to.\n   * @param {Mixed} [arg1, arg2, ...] Arguments to be partially applied.\n   * @returns {Function} Returns the new partially applied function.\n   * @example\n   *\n   * var greet = function(greeting, name) { return greeting + ' ' + name; };\n   * var hi = _.partial(greet, 'hi');\n   * hi('moe');\n   * // => 'hi moe'\n   */\n  function partial(func) {\n    return createBound(func, slice(arguments, 1));\n  }\n\n  /**\n   * This method is similar to `_.partial`, except that `partial` arguments are\n   * appended to those passed to the new function.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to partially apply arguments to.\n   * @param {Mixed} [arg1, arg2, ...] Arguments to be partially applied.\n   * @returns {Function} Returns the new partially applied function.\n   * @example\n   *\n   * var defaultsDeep = _.partialRight(_.merge, _.defaults);\n   *\n   * var options = {\n   *   'variable': 'data',\n   *   'imports': { 'jq': $ }\n   * };\n   *\n   * defaultsDeep(options, _.templateSettings);\n   *\n   * options.variable\n   * // => 'data'\n   *\n   * options.imports\n   * // => { '_': _, 'jq': $ }\n   */\n  function partialRight(func) {\n    return createBound(func, slice(arguments, 1), null, indicatorObject);\n  }\n\n  /**\n   * Creates a function that, when executed, will only call the `func`\n   * function at most once per every `wait` milliseconds. If the throttled\n   * function is invoked more than once during the `wait` timeout, `func` will\n   * also be called on the trailing edge of the timeout. Subsequent calls to the\n   * throttled function will return the result of the last `func` call.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to throttle.\n   * @param {Number} wait The number of milliseconds to throttle executions to.\n   * @returns {Function} Returns the new throttled function.\n   * @example\n   *\n   * var throttled = _.throttle(updatePosition, 100);\n   * jQuery(window).on('scroll', throttled);\n   */\n  function throttle(func, wait) {\n    var args,\n        result,\n        thisArg,\n        timeoutId,\n        lastCalled = 0;\n\n    function trailingCall() {\n      lastCalled = new Date;\n      timeoutId = null;\n      result = func.apply(thisArg, args);\n    }\n    return function() {\n      var now = new Date,\n          remaining = wait - (now - lastCalled);\n\n      args = arguments;\n      thisArg = this;\n\n      if (remaining <= 0) {\n        clearTimeout(timeoutId);\n        timeoutId = null;\n        lastCalled = now;\n        result = func.apply(thisArg, args);\n      }\n      else if (!timeoutId) {\n        timeoutId = setTimeout(trailingCall, remaining);\n      }\n      return result;\n    };\n  }\n\n  /**\n   * Creates a function that passes `value` to the `wrapper` function as its\n   * first argument. Additional arguments passed to the function are appended\n   * to those passed to the `wrapper` function. The `wrapper` is executed with\n   * the `this` binding of the created function.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Mixed} value The value to wrap.\n   * @param {Function} wrapper The wrapper function.\n   * @returns {Function} Returns the new function.\n   * @example\n   *\n   * var hello = function(name) { return 'hello ' + name; };\n   * hello = _.wrap(hello, function(func) {\n   *   return 'before, ' + func('moe') + ', after';\n   * });\n   * hello();\n   * // => 'before, hello moe, after'\n   */\n  function wrap(value, wrapper) {\n    return function() {\n      var args = [value];\n      push.apply(args, arguments);\n      return wrapper.apply(this, args);\n    };\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Converts the characters `&`, `<`, `>`, `\"`, and `'` in `string` to their\n   * corresponding HTML entities.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {String} string The string to escape.\n   * @returns {String} Returns the escaped string.\n   * @example\n   *\n   * _.escape('Moe, Larry & Curly');\n   * // => 'Moe, Larry &amp; Curly'\n   */\n  function escape(string) {\n    return string == null ? '' : (string + '').replace(reUnescapedHtml, escapeHtmlChar);\n  }\n\n  /**\n   * This function returns the first argument passed to it.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {Mixed} value Any value.\n   * @returns {Mixed} Returns `value`.\n   * @example\n   *\n   * var moe = { 'name': 'moe' };\n   * moe === _.identity(moe);\n   * // => true\n   */\n  function identity(value) {\n    return value;\n  }\n\n  /**\n   * Adds functions properties of `object` to the `lodash` function and chainable\n   * wrapper.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {Object} object The object of function properties to add to `lodash`.\n   * @example\n   *\n   * _.mixin({\n   *   'capitalize': function(string) {\n   *     return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n   *   }\n   * });\n   *\n   * _.capitalize('moe');\n   * // => 'Moe'\n   *\n   * _('moe').capitalize();\n   * // => 'Moe'\n   */\n  function mixin(object) {\n    forEach(functions(object), function(methodName) {\n      var func = lodash[methodName] = object[methodName];\n\n      lodash.prototype[methodName] = function() {\n        var args = [this.__wrapped__];\n        push.apply(args, arguments);\n        return new lodash(func.apply(lodash, args));\n      };\n    });\n  }\n\n  /**\n   * Reverts the '_' variable to its previous value and returns a reference to\n   * the `lodash` function.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @returns {Function} Returns the `lodash` function.\n   * @example\n   *\n   * var lodash = _.noConflict();\n   */\n  function noConflict() {\n    window._ = oldDash;\n    return this;\n  }\n\n  /**\n   * Produces a random number between `min` and `max` (inclusive). If only one\n   * argument is passed, a number between `0` and the given number will be returned.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {Number} [min=0] The minimum possible value.\n   * @param {Number} [max=1] The maximum possible value.\n   * @returns {Number} Returns a random number.\n   * @example\n   *\n   * _.random(0, 5);\n   * // => a number between 0 and 5\n   *\n   * _.random(5);\n   * // => also a number between 0 and 5\n   */\n  function random(min, max) {\n    if (min == null && max == null) {\n      max = 1;\n    }\n    min = +min || 0;\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + floor(nativeRandom() * ((+max || 0) - min + 1));\n  }\n\n  /**\n   * Resolves the value of `property` on `object`. If `property` is a function,\n   * it will be invoked and its result returned, else the property value is\n   * returned. If `object` is falsey, then `null` is returned.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {Object} object The object to inspect.\n   * @param {String} property The property to get the value of.\n   * @returns {Mixed} Returns the resolved value.\n   * @example\n   *\n   * var object = {\n   *   'cheese': 'crumpets',\n   *   'stuff': function() {\n   *     return 'nonsense';\n   *   }\n   * };\n   *\n   * _.result(object, 'cheese');\n   * // => 'crumpets'\n   *\n   * _.result(object, 'stuff');\n   * // => 'nonsense'\n   */\n  function result(object, property) {\n    var value = object ? object[property] : undefined;\n    return isFunction(value) ? object[property]() : value;\n  }\n\n  /**\n   * A micro-templating method that handles arbitrary delimiters, preserves\n   * whitespace, and correctly escapes quotes within interpolated code.\n   *\n   * Note: In the development build, `_.template` utilizes sourceURLs for easier\n   * debugging. See http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl\n   *\n   * Note: Lo-Dash may be used in Chrome extensions by either creating a `lodash csp`\n   * build and using precompiled templates, or loading Lo-Dash in a sandbox.\n   *\n   * For more information on precompiling templates see:\n   * http://lodash.com/#custom-builds\n   *\n   * For more information on Chrome extension sandboxes see:\n   * http://developer.chrome.com/stable/extensions/sandboxingEval.html\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {String} text The template text.\n   * @param {Obect} data The data object used to populate the text.\n   * @param {Object} options The options object.\n   *  escape - The \"escape\" delimiter regexp.\n   *  evaluate - The \"evaluate\" delimiter regexp.\n   *  interpolate - The \"interpolate\" delimiter regexp.\n   *  sourceURL - The sourceURL of the template's compiled source.\n   *  variable - The data object variable name.\n   *\n   * @returns {Function|String} Returns a compiled function when no `data` object\n   *  is given, else it returns the interpolated text.\n   * @example\n   *\n   * // using a compiled template\n   * var compiled = _.template('hello <%= name %>');\n   * compiled({ 'name': 'moe' });\n   * // => 'hello moe'\n   *\n   * var list = '<% _.forEach(people, function(name) { %><li><%= name %></li><% }); %>';\n   * _.template(list, { 'people': ['moe', 'larry'] });\n   * // => '<li>moe</li><li>larry</li>'\n   *\n   * // using the \"escape\" delimiter to escape HTML in data property values\n   * _.template('<b><%- value %></b>', { 'value': '<script>' });\n   * // => '<b>&lt;script&gt;</b>'\n   *\n   * // using the ES6 delimiter as an alternative to the default \"interpolate\" delimiter\n   * _.template('hello ${ name }', { 'name': 'curly' });\n   * // => 'hello curly'\n   *\n   * // using the internal `print` function in \"evaluate\" delimiters\n   * _.template('<% print(\"hello \" + epithet); %>!', { 'epithet': 'stooge' });\n   * // => 'hello stooge!'\n   *\n   * // using custom template delimiters\n   * _.templateSettings = {\n   *   'interpolate': /{{([\\s\\S]+?)}}/g\n   * };\n   *\n   * _.template('hello {{ name }}!', { 'name': 'mustache' });\n   * // => 'hello mustache!'\n   *\n   * // using the `sourceURL` option to specify a custom sourceURL for the template\n   * var compiled = _.template('hello <%= name %>', null, { 'sourceURL': '/basic/greeting.jst' });\n   * compiled(data);\n   * // => find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector\n   *\n   * // using the `variable` option to ensure a with-statement isn't used in the compiled template\n   * var compiled = _.template('hi <%= data.name %>!', null, { 'variable': 'data' });\n   * compiled.source;\n   * // => function(data) {\n   *   var __t, __p = '', __e = _.escape;\n   *   __p += 'hi ' + ((__t = ( data.name )) == null ? '' : __t) + '!';\n   *   return __p;\n   * }\n   *\n   * // using the `source` property to inline compiled templates for meaningful\n   * // line numbers in error messages and a stack trace\n   * fs.writeFileSync(path.join(cwd, 'jst.js'), '\\\n   *   var JST = {\\\n   *     \"main\": ' + _.template(mainText).source + '\\\n   *   };\\\n   * ');\n   */\n  function template(text, data, options) {\n    // based on John Resig's `tmpl` implementation\n    // http://ejohn.org/blog/javascript-micro-templating/\n    // and Laura Doktorova's doT.js\n    // https://github.com/olado/doT\n    var settings = lodash.templateSettings;\n    text || (text = '');\n\n    // avoid missing dependencies when `iteratorTemplate` is not defined\n    options = defaults({}, options, settings);\n\n    var imports = defaults({}, options.imports, settings.imports),\n        importsKeys = keys(imports),\n        importsValues = values(imports);\n\n    var isEvaluating,\n        index = 0,\n        interpolate = options.interpolate || reNoMatch,\n        source = \"__p += '\";\n\n    // compile regexp to match each delimiter\n    var reDelimiters = RegExp(\n      (options.escape || reNoMatch).source + '|' +\n      interpolate.source + '|' +\n      (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n      (options.evaluate || reNoMatch).source + '|$'\n    , 'g');\n\n    text.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n      interpolateValue || (interpolateValue = esTemplateValue);\n\n      // escape characters that cannot be included in string literals\n      source += text.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n      // replace delimiters with snippets\n      if (escapeValue) {\n        source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n      }\n      if (evaluateValue) {\n        isEvaluating = true;\n        source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n      }\n      if (interpolateValue) {\n        source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n      }\n      index = offset + match.length;\n\n      // the JS engine embedded in Adobe products requires returning the `match`\n      // string in order to produce the correct `offset` value\n      return match;\n    });\n\n    source += \"';\\n\";\n\n    // if `variable` is not specified and the template contains \"evaluate\"\n    // delimiters, wrap a with-statement around the generated code to add the\n    // data object to the top of the scope chain\n    var variable = options.variable,\n        hasVariable = variable;\n\n    if (!hasVariable) {\n      variable = 'obj';\n      source = 'with (' + variable + ') {\\n' + source + '\\n}\\n';\n    }\n    // cleanup code by stripping empty strings\n    source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n      .replace(reEmptyStringMiddle, '$1')\n      .replace(reEmptyStringTrailing, '$1;');\n\n    // frame code as the function body\n    source = 'function(' + variable + ') {\\n' +\n      (hasVariable ? '' : variable + ' || (' + variable + ' = {});\\n') +\n      \"var __t, __p = '', __e = _.escape\" +\n      (isEvaluating\n        ? ', __j = Array.prototype.join;\\n' +\n          \"function print() { __p += __j.call(arguments, '') }\\n\"\n        : ';\\n'\n      ) +\n      source +\n      'return __p\\n}';\n\n    // Use a sourceURL for easier debugging and wrap in a multi-line comment to\n    // avoid issues with Narwhal, IE conditional compilation, and the JS engine\n    // embedded in Adobe products.\n    // http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl\n    var sourceURL = '\\n/*\\n//@ sourceURL=' + (options.sourceURL || '/lodash/template/source[' + (templateCounter++) + ']') + '\\n*/';\n\n    try {\n      var result = Function(importsKeys, 'return ' + source + sourceURL).apply(undefined, importsValues);\n    } catch(e) {\n      e.source = source;\n      throw e;\n    }\n    if (data) {\n      return result(data);\n    }\n    // provide the compiled function's source via its `toString` method, in\n    // supported environments, or the `source` property as a convenience for\n    // inlining compiled templates during the build process\n    result.source = source;\n    return result;\n  }\n\n  /**\n   * Executes the `callback` function `n` times, returning an array of the results\n   * of each `callback` execution. The `callback` is bound to `thisArg` and invoked\n   * with one argument; (index).\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {Number} n The number of times to execute the callback.\n   * @param {Function} callback The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array} Returns a new array of the results of each `callback` execution.\n   * @example\n   *\n   * var diceRolls = _.times(3, _.partial(_.random, 1, 6));\n   * // => [3, 6, 4]\n   *\n   * _.times(3, function(n) { mage.castSpell(n); });\n   * // => calls `mage.castSpell(n)` three times, passing `n` of `0`, `1`, and `2` respectively\n   *\n   * _.times(3, function(n) { this.cast(n); }, mage);\n   * // => also calls `mage.castSpell(n)` three times\n   */\n  function times(n, callback, thisArg) {\n    n = +n || 0;\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = callback.call(thisArg, index);\n    }\n    return result;\n  }\n\n  /**\n   * The opposite of `_.escape`, this method converts the HTML entities\n   * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to their\n   * corresponding characters.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {String} string The string to unescape.\n   * @returns {String} Returns the unescaped string.\n   * @example\n   *\n   * _.unescape('Moe, Larry &amp; Curly');\n   * // => 'Moe, Larry & Curly'\n   */\n  function unescape(string) {\n    return string == null ? '' : (string + '').replace(reEscapedHtml, unescapeHtmlChar);\n  }\n\n  /**\n   * Generates a unique ID. If `prefix` is passed, the ID will be appended to it.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {String} [prefix] The value to prefix the ID with.\n   * @returns {String} Returns the unique ID.\n   * @example\n   *\n   * _.uniqueId('contact_');\n   * // => 'contact_104'\n   *\n   * _.uniqueId();\n   * // => '105'\n   */\n  function uniqueId(prefix) {\n    var id = ++idCounter;\n    return (prefix == null ? '' : prefix + '') + id;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Invokes `interceptor` with the `value` as the first argument, and then\n   * returns `value`. The purpose of this method is to \"tap into\" a method chain,\n   * in order to perform operations on intermediate results within the chain.\n   *\n   * @static\n   * @memberOf _\n   * @category Chaining\n   * @param {Mixed} value The value to pass to `interceptor`.\n   * @param {Function} interceptor The function to invoke.\n   * @returns {Mixed} Returns `value`.\n   * @example\n   *\n   * _([1, 2, 3, 4])\n   *  .filter(function(num) { return num % 2 == 0; })\n   *  .tap(alert)\n   *  .map(function(num) { return num * num; })\n   *  .value();\n   * // => // [2, 4] (alerted)\n   * // => [4, 16]\n   */\n  function tap(value, interceptor) {\n    interceptor(value);\n    return value;\n  }\n\n  /**\n   * Produces the `toString` result of the wrapped value.\n   *\n   * @name toString\n   * @memberOf _\n   * @category Chaining\n   * @returns {String} Returns the string result.\n   * @example\n   *\n   * _([1, 2, 3]).toString();\n   * // => '1,2,3'\n   */\n  function wrapperToString() {\n    return this.__wrapped__ + '';\n  }\n\n  /**\n   * Extracts the wrapped value.\n   *\n   * @name valueOf\n   * @memberOf _\n   * @alias value\n   * @category Chaining\n   * @returns {Mixed} Returns the wrapped value.\n   * @example\n   *\n   * _([1, 2, 3]).valueOf();\n   * // => [1, 2, 3]\n   */\n  function wrapperValueOf() {\n    return this.__wrapped__;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // add functions that return wrapped values when chaining\n  lodash.after = after;\n  lodash.assign = assign;\n  lodash.at = at;\n  lodash.bind = bind;\n  lodash.bindAll = bindAll;\n  lodash.bindKey = bindKey;\n  lodash.compact = compact;\n  lodash.compose = compose;\n  lodash.countBy = countBy;\n  lodash.debounce = debounce;\n  lodash.defaults = defaults;\n  lodash.defer = defer;\n  lodash.delay = delay;\n  lodash.difference = difference;\n  lodash.filter = filter;\n  lodash.flatten = flatten;\n  lodash.forEach = forEach;\n  lodash.forIn = forIn;\n  lodash.forOwn = forOwn;\n  lodash.functions = functions;\n  lodash.groupBy = groupBy;\n  lodash.initial = initial;\n  lodash.intersection = intersection;\n  lodash.invert = invert;\n  lodash.invoke = invoke;\n  lodash.keys = keys;\n  lodash.map = map;\n  lodash.max = max;\n  lodash.memoize = memoize;\n  lodash.merge = merge;\n  lodash.min = min;\n  lodash.object = object;\n  lodash.omit = omit;\n  lodash.once = once;\n  lodash.pairs = pairs;\n  lodash.partial = partial;\n  lodash.partialRight = partialRight;\n  lodash.pick = pick;\n  lodash.pluck = pluck;\n  lodash.range = range;\n  lodash.reject = reject;\n  lodash.rest = rest;\n  lodash.shuffle = shuffle;\n  lodash.sortBy = sortBy;\n  lodash.tap = tap;\n  lodash.throttle = throttle;\n  lodash.times = times;\n  lodash.toArray = toArray;\n  lodash.union = union;\n  lodash.uniq = uniq;\n  lodash.values = values;\n  lodash.where = where;\n  lodash.without = without;\n  lodash.wrap = wrap;\n  lodash.zip = zip;\n\n  // add aliases\n  lodash.collect = map;\n  lodash.drop = rest;\n  lodash.each = forEach;\n  lodash.extend = assign;\n  lodash.methods = functions;\n  lodash.select = filter;\n  lodash.tail = rest;\n  lodash.unique = uniq;\n\n  // add functions to `lodash.prototype`\n  mixin(lodash);\n\n  /*--------------------------------------------------------------------------*/\n\n  // add functions that return unwrapped values when chaining\n  lodash.clone = clone;\n  lodash.cloneDeep = cloneDeep;\n  lodash.contains = contains;\n  lodash.escape = escape;\n  lodash.every = every;\n  lodash.find = find;\n  lodash.has = has;\n  lodash.identity = identity;\n  lodash.indexOf = indexOf;\n  lodash.isArguments = isArguments;\n  lodash.isArray = isArray;\n  lodash.isBoolean = isBoolean;\n  lodash.isDate = isDate;\n  lodash.isElement = isElement;\n  lodash.isEmpty = isEmpty;\n  lodash.isEqual = isEqual;\n  lodash.isFinite = isFinite;\n  lodash.isFunction = isFunction;\n  lodash.isNaN = isNaN;\n  lodash.isNull = isNull;\n  lodash.isNumber = isNumber;\n  lodash.isObject = isObject;\n  lodash.isPlainObject = isPlainObject;\n  lodash.isRegExp = isRegExp;\n  lodash.isString = isString;\n  lodash.isUndefined = isUndefined;\n  lodash.lastIndexOf = lastIndexOf;\n  lodash.mixin = mixin;\n  lodash.noConflict = noConflict;\n  lodash.random = random;\n  lodash.reduce = reduce;\n  lodash.reduceRight = reduceRight;\n  lodash.result = result;\n  lodash.size = size;\n  lodash.some = some;\n  lodash.sortedIndex = sortedIndex;\n  lodash.template = template;\n  lodash.unescape = unescape;\n  lodash.uniqueId = uniqueId;\n\n  // add aliases\n  lodash.all = every;\n  lodash.any = some;\n  lodash.detect = find;\n  lodash.foldl = reduce;\n  lodash.foldr = reduceRight;\n  lodash.include = contains;\n  lodash.inject = reduce;\n\n  forOwn(lodash, function(func, methodName) {\n    if (!lodash.prototype[methodName]) {\n      lodash.prototype[methodName] = function() {\n        var args = [this.__wrapped__];\n        push.apply(args, arguments);\n        return func.apply(lodash, args);\n      };\n    }\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  // add functions capable of returning wrapped and unwrapped values when chaining\n  lodash.first = first;\n  lodash.last = last;\n\n  // add aliases\n  lodash.take = first;\n  lodash.head = first;\n\n  forOwn(lodash, function(func, methodName) {\n    if (!lodash.prototype[methodName]) {\n      lodash.prototype[methodName]= function(callback, thisArg) {\n        var result = func(this.__wrapped__, callback, thisArg);\n        return callback == null || (thisArg && typeof callback != 'function')\n          ? result\n          : new lodash(result);\n      };\n    }\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * The semantic version number.\n   *\n   * @static\n   * @memberOf _\n   * @type String\n   */\n  lodash.VERSION = '1.0.2';\n\n  // add \"Chaining\" functions to the wrapper\n  lodash.prototype.toString = wrapperToString;\n  lodash.prototype.value = wrapperValueOf;\n  lodash.prototype.valueOf = wrapperValueOf;\n\n  // add `Array` functions that return unwrapped values\n  each(['join', 'pop', 'shift'], function(methodName) {\n    var func = arrayRef[methodName];\n    lodash.prototype[methodName] = function() {\n      return func.apply(this.__wrapped__, arguments);\n    };\n  });\n\n  // add `Array` functions that return the wrapped value\n  each(['push', 'reverse', 'sort', 'unshift'], function(methodName) {\n    var func = arrayRef[methodName];\n    lodash.prototype[methodName] = function() {\n      func.apply(this.__wrapped__, arguments);\n      return this;\n    };\n  });\n\n  // add `Array` functions that return new wrapped values\n  each(['concat', 'slice', 'splice'], function(methodName) {\n    var func = arrayRef[methodName];\n    lodash.prototype[methodName] = function() {\n      return new lodash(func.apply(this.__wrapped__, arguments));\n    };\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  // expose Lo-Dash\n  // some AMD build optimizers, like r.js, check for specific condition patterns like the following:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Expose Lo-Dash to the global object even when an AMD loader is present in\n    // case Lo-Dash was injected by a third-party script and not intended to be\n    // loaded as a module. The global assignment can be reverted in the Lo-Dash\n    // module via its `noConflict()` method.\n    window._ = lodash;\n\n    // define as an anonymous module so, through path mapping, it can be\n    // referenced as the \"underscore\" module\n    define(function() {\n      return lodash;\n    });\n  }\n  // check for `exports` after `define` in case a build optimizer adds an `exports` object\n  else if (freeExports) {\n    // in Node.js or RingoJS v0.8.0+\n    if (freeModule) {\n      (freeModule.exports = lodash)._ = lodash;\n    }\n    // in Narwhal or RingoJS v0.7.0-\n    else {\n      freeExports._ = lodash;\n    }\n  }\n  else {\n    // in a browser or Rhino\n    window._ = lodash;\n  }\n}(this));\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}]},{},[3,1,2])\n\n","\nclass Rectangle {\n    constructor(opts = {}) {\n        this.x = opts.x;\n        this.y = opts.y;\n        this.width = opts.width;\n        this.height = opts.height;\n        this.fillStyle = opts.fillStyle;\n    }\n\n    prerender(ctx) {\n        ctx.save();\n        ctx.translate(this.x, this.y);\n    }\n\n    render(ctx) {\n        ctx.beginPath();\n        ctx.rect(0, 0, this.width, this.height);\n        ctx.closePath();\n    }\n\n    postrender(ctx) {\n        if (this.fillStyle) {\n            ctx.fillStyle = this.fillStyle;\n            ctx.fill();\n        }\n\n        ctx.restore();\n    }\n}\n\nmodule.exports = { Rectangle };\n","\nlet _ = require('lodash');\nlet { Rectangle } = require('./Shapes');\nlet { RenderLoop } = require('./RenderLoop');\n\nclass Game {\n    constructor() {\n        this.shapes = [];\n\n        this.addShape(new Rectangle({\n            x: 0, y: 0,\n            width: 500, height: 400,\n            fillStyle: '#e5e5e5'\n        }));\n\n        this.addShape(new Rectangle({\n            x: 10, y: 10,\n            width: 50, height: 50,\n            fillStyle: '#ff0055'\n        }));\n    }\n\n    getShapes() {\n        return this.shapes;\n    }\n\n    addShape(shape) {\n        this.shapes.push(shape);\n    }\n}\n\nfunction startApp() {\n    let canvas = document.getElementById('gamecanvas');\n    let game = new Game();\n    window.myGame = game;\n\n    let renderLoop = new RenderLoop({\n        canvas,\n        width: 500, height: 400,\n        fetchShapes: _.bind(game.getShapes, game)\n    });\n\n    renderLoop.start();\n    console.log('started!');\n    renderLoop.render();\n    console.log('rendered!')\n};\n\nwindow.onload = function onAppLoad(){\n    startApp();\n};\n\n","/**\n * @license\n * Lo-Dash 1.0.2 (Custom Build) <http://lodash.com/>\n * Build: `lodash modern -o ./dist/lodash.js`\n * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.4.4 <http://underscorejs.org/>\n * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud Inc.\n * Available under MIT license <http://lodash.com/license>\n */\n;(function(window, undefined) {\n\n  /** Detect free variable `exports` */\n  var freeExports = typeof exports == 'object' && exports;\n\n  /** Detect free variable `module` */\n  var freeModule = typeof module == 'object' && module && module.exports == freeExports && module;\n\n  /** Detect free variable `global` and use it as `window` */\n  var freeGlobal = typeof global == 'object' && global;\n  if (freeGlobal.global === freeGlobal) {\n    window = freeGlobal;\n  }\n\n  /** Used for array and object method references */\n  var arrayRef = [],\n      objectRef = {};\n\n  /** Used to generate unique IDs */\n  var idCounter = 0;\n\n  /** Used internally to indicate various things */\n  var indicatorObject = objectRef;\n\n  /** Used by `cachedContains` as the default size when optimizations are enabled for large arrays */\n  var largeArraySize = 30;\n\n  /** Used to restore the original `_` reference in `noConflict` */\n  var oldDash = window._;\n\n  /** Used to match HTML entities */\n  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g;\n\n  /** Used to match empty string literals in compiled template source */\n  var reEmptyStringLeading = /\\b__p \\+= '';/g,\n      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n  /** Used to match regexp flags from their coerced string values */\n  var reFlags = /\\w*$/;\n\n  /** Used to detect if a method is native */\n  var reNative = RegExp('^' +\n    (objectRef.valueOf + '')\n      .replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n      .replace(/valueOf|for [^\\]]+/g, '.+?') + '$'\n  );\n\n  /**\n   * Used to match ES6 template delimiters\n   * http://people.mozilla.org/~jorendorff/es6-draft.html#sec-7.8.6\n   */\n  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n\n  /** Used to match \"interpolate\" template delimiters */\n  var reInterpolate = /<%=([\\s\\S]+?)%>/g;\n\n  /** Used to ensure capturing order of template delimiters */\n  var reNoMatch = /($^)/;\n\n  /** Used to match HTML characters */\n  var reUnescapedHtml = /[&<>\"']/g;\n\n  /** Used to match unescaped characters in compiled string literals */\n  var reUnescapedString = /['\\n\\r\\t\\u2028\\u2029\\\\]/g;\n\n  /** Used to make template sourceURLs easier to identify */\n  var templateCounter = 0;\n\n  /** Native method shortcuts */\n  var ceil = Math.ceil,\n      concat = arrayRef.concat,\n      floor = Math.floor,\n      getPrototypeOf = reNative.test(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf,\n      hasOwnProperty = objectRef.hasOwnProperty,\n      push = arrayRef.push,\n      toString = objectRef.toString;\n\n  /* Native method shortcuts for methods with the same name as other `lodash` methods */\n  var nativeBind = reNative.test(nativeBind = slice.bind) && nativeBind,\n      nativeIsArray = reNative.test(nativeIsArray = Array.isArray) && nativeIsArray,\n      nativeIsFinite = window.isFinite,\n      nativeIsNaN = window.isNaN,\n      nativeKeys = reNative.test(nativeKeys = Object.keys) && nativeKeys,\n      nativeMax = Math.max,\n      nativeMin = Math.min,\n      nativeRandom = Math.random;\n\n  /** `Object#toString` result shortcuts */\n  var argsClass = '[object Arguments]',\n      arrayClass = '[object Array]',\n      boolClass = '[object Boolean]',\n      dateClass = '[object Date]',\n      funcClass = '[object Function]',\n      numberClass = '[object Number]',\n      objectClass = '[object Object]',\n      regexpClass = '[object RegExp]',\n      stringClass = '[object String]';\n\n  /** Detect various environments */\n  var isIeOpera = !!window.attachEvent,\n      isV8 = nativeBind && !/\\n|true/.test(nativeBind + isIeOpera);\n\n  /* Detect if `Function#bind` exists and is inferred to be fast (all but V8) */\n  var isBindFast = nativeBind && !isV8;\n\n  /* Detect if `Object.keys` exists and is inferred to be fast (IE, Opera, V8) */\n  var isKeysFast = nativeKeys && (isIeOpera || isV8);\n\n  /** Used to identify object classifications that `_.clone` supports */\n  var cloneableClasses = {};\n  cloneableClasses[funcClass] = false;\n  cloneableClasses[argsClass] = cloneableClasses[arrayClass] =\n  cloneableClasses[boolClass] = cloneableClasses[dateClass] =\n  cloneableClasses[numberClass] = cloneableClasses[objectClass] =\n  cloneableClasses[regexpClass] = cloneableClasses[stringClass] = true;\n\n  /** Used to lookup a built-in constructor by [[Class]] */\n  var ctorByClass = {};\n  ctorByClass[arrayClass] = Array;\n  ctorByClass[boolClass] = Boolean;\n  ctorByClass[dateClass] = Date;\n  ctorByClass[objectClass] = Object;\n  ctorByClass[numberClass] = Number;\n  ctorByClass[regexpClass] = RegExp;\n  ctorByClass[stringClass] = String;\n\n  /** Used to determine if values are of the language type Object */\n  var objectTypes = {\n    'boolean': false,\n    'function': true,\n    'object': true,\n    'number': false,\n    'string': false,\n    'undefined': false\n  };\n\n  /** Used to escape characters for inclusion in compiled string literals */\n  var stringEscapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\\n': 'n',\n    '\\r': 'r',\n    '\\t': 't',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Creates a `lodash` object, that wraps the given `value`, to enable method\n   * chaining.\n   *\n   * In addition to Lo-Dash methods, wrappers also have the following `Array` methods:\n   * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`, `splice`,\n   * and `unshift`\n   *\n   * The chainable wrapper functions are:\n   * `after`, `assign`, `bind`, `bindAll`, `bindKey`, `chain`, `compact`, `compose`,\n   * `concat`, `countBy`, `debounce`, `defaults`, `defer`, `delay`, `difference`,\n   * `filter`, `flatten`, `forEach`, `forIn`, `forOwn`, `functions`, `groupBy`,\n   * `initial`, `intersection`, `invert`, `invoke`, `keys`, `map`, `max`, `memoize`,\n   * `merge`, `min`, `object`, `omit`, `once`, `pairs`, `partial`, `partialRight`,\n   * `pick`, `pluck`, `push`, `range`, `reject`, `rest`, `reverse`, `shuffle`,\n   * `slice`, `sort`, `sortBy`, `splice`, `tap`, `throttle`, `times`, `toArray`,\n   * `union`, `uniq`, `unshift`, `values`, `where`, `without`, `wrap`, and `zip`\n   *\n   * The non-chainable wrapper functions are:\n   * `clone`, `cloneDeep`, `contains`, `escape`, `every`, `find`, `has`, `identity`,\n   * `indexOf`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`, `isEmpty`,\n   * `isEqual`, `isFinite`, `isFunction`, `isNaN`, `isNull`, `isNumber`, `isObject`,\n   * `isPlainObject`, `isRegExp`, `isString`, `isUndefined`, `join`, `lastIndexOf`,\n   * `mixin`, `noConflict`, `pop`, `random`, `reduce`, `reduceRight`, `result`,\n   * `shift`, `size`, `some`, `sortedIndex`, `template`, `unescape`, and `uniqueId`\n   *\n   * The wrapper functions `first` and `last` return wrapped values when `n` is\n   * passed, otherwise they return unwrapped values.\n   *\n   * @name _\n   * @constructor\n   * @category Chaining\n   * @param {Mixed} value The value to wrap in a `lodash` instance.\n   * @returns {Object} Returns a `lodash` instance.\n   */\n  function lodash(value) {\n    // exit early if already wrapped, even if wrapped by a different `lodash` constructor\n    if (value && typeof value == 'object' && value.__wrapped__) {\n      return value;\n    }\n    // allow invoking `lodash` without the `new` operator\n    if (!(this instanceof lodash)) {\n      return new lodash(value);\n    }\n    this.__wrapped__ = value;\n  }\n\n  /**\n   * By default, the template delimiters used by Lo-Dash are similar to those in\n   * embedded Ruby (ERB). Change the following template settings to use alternative\n   * delimiters.\n   *\n   * @static\n   * @memberOf _\n   * @type Object\n   */\n  lodash.templateSettings = {\n\n    /**\n     * Used to detect `data` property values to be HTML-escaped.\n     *\n     * @memberOf _.templateSettings\n     * @type RegExp\n     */\n    'escape': /<%-([\\s\\S]+?)%>/g,\n\n    /**\n     * Used to detect code to be evaluated.\n     *\n     * @memberOf _.templateSettings\n     * @type RegExp\n     */\n    'evaluate': /<%([\\s\\S]+?)%>/g,\n\n    /**\n     * Used to detect `data` property values to inject.\n     *\n     * @memberOf _.templateSettings\n     * @type RegExp\n     */\n    'interpolate': reInterpolate,\n\n    /**\n     * Used to reference the data object in the template text.\n     *\n     * @memberOf _.templateSettings\n     * @type String\n     */\n    'variable': '',\n\n    /**\n     * Used to import variables into the compiled template.\n     *\n     * @memberOf _.templateSettings\n     * @type Object\n     */\n    'imports': {\n\n      /**\n       * A reference to the `lodash` function.\n       *\n       * @memberOf _.templateSettings.imports\n       * @type Function\n       */\n      '_': lodash\n    }\n  };\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * The template used to create iterator functions.\n   *\n   * @private\n   * @param {Obect} data The data object used to populate the text.\n   * @returns {String} Returns the interpolated text.\n   */\n  var iteratorTemplate = function(obj) {\n    \n    var __p = 'var index, iterable = ' +\n    (obj.firstArg ) +\n    ', result = iterable;\\nif (!iterable) return result;\\n' +\n    (obj.top ) +\n    ';\\n';\n     if (obj.arrays) {\n    __p += 'var length = iterable.length; index = -1;\\nif (' +\n    (obj.arrays ) +\n    ') {\\n  while (++index < length) {\\n    ' +\n    (obj.loop ) +\n    '\\n  }\\n}\\nelse {  ';\n     } ;\n    \n     if (obj.isKeysFast && obj.useHas) {\n    __p += '\\n  var ownIndex = -1,\\n      ownProps = objectTypes[typeof iterable] ? nativeKeys(iterable) : [],\\n      length = ownProps.length;\\n\\n  while (++ownIndex < length) {\\n    index = ownProps[ownIndex];\\n    ' +\n    (obj.loop ) +\n    '\\n  }  ';\n     } else {\n    __p += '\\n  for (index in iterable) {';\n        if (obj.useHas) {\n    __p += '\\n    if (';\n          if (obj.useHas) {\n    __p += 'hasOwnProperty.call(iterable, index)';\n     }    ;\n    __p += ') {    ';\n     } ;\n    __p += \n    (obj.loop ) +\n    ';    ';\n     if (obj.useHas) {\n    __p += '\\n    }';\n     } ;\n    __p += '\\n  }  ';\n     } ;\n    \n     if (obj.arrays) {\n    __p += '\\n}';\n     } ;\n    __p += \n    (obj.bottom ) +\n    ';\\nreturn result';\n    \n    \n    return __p\n  };\n\n  /** Reusable iterator options for `assign` and `defaults` */\n  var defaultsIteratorOptions = {\n    'args': 'object, source, guard',\n    'top':\n      'var args = arguments,\\n' +\n      '    argsIndex = 0,\\n' +\n      \"    argsLength = typeof guard == 'number' ? 2 : args.length;\\n\" +\n      'while (++argsIndex < argsLength) {\\n' +\n      '  iterable = args[argsIndex];\\n' +\n      '  if (iterable && objectTypes[typeof iterable]) {',\n    'loop': \"if (typeof result[index] == 'undefined') result[index] = iterable[index]\",\n    'bottom': '  }\\n}'\n  };\n\n  /** Reusable iterator options shared by `each`, `forIn`, and `forOwn` */\n  var eachIteratorOptions = {\n    'args': 'collection, callback, thisArg',\n    'top': \"callback = callback && typeof thisArg == 'undefined' ? callback : createCallback(callback, thisArg)\",\n    'arrays': \"typeof length == 'number'\",\n    'loop': 'if (callback(iterable[index], index, collection) === false) return result'\n  };\n\n  /** Reusable iterator options for `forIn` and `forOwn` */\n  var forOwnIteratorOptions = {\n    'top': 'if (!objectTypes[typeof iterable]) return result;\\n' + eachIteratorOptions.top,\n    'arrays': false\n  };\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Creates a function optimized to search large arrays for a given `value`,\n   * starting at `fromIndex`, using strict equality for comparisons, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to search.\n   * @param {Mixed} value The value to search for.\n   * @param {Number} [fromIndex=0] The index to search from.\n   * @param {Number} [largeSize=30] The length at which an array is considered large.\n   * @returns {Boolean} Returns `true`, if `value` is found, else `false`.\n   */\n  function cachedContains(array, fromIndex, largeSize) {\n    fromIndex || (fromIndex = 0);\n\n    var length = array.length,\n        isLarge = (length - fromIndex) >= (largeSize || largeArraySize);\n\n    if (isLarge) {\n      var cache = {},\n          index = fromIndex - 1;\n\n      while (++index < length) {\n        // manually coerce `value` to a string because `hasOwnProperty`, in some\n        // older versions of Firefox, coerces objects incorrectly\n        var key = array[index] + '';\n        (hasOwnProperty.call(cache, key) ? cache[key] : (cache[key] = [])).push(array[index]);\n      }\n    }\n    return function(value) {\n      if (isLarge) {\n        var key = value + '';\n        return hasOwnProperty.call(cache, key) && indexOf(cache[key], value) > -1;\n      }\n      return indexOf(array, value, fromIndex) > -1;\n    }\n  }\n\n  /**\n   * Used by `_.max` and `_.min` as the default `callback` when a given\n   * `collection` is a string value.\n   *\n   * @private\n   * @param {String} value The character to inspect.\n   * @returns {Number} Returns the code unit of given character.\n   */\n  function charAtCallback(value) {\n    return value.charCodeAt(0);\n  }\n\n  /**\n   * Used by `sortBy` to compare transformed `collection` values, stable sorting\n   * them in ascending order.\n   *\n   * @private\n   * @param {Object} a The object to compare to `b`.\n   * @param {Object} b The object to compare to `a`.\n   * @returns {Number} Returns the sort order indicator of `1` or `-1`.\n   */\n  function compareAscending(a, b) {\n    var ai = a.index,\n        bi = b.index;\n\n    a = a.criteria;\n    b = b.criteria;\n\n    // ensure a stable sort in V8 and other engines\n    // http://code.google.com/p/v8/issues/detail?id=90\n    if (a !== b) {\n      if (a > b || typeof a == 'undefined') {\n        return 1;\n      }\n      if (a < b || typeof b == 'undefined') {\n        return -1;\n      }\n    }\n    return ai < bi ? -1 : 1;\n  }\n\n  /**\n   * Creates a function that, when called, invokes `func` with the `this` binding\n   * of `thisArg` and prepends any `partialArgs` to the arguments passed to the\n   * bound function.\n   *\n   * @private\n   * @param {Function|String} func The function to bind or the method name.\n   * @param {Mixed} [thisArg] The `this` binding of `func`.\n   * @param {Array} partialArgs An array of arguments to be partially applied.\n   * @param {Object} [rightIndicator] Used to indicate partially applying arguments from the right.\n   * @returns {Function} Returns the new bound function.\n   */\n  function createBound(func, thisArg, partialArgs, rightIndicator) {\n    var isFunc = isFunction(func),\n        isPartial = !partialArgs,\n        key = thisArg;\n\n    // juggle arguments\n    if (isPartial) {\n      partialArgs = thisArg;\n    }\n    if (!isFunc) {\n      thisArg = func;\n    }\n\n    function bound() {\n      // `Function#bind` spec\n      // http://es5.github.com/#x15.3.4.5\n      var args = arguments,\n          thisBinding = isPartial ? this : thisArg;\n\n      if (!isFunc) {\n        func = thisArg[key];\n      }\n      if (partialArgs.length) {\n        args = args.length\n          ? (args = slice(args), rightIndicator ? args.concat(partialArgs) : partialArgs.concat(args))\n          : partialArgs;\n      }\n      if (this instanceof bound) {\n        // ensure `new bound` is an instance of `bound` and `func`\n        noop.prototype = func.prototype;\n        thisBinding = new noop;\n        noop.prototype = null;\n\n        // mimic the constructor's `return` behavior\n        // http://es5.github.com/#x13.2.2\n        var result = func.apply(thisBinding, args);\n        return isObject(result) ? result : thisBinding;\n      }\n      return func.apply(thisBinding, args);\n    }\n    return bound;\n  }\n\n  /**\n   * Produces a callback bound to an optional `thisArg`. If `func` is a property\n   * name, the created callback will return the property value for a given element.\n   * If `func` is an object, the created callback will return `true` for elements\n   * that contain the equivalent object properties, otherwise it will return `false`.\n   *\n   * @private\n   * @param {Mixed} [func=identity] The value to convert to a callback.\n   * @param {Mixed} [thisArg] The `this` binding of the created callback.\n   * @param {Number} [argCount=3] The number of arguments the callback accepts.\n   * @returns {Function} Returns a callback function.\n   */\n  function createCallback(func, thisArg, argCount) {\n    if (func == null) {\n      return identity;\n    }\n    var type = typeof func;\n    if (type != 'function') {\n      if (type != 'object') {\n        return function(object) {\n          return object[func];\n        };\n      }\n      var props = keys(func);\n      return function(object) {\n        var length = props.length,\n            result = false;\n        while (length--) {\n          if (!(result = isEqual(object[props[length]], func[props[length]], indicatorObject))) {\n            break;\n          }\n        }\n        return result;\n      };\n    }\n    if (typeof thisArg != 'undefined') {\n      if (argCount === 1) {\n        return function(value) {\n          return func.call(thisArg, value);\n        };\n      }\n      if (argCount === 2) {\n        return function(a, b) {\n          return func.call(thisArg, a, b);\n        };\n      }\n      if (argCount === 4) {\n        return function(accumulator, value, index, object) {\n          return func.call(thisArg, accumulator, value, index, object);\n        };\n      }\n      return function(value, index, object) {\n        return func.call(thisArg, value, index, object);\n      };\n    }\n    return func;\n  }\n\n  /**\n   * Creates compiled iteration functions.\n   *\n   * @private\n   * @param {Object} [options1, options2, ...] The compile options object(s).\n   *  arrays - A string of code to determine if the iterable is an array or array-like.\n   *  useHas - A boolean to specify using `hasOwnProperty` checks in the object loop.\n   *  args - A string of comma separated arguments the iteration function will accept.\n   *  top - A string of code to execute before the iteration branches.\n   *  loop - A string of code to execute in the object loop.\n   *  bottom - A string of code to execute after the iteration branches.\n   *\n   * @returns {Function} Returns the compiled function.\n   */\n  function createIterator() {\n    var data = {\n      // support properties\n      'isKeysFast': isKeysFast,\n\n      // iterator options\n      'arrays': 'isArray(iterable)',\n      'bottom': '',\n      'loop': '',\n      'top': '',\n      'useHas': true\n    };\n\n    // merge options into a template data object\n    for (var object, index = 0; object = arguments[index]; index++) {\n      for (var key in object) {\n        data[key] = object[key];\n      }\n    }\n    var args = data.args;\n    data.firstArg = /^[^,]+/.exec(args)[0];\n\n    // create the function factory\n    var factory = Function(\n        'createCallback, hasOwnProperty, isArguments, isArray, isString, ' +\n        'objectTypes, nativeKeys',\n      'return function(' + args + ') {\\n' + iteratorTemplate(data) + '\\n}'\n    );\n    // return the compiled function\n    return factory(\n      createCallback, hasOwnProperty, isArguments, isArray, isString,\n      objectTypes, nativeKeys\n    );\n  }\n\n  /**\n   * A function compiled to iterate `arguments` objects, arrays, objects, and\n   * strings consistenly across environments, executing the `callback` for each\n   * element in the `collection`. The `callback` is bound to `thisArg` and invoked\n   * with three arguments; (value, index|key, collection). Callbacks may exit\n   * iteration early by explicitly returning `false`.\n   *\n   * @private\n   * @type Function\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function} [callback=identity] The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array|Object|String} Returns `collection`.\n   */\n  var each = createIterator(eachIteratorOptions);\n\n  /**\n   * Used by `template` to escape characters for inclusion in compiled\n   * string literals.\n   *\n   * @private\n   * @param {String} match The matched character to escape.\n   * @returns {String} Returns the escaped character.\n   */\n  function escapeStringChar(match) {\n    return '\\\\' + stringEscapes[match];\n  }\n\n  /**\n   * Used by `escape` to convert characters to HTML entities.\n   *\n   * @private\n   * @param {String} match The matched character to escape.\n   * @returns {String} Returns the escaped character.\n   */\n  function escapeHtmlChar(match) {\n    return htmlEscapes[match];\n  }\n\n  /**\n   * Checks if `value` is a DOM node in IE < 9.\n   *\n   * @private\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true` if the `value` is a DOM node, else `false`.\n   */\n  function isNode(value) {\n    // IE < 9 presents DOM nodes as `Object` objects except they have `toString`\n    // methods that are `typeof` \"string\" and still can coerce nodes to strings\n    return typeof value.toString != 'function' && typeof (value + '') == 'string';\n  }\n\n  /**\n   * A no-operation function.\n   *\n   * @private\n   */\n  function noop() {\n    // no operation performed\n  }\n\n  /**\n   * Slices the `collection` from the `start` index up to, but not including,\n   * the `end` index.\n   *\n   * Note: This function is used, instead of `Array#slice`, to support node lists\n   * in IE < 9 and to ensure dense arrays are returned.\n   *\n   * @private\n   * @param {Array|Object|String} collection The collection to slice.\n   * @param {Number} start The start index.\n   * @param {Number} end The end index.\n   * @returns {Array} Returns the new array.\n   */\n  function slice(array, start, end) {\n    start || (start = 0);\n    if (typeof end == 'undefined') {\n      end = array ? array.length : 0;\n    }\n    var index = -1,\n        length = end - start || 0,\n        result = Array(length < 0 ? 0 : length);\n\n    while (++index < length) {\n      result[index] = array[start + index];\n    }\n    return result;\n  }\n\n  /**\n   * Used by `unescape` to convert HTML entities to characters.\n   *\n   * @private\n   * @param {String} match The matched character to unescape.\n   * @returns {String} Returns the unescaped character.\n   */\n  function unescapeHtmlChar(match) {\n    return htmlUnescapes[match];\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Checks if `value` is an `arguments` object.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is an `arguments` object, else `false`.\n   * @example\n   *\n   * (function() { return _.isArguments(arguments); })(1, 2, 3);\n   * // => true\n   *\n   * _.isArguments([1, 2, 3]);\n   * // => false\n   */\n  function isArguments(value) {\n    return toString.call(value) == argsClass;\n  }\n\n  /**\n   * Iterates over `object`'s own and inherited enumerable properties, executing\n   * the `callback` for each property. The `callback` is bound to `thisArg` and\n   * invoked with three arguments; (value, key, object). Callbacks may exit iteration\n   * early by explicitly returning `false`.\n   *\n   * @static\n   * @memberOf _\n   * @type Function\n   * @category Objects\n   * @param {Object} object The object to iterate over.\n   * @param {Function} [callback=identity] The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Object} Returns `object`.\n   * @example\n   *\n   * function Dog(name) {\n   *   this.name = name;\n   * }\n   *\n   * Dog.prototype.bark = function() {\n   *   alert('Woof, woof!');\n   * };\n   *\n   * _.forIn(new Dog('Dagny'), function(value, key) {\n   *   alert(key);\n   * });\n   * // => alerts 'name' and 'bark' (order is not guaranteed)\n   */\n  var forIn = createIterator(eachIteratorOptions, forOwnIteratorOptions, {\n    'useHas': false\n  });\n\n  /**\n   * Iterates over an object's own enumerable properties, executing the `callback`\n   * for each property. The `callback` is bound to `thisArg` and invoked with three\n   * arguments; (value, key, object). Callbacks may exit iteration early by explicitly\n   * returning `false`.\n   *\n   * @static\n   * @memberOf _\n   * @type Function\n   * @category Objects\n   * @param {Object} object The object to iterate over.\n   * @param {Function} [callback=identity] The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Object} Returns `object`.\n   * @example\n   *\n   * _.forOwn({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {\n   *   alert(key);\n   * });\n   * // => alerts '0', '1', and 'length' (order is not guaranteed)\n   */\n  var forOwn = createIterator(eachIteratorOptions, forOwnIteratorOptions);\n\n  /**\n   * Checks if `value` is an array.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is an array, else `false`.\n   * @example\n   *\n   * (function() { return _.isArray(arguments); })();\n   * // => false\n   *\n   * _.isArray([1, 2, 3]);\n   * // => true\n   */\n  var isArray = nativeIsArray || function(value) {\n    // `instanceof` may cause a memory leak in IE 7 if `value` is a host object\n    // http://ajaxian.com/archives/working-aroung-the-instanceof-memory-leak\n    return value instanceof Array || toString.call(value) == arrayClass;\n  };\n\n  /**\n   * Creates an array composed of the own enumerable property names of `object`.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The object to inspect.\n   * @returns {Array} Returns a new array of property names.\n   * @example\n   *\n   * _.keys({ 'one': 1, 'two': 2, 'three': 3 });\n   * // => ['one', 'two', 'three'] (order is not guaranteed)\n   */\n  var keys = !nativeKeys ? shimKeys : function(object) {\n    if (!isObject(object)) {\n      return [];\n    }\n    return nativeKeys(object);\n  };\n\n  /**\n   * A fallback implementation of `isPlainObject` that checks if a given `value`\n   * is an object created by the `Object` constructor, assuming objects created\n   * by the `Object` constructor have no inherited enumerable properties and that\n   * there are no `Object.prototype` extensions.\n   *\n   * @private\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if `value` is a plain object, else `false`.\n   */\n  function shimIsPlainObject(value) {\n    // avoid non-objects and false positives for `arguments` objects\n    var result = false;\n    if (!(value && typeof value == 'object') || isArguments(value)) {\n      return result;\n    }\n    // check that the constructor is `Object` (i.e. `Object instanceof Object`)\n    var ctor = value.constructor;\n    if ((!isFunction(ctor)) || ctor instanceof ctor) {\n      // In most environments an object's own properties are iterated before\n      // its inherited properties. If the last iterated property is an object's\n      // own property then there are no inherited enumerable properties.\n      forIn(value, function(value, key) {\n        result = key;\n      });\n      return result === false || hasOwnProperty.call(value, result);\n    }\n    return result;\n  }\n\n  /**\n   * A fallback implementation of `Object.keys` that produces an array of the\n   * given object's own enumerable property names.\n   *\n   * @private\n   * @param {Object} object The object to inspect.\n   * @returns {Array} Returns a new array of property names.\n   */\n  function shimKeys(object) {\n    var result = [];\n    forOwn(object, function(value, key) {\n      result.push(key);\n    });\n    return result;\n  }\n\n  /**\n   * Used to convert characters to HTML entities:\n   *\n   * Though the `>` character is escaped for symmetry, characters like `>` and `/`\n   * don't require escaping in HTML and have no special meaning unless they're part\n   * of a tag or an unquoted attribute value.\n   * http://mathiasbynens.be/notes/ambiguous-ampersands (under \"semi-related fun fact\")\n   */\n  var htmlEscapes = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n  };\n\n  /** Used to convert HTML entities to characters */\n  var htmlUnescapes = invert(htmlEscapes);\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Assigns own enumerable properties of source object(s) to the destination\n   * object. Subsequent sources will overwrite propery assignments of previous\n   * sources. If a `callback` function is passed, it will be executed to produce\n   * the assigned values. The `callback` is bound to `thisArg` and invoked with\n   * two arguments; (objectValue, sourceValue).\n   *\n   * @static\n   * @memberOf _\n   * @type Function\n   * @alias extend\n   * @category Objects\n   * @param {Object} object The destination object.\n   * @param {Object} [source1, source2, ...] The source objects.\n   * @param {Function} [callback] The function to customize assigning values.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Object} Returns the destination object.\n   * @example\n   *\n   * _.assign({ 'name': 'moe' }, { 'age': 40 });\n   * // => { 'name': 'moe', 'age': 40 }\n   *\n   * var defaults = _.partialRight(_.assign, function(a, b) {\n   *   return typeof a == 'undefined' ? b : a;\n   * });\n   *\n   * var food = { 'name': 'apple' };\n   * defaults(food, { 'name': 'banana', 'type': 'fruit' });\n   * // => { 'name': 'apple', 'type': 'fruit' }\n   */\n  var assign = createIterator(defaultsIteratorOptions, {\n    'top':\n      defaultsIteratorOptions.top.replace(';',\n        ';\\n' +\n        \"if (argsLength > 3 && typeof args[argsLength - 2] == 'function') {\\n\" +\n        '  var callback = createCallback(args[--argsLength - 1], args[argsLength--], 2);\\n' +\n        \"} else if (argsLength > 2 && typeof args[argsLength - 1] == 'function') {\\n\" +\n        '  callback = args[--argsLength];\\n' +\n        '}'\n      ),\n    'loop': 'result[index] = callback ? callback(result[index], iterable[index]) : iterable[index]'\n  });\n\n  /**\n   * Creates a clone of `value`. If `deep` is `true`, nested objects will also\n   * be cloned, otherwise they will be assigned by reference. If a `callback`\n   * function is passed, it will be executed to produce the cloned values. If\n   * `callback` returns `undefined`, cloning will be handled by the method instead.\n   * The `callback` is bound to `thisArg` and invoked with one argument; (value).\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to clone.\n   * @param {Boolean} [deep=false] A flag to indicate a deep clone.\n   * @param {Function} [callback] The function to customize cloning values.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @param- {Array} [stackA=[]] Internally used to track traversed source objects.\n   * @param- {Array} [stackB=[]] Internally used to associate clones with source counterparts.\n   * @returns {Mixed} Returns the cloned `value`.\n   * @example\n   *\n   * var stooges = [\n   *   { 'name': 'moe', 'age': 40 },\n   *   { 'name': 'larry', 'age': 50 }\n   * ];\n   *\n   * var shallow = _.clone(stooges);\n   * shallow[0] === stooges[0];\n   * // => true\n   *\n   * var deep = _.clone(stooges, true);\n   * deep[0] === stooges[0];\n   * // => false\n   *\n   * _.mixin({\n   *   'clone': _.partialRight(_.clone, function(value) {\n   *     return _.isElement(value) ? value.cloneNode(false) : undefined;\n   *   })\n   * });\n   *\n   * var clone = _.clone(document.body);\n   * clone.childNodes.length;\n   * // => 0\n   */\n  function clone(value, deep, callback, thisArg, stackA, stackB) {\n    var result = value;\n\n    // allows working with \"Collections\" methods without using their `callback`\n    // argument, `index|key`, for this method's `callback`\n    if (typeof deep == 'function') {\n      thisArg = callback;\n      callback = deep;\n      deep = false;\n    }\n    if (typeof callback == 'function') {\n      callback = typeof thisArg == 'undefined' ? callback : createCallback(callback, thisArg, 1);\n      result = callback(result);\n\n      var done = typeof result != 'undefined';\n      if (!done) {\n        result = value;\n      }\n    }\n    // inspect [[Class]]\n    var isObj = isObject(result);\n    if (isObj) {\n      var className = toString.call(result);\n      if (!cloneableClasses[className]) {\n        return result;\n      }\n      var isArr = isArray(result);\n    }\n    // shallow clone\n    if (!isObj || !deep) {\n      return isObj && !done\n        ? (isArr ? slice(result) : assign({}, result))\n        : result;\n    }\n    var ctor = ctorByClass[className];\n    switch (className) {\n      case boolClass:\n      case dateClass:\n        return done ? result : new ctor(+result);\n\n      case numberClass:\n      case stringClass:\n        return done ? result : new ctor(result);\n\n      case regexpClass:\n        return done ? result : ctor(result.source, reFlags.exec(result));\n    }\n    // check for circular references and return corresponding clone\n    stackA || (stackA = []);\n    stackB || (stackB = []);\n\n    var length = stackA.length;\n    while (length--) {\n      if (stackA[length] == value) {\n        return stackB[length];\n      }\n    }\n    // init cloned object\n    if (!done) {\n      result = isArr ? ctor(result.length) : {};\n\n      // add array properties assigned by `RegExp#exec`\n      if (isArr) {\n        if (hasOwnProperty.call(value, 'index')) {\n          result.index = value.index;\n        }\n        if (hasOwnProperty.call(value, 'input')) {\n          result.input = value.input;\n        }\n      }\n    }\n    // add the source value to the stack of traversed objects\n    // and associate it with its clone\n    stackA.push(value);\n    stackB.push(result);\n\n    // recursively populate clone (susceptible to call stack limits)\n    (isArr ? forEach : forOwn)(done ? result : value, function(objValue, key) {\n      result[key] = clone(objValue, deep, callback, undefined, stackA, stackB);\n    });\n\n    return result;\n  }\n\n  /**\n   * Creates a deep clone of `value`. If a `callback` function is passed, it will\n   * be executed to produce the cloned values. If `callback` returns the value it\n   * was passed, cloning will be handled by the method instead. The `callback` is\n   * bound to `thisArg` and invoked with one argument; (value).\n   *\n   * Note: This function is loosely based on the structured clone algorithm. Functions\n   * and DOM nodes are **not** cloned. The enumerable properties of `arguments` objects and\n   * objects created by constructors other than `Object` are cloned to plain `Object` objects.\n   * See http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to deep clone.\n   * @param {Function} [callback] The function to customize cloning values.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Mixed} Returns the deep cloned `value`.\n   * @example\n   *\n   * var stooges = [\n   *   { 'name': 'moe', 'age': 40 },\n   *   { 'name': 'larry', 'age': 50 }\n   * ];\n   *\n   * var deep = _.cloneDeep(stooges);\n   * deep[0] === stooges[0];\n   * // => false\n   *\n   * var view = {\n   *   'label': 'docs',\n   *   'node': element\n   * };\n   *\n   * var clone = _.cloneDeep(view, function(value) {\n   *   return _.isElement(value) ? value.cloneNode(true) : value;\n   * });\n   *\n   * clone.node == view.node;\n   * // => false\n   */\n  function cloneDeep(value, callback, thisArg) {\n    return clone(value, true, callback, thisArg);\n  }\n\n  /**\n   * Assigns own enumerable properties of source object(s) to the destination\n   * object for all destination properties that resolve to `undefined`. Once a\n   * property is set, additional defaults of the same property will be ignored.\n   *\n   * @static\n   * @memberOf _\n   * @type Function\n   * @category Objects\n   * @param {Object} object The destination object.\n   * @param {Object} [source1, source2, ...] The source objects.\n   * @param- {Object} [guard] Internally used to allow working with `_.reduce`\n   *  without using its callback's `key` and `object` arguments as sources.\n   * @returns {Object} Returns the destination object.\n   * @example\n   *\n   * var food = { 'name': 'apple' };\n   * _.defaults(food, { 'name': 'banana', 'type': 'fruit' });\n   * // => { 'name': 'apple', 'type': 'fruit' }\n   */\n  var defaults = createIterator(defaultsIteratorOptions);\n\n  /**\n   * Creates a sorted array of all enumerable properties, own and inherited,\n   * of `object` that have function values.\n   *\n   * @static\n   * @memberOf _\n   * @alias methods\n   * @category Objects\n   * @param {Object} object The object to inspect.\n   * @returns {Array} Returns a new array of property names that have function values.\n   * @example\n   *\n   * _.functions(_);\n   * // => ['all', 'any', 'bind', 'bindAll', 'clone', 'compact', 'compose', ...]\n   */\n  function functions(object) {\n    var result = [];\n    forIn(object, function(value, key) {\n      if (isFunction(value)) {\n        result.push(key);\n      }\n    });\n    return result.sort();\n  }\n\n  /**\n   * Checks if the specified object `property` exists and is a direct property,\n   * instead of an inherited property.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The object to check.\n   * @param {String} property The property to check for.\n   * @returns {Boolean} Returns `true` if key is a direct property, else `false`.\n   * @example\n   *\n   * _.has({ 'a': 1, 'b': 2, 'c': 3 }, 'b');\n   * // => true\n   */\n  function has(object, property) {\n    return object ? hasOwnProperty.call(object, property) : false;\n  }\n\n  /**\n   * Creates an object composed of the inverted keys and values of the given `object`.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The object to invert.\n   * @returns {Object} Returns the created inverted object.\n   * @example\n   *\n   *  _.invert({ 'first': 'moe', 'second': 'larry' });\n   * // => { 'moe': 'first', 'larry': 'second' } (order is not guaranteed)\n   */\n  function invert(object) {\n    var index = -1,\n        props = keys(object),\n        length = props.length,\n        result = {};\n\n    while (++index < length) {\n      var key = props[index];\n      result[object[key]] = key;\n    }\n    return result;\n  }\n\n  /**\n   * Checks if `value` is a boolean value.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is a boolean value, else `false`.\n   * @example\n   *\n   * _.isBoolean(null);\n   * // => false\n   */\n  function isBoolean(value) {\n    return value === true || value === false || toString.call(value) == boolClass;\n  }\n\n  /**\n   * Checks if `value` is a date.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is a date, else `false`.\n   * @example\n   *\n   * _.isDate(new Date);\n   * // => true\n   */\n  function isDate(value) {\n    return value instanceof Date || toString.call(value) == dateClass;\n  }\n\n  /**\n   * Checks if `value` is a DOM element.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is a DOM element, else `false`.\n   * @example\n   *\n   * _.isElement(document.body);\n   * // => true\n   */\n  function isElement(value) {\n    return value ? value.nodeType === 1 : false;\n  }\n\n  /**\n   * Checks if `value` is empty. Arrays, strings, or `arguments` objects with a\n   * length of `0` and objects with no own enumerable properties are considered\n   * \"empty\".\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Array|Object|String} value The value to inspect.\n   * @returns {Boolean} Returns `true`, if the `value` is empty, else `false`.\n   * @example\n   *\n   * _.isEmpty([1, 2, 3]);\n   * // => false\n   *\n   * _.isEmpty({});\n   * // => true\n   *\n   * _.isEmpty('');\n   * // => true\n   */\n  function isEmpty(value) {\n    var result = true;\n    if (!value) {\n      return result;\n    }\n    var className = toString.call(value),\n        length = value.length;\n\n    if ((className == arrayClass || className == stringClass ||\n        className == argsClass) ||\n        (className == objectClass && typeof length == 'number' && isFunction(value.splice))) {\n      return !length;\n    }\n    forOwn(value, function() {\n      return (result = false);\n    });\n    return result;\n  }\n\n  /**\n   * Performs a deep comparison between two values to determine if they are\n   * equivalent to each other. If `callback` is passed, it will be executed to\n   * compare values. If `callback` returns `undefined`, comparisons will be handled\n   * by the method instead. The `callback` is bound to `thisArg` and invoked with\n   * two arguments; (a, b).\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} a The value to compare.\n   * @param {Mixed} b The other value to compare.\n   * @param {Function} [callback] The function to customize comparing values.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @param- {Object} [stackA=[]] Internally used track traversed `a` objects.\n   * @param- {Object} [stackB=[]] Internally used track traversed `b` objects.\n   * @returns {Boolean} Returns `true`, if the values are equvalent, else `false`.\n   * @example\n   *\n   * var moe = { 'name': 'moe', 'age': 40 };\n   * var copy = { 'name': 'moe', 'age': 40 };\n   *\n   * moe == copy;\n   * // => false\n   *\n   * _.isEqual(moe, copy);\n   * // => true\n   *\n   * var words = ['hello', 'goodbye'];\n   * var otherWords = ['hi', 'goodbye'];\n   *\n   * _.isEqual(words, otherWords, function(a, b) {\n   *   var reGreet = /^(?:hello|hi)$/i,\n   *       aGreet = _.isString(a) && reGreet.test(a),\n   *       bGreet = _.isString(b) && reGreet.test(b);\n   *\n   *   return (aGreet || bGreet) ? (aGreet == bGreet) : undefined;\n   * });\n   * // => true\n   */\n  function isEqual(a, b, callback, thisArg, stackA, stackB) {\n    // used to indicate that when comparing objects, `a` has at least the properties of `b`\n    var whereIndicator = callback === indicatorObject;\n    if (callback && !whereIndicator) {\n      callback = typeof thisArg == 'undefined' ? callback : createCallback(callback, thisArg, 2);\n      var result = callback(a, b);\n      if (typeof result != 'undefined') {\n        return !!result;\n      }\n    }\n    // exit early for identical values\n    if (a === b) {\n      // treat `+0` vs. `-0` as not equal\n      return a !== 0 || (1 / a == 1 / b);\n    }\n    var type = typeof a,\n        otherType = typeof b;\n\n    // exit early for unlike primitive values\n    if (a === a &&\n        (!a || (type != 'function' && type != 'object')) &&\n        (!b || (otherType != 'function' && otherType != 'object'))) {\n      return false;\n    }\n    // exit early for `null` and `undefined`, avoiding ES3's Function#call behavior\n    // http://es5.github.com/#x15.3.4.4\n    if (a == null || b == null) {\n      return a === b;\n    }\n    // compare [[Class]] names\n    var className = toString.call(a),\n        otherClass = toString.call(b);\n\n    if (className == argsClass) {\n      className = objectClass;\n    }\n    if (otherClass == argsClass) {\n      otherClass = objectClass;\n    }\n    if (className != otherClass) {\n      return false;\n    }\n    switch (className) {\n      case boolClass:\n      case dateClass:\n        // coerce dates and booleans to numbers, dates to milliseconds and booleans\n        // to `1` or `0`, treating invalid dates coerced to `NaN` as not equal\n        return +a == +b;\n\n      case numberClass:\n        // treat `NaN` vs. `NaN` as equal\n        return a != +a\n          ? b != +b\n          // but treat `+0` vs. `-0` as not equal\n          : (a == 0 ? (1 / a == 1 / b) : a == +b);\n\n      case regexpClass:\n      case stringClass:\n        // coerce regexes to strings (http://es5.github.com/#x15.10.6.4)\n        // treat string primitives and their corresponding object instances as equal\n        return a == b + '';\n    }\n    var isArr = className == arrayClass;\n    if (!isArr) {\n      // unwrap any `lodash` wrapped values\n      if (a.__wrapped__ || b.__wrapped__) {\n        return isEqual(a.__wrapped__ || a, b.__wrapped__ || b, callback, thisArg, stackA, stackB);\n      }\n      // exit for functions and DOM nodes\n      if (className != objectClass) {\n        return false;\n      }\n      // in older versions of Opera, `arguments` objects have `Array` constructors\n      var ctorA = a.constructor,\n          ctorB = b.constructor;\n\n      // non `Object` object instances with different constructors are not equal\n      if (ctorA != ctorB && !(\n            isFunction(ctorA) && ctorA instanceof ctorA &&\n            isFunction(ctorB) && ctorB instanceof ctorB\n          )) {\n        return false;\n      }\n    }\n    // assume cyclic structures are equal\n    // the algorithm for detecting cyclic structures is adapted from ES 5.1\n    // section 15.12.3, abstract operation `JO` (http://es5.github.com/#x15.12.3)\n    stackA || (stackA = []);\n    stackB || (stackB = []);\n\n    var length = stackA.length;\n    while (length--) {\n      if (stackA[length] == a) {\n        return stackB[length] == b;\n      }\n    }\n    var size = 0;\n    result = true;\n\n    // add `a` and `b` to the stack of traversed objects\n    stackA.push(a);\n    stackB.push(b);\n\n    // recursively compare objects and arrays (susceptible to call stack limits)\n    if (isArr) {\n      length = a.length;\n      size = b.length;\n\n      // compare lengths to determine if a deep comparison is necessary\n      result = size == a.length;\n      if (!result && !whereIndicator) {\n        return result;\n      }\n      // deep compare the contents, ignoring non-numeric properties\n      while (size--) {\n        var index = length,\n            value = b[size];\n\n        if (whereIndicator) {\n          while (index--) {\n            if ((result = isEqual(a[index], value, callback, thisArg, stackA, stackB))) {\n              break;\n            }\n          }\n        } else if (!(result = isEqual(a[size], value, callback, thisArg, stackA, stackB))) {\n          break;\n        }\n      }\n      return result;\n    }\n    // deep compare objects using `forIn`, instead of `forOwn`, to avoid `Object.keys`\n    // which, in this case, is more costly\n    forIn(b, function(value, key, b) {\n      if (hasOwnProperty.call(b, key)) {\n        // count the number of properties.\n        size++;\n        // deep compare each property value.\n        return (result = hasOwnProperty.call(a, key) && isEqual(a[key], value, callback, thisArg, stackA, stackB));\n      }\n    });\n\n    if (result && !whereIndicator) {\n      // ensure both objects have the same number of properties\n      forIn(a, function(value, key, a) {\n        if (hasOwnProperty.call(a, key)) {\n          // `size` will be `-1` if `a` has more properties than `b`\n          return (result = --size > -1);\n        }\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Checks if `value` is, or can be coerced to, a finite number.\n   *\n   * Note: This is not the same as native `isFinite`, which will return true for\n   * booleans and empty strings. See http://es5.github.com/#x15.1.2.5.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is finite, else `false`.\n   * @example\n   *\n   * _.isFinite(-101);\n   * // => true\n   *\n   * _.isFinite('10');\n   * // => true\n   *\n   * _.isFinite(true);\n   * // => false\n   *\n   * _.isFinite('');\n   * // => false\n   *\n   * _.isFinite(Infinity);\n   * // => false\n   */\n  function isFinite(value) {\n    return nativeIsFinite(value) && !nativeIsNaN(parseFloat(value));\n  }\n\n  /**\n   * Checks if `value` is a function.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is a function, else `false`.\n   * @example\n   *\n   * _.isFunction(_);\n   * // => true\n   */\n  function isFunction(value) {\n    return typeof value == 'function';\n  }\n  // fallback for older versions of Chrome and Safari\n  if (isFunction(/x/)) {\n    isFunction = function(value) {\n      return value instanceof Function || toString.call(value) == funcClass;\n    };\n  }\n\n  /**\n   * Checks if `value` is the language type of Object.\n   * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(1);\n   * // => false\n   */\n  function isObject(value) {\n    // check if the value is the ECMAScript language type of Object\n    // http://es5.github.com/#x8\n    // and avoid a V8 bug\n    // http://code.google.com/p/v8/issues/detail?id=2291\n    return value ? objectTypes[typeof value] : false;\n  }\n\n  /**\n   * Checks if `value` is `NaN`.\n   *\n   * Note: This is not the same as native `isNaN`, which will return `true` for\n   * `undefined` and other values. See http://es5.github.com/#x15.1.2.4.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is `NaN`, else `false`.\n   * @example\n   *\n   * _.isNaN(NaN);\n   * // => true\n   *\n   * _.isNaN(new Number(NaN));\n   * // => true\n   *\n   * isNaN(undefined);\n   * // => true\n   *\n   * _.isNaN(undefined);\n   * // => false\n   */\n  function isNaN(value) {\n    // `NaN` as a primitive is the only value that is not equal to itself\n    // (perform the [[Class]] check first to avoid errors with some host objects in IE)\n    return isNumber(value) && value != +value\n  }\n\n  /**\n   * Checks if `value` is `null`.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is `null`, else `false`.\n   * @example\n   *\n   * _.isNull(null);\n   * // => true\n   *\n   * _.isNull(undefined);\n   * // => false\n   */\n  function isNull(value) {\n    return value === null;\n  }\n\n  /**\n   * Checks if `value` is a number.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is a number, else `false`.\n   * @example\n   *\n   * _.isNumber(8.4 * 5);\n   * // => true\n   */\n  function isNumber(value) {\n    return typeof value == 'number' || toString.call(value) == numberClass;\n  }\n\n  /**\n   * Checks if a given `value` is an object created by the `Object` constructor.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if `value` is a plain object, else `false`.\n   * @example\n   *\n   * function Stooge(name, age) {\n   *   this.name = name;\n   *   this.age = age;\n   * }\n   *\n   * _.isPlainObject(new Stooge('moe', 40));\n   * // => false\n   *\n   * _.isPlainObject([1, 2, 3]);\n   * // => false\n   *\n   * _.isPlainObject({ 'name': 'moe', 'age': 40 });\n   * // => true\n   */\n  var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function(value) {\n    if (!(value && typeof value == 'object')) {\n      return false;\n    }\n    var valueOf = value.valueOf,\n        objProto = typeof valueOf == 'function' && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);\n\n    return objProto\n      ? value == objProto || (getPrototypeOf(value) == objProto && !isArguments(value))\n      : shimIsPlainObject(value);\n  };\n\n  /**\n   * Checks if `value` is a regular expression.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is a regular expression, else `false`.\n   * @example\n   *\n   * _.isRegExp(/moe/);\n   * // => true\n   */\n  function isRegExp(value) {\n    return value instanceof RegExp || toString.call(value) == regexpClass;\n  }\n\n  /**\n   * Checks if `value` is a string.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is a string, else `false`.\n   * @example\n   *\n   * _.isString('moe');\n   * // => true\n   */\n  function isString(value) {\n    return typeof value == 'string' || toString.call(value) == stringClass;\n  }\n\n  /**\n   * Checks if `value` is `undefined`.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is `undefined`, else `false`.\n   * @example\n   *\n   * _.isUndefined(void 0);\n   * // => true\n   */\n  function isUndefined(value) {\n    return typeof value == 'undefined';\n  }\n\n  /**\n   * Recursively merges own enumerable properties of the source object(s), that\n   * don't resolve to `undefined`, into the destination object. Subsequent sources\n   * will overwrite propery assignments of previous sources. If a `callback` function\n   * is passed, it will be executed to produce the merged values of the destination\n   * and source properties. If `callback` returns `undefined`, merging will be\n   * handled by the method instead. The `callback` is bound to `thisArg` and\n   * invoked with two arguments; (objectValue, sourceValue).\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The destination object.\n   * @param {Object} [source1, source2, ...] The source objects.\n   * @param {Function} [callback] The function to customize merging properties.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @param- {Object} [deepIndicator] Internally used to indicate that `stackA`\n   *  and `stackB` are arrays of traversed objects instead of source objects.\n   * @param- {Array} [stackA=[]] Internally used to track traversed source objects.\n   * @param- {Array} [stackB=[]] Internally used to associate values with their\n   *  source counterparts.\n   * @returns {Object} Returns the destination object.\n   * @example\n   *\n   * var names = {\n   *   'stooges': [\n   *     { 'name': 'moe' },\n   *     { 'name': 'larry' }\n   *   ]\n   * };\n   *\n   * var ages = {\n   *   'stooges': [\n   *     { 'age': 40 },\n   *     { 'age': 50 }\n   *   ]\n   * };\n   *\n   * _.merge(names, ages);\n   * // => { 'stooges': [{ 'name': 'moe', 'age': 40 }, { 'name': 'larry', 'age': 50 }] }\n   *\n   * var food = {\n   *   'fruits': ['apple'],\n   *   'vegetables': ['beet']\n   * };\n   *\n   * var otherFood = {\n   *   'fruits': ['banana'],\n   *   'vegetables': ['carrot']\n   * };\n   *\n   * _.merge(food, otherFood, function(a, b) {\n   *   return _.isArray(a) ? a.concat(b) : undefined;\n   * });\n   * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot] }\n   */\n  function merge(object, source, deepIndicator) {\n    var args = arguments,\n        index = 0,\n        length = 2;\n\n    if (!isObject(object)) {\n      return object;\n    }\n    if (deepIndicator === indicatorObject) {\n      var callback = args[3],\n          stackA = args[4],\n          stackB = args[5];\n    } else {\n      stackA = [];\n      stackB = [];\n\n      // allows working with `_.reduce` and `_.reduceRight` without\n      // using their `callback` arguments, `index|key` and `collection`\n      if (typeof deepIndicator != 'number') {\n        length = args.length;\n      }\n      if (length > 3 && typeof args[length - 2] == 'function') {\n        callback = createCallback(args[--length - 1], args[length--], 2);\n      } else if (length > 2 && typeof args[length - 1] == 'function') {\n        callback = args[--length];\n      }\n    }\n    while (++index < length) {\n      (isArray(args[index]) ? forEach : forOwn)(args[index], function(source, key) {\n        var found,\n            isArr,\n            result = source,\n            value = object[key];\n\n        if (source && ((isArr = isArray(source)) || isPlainObject(source))) {\n          // avoid merging previously merged cyclic sources\n          var stackLength = stackA.length;\n          while (stackLength--) {\n            if ((found = stackA[stackLength] == source)) {\n              value = stackB[stackLength];\n              break;\n            }\n          }\n          if (!found) {\n            value = isArr\n              ? (isArray(value) ? value : [])\n              : (isPlainObject(value) ? value : {});\n\n            if (callback) {\n              result = callback(value, source);\n              if (typeof result != 'undefined') {\n                value = result;\n              }\n            }\n            // add `source` and associated `value` to the stack of traversed objects\n            stackA.push(source);\n            stackB.push(value);\n\n            // recursively merge objects and arrays (susceptible to call stack limits)\n            if (!callback) {\n              value = merge(value, source, indicatorObject, callback, stackA, stackB);\n            }\n          }\n        }\n        else {\n          if (callback) {\n            result = callback(value, source);\n            if (typeof result == 'undefined') {\n              result = source;\n            }\n          }\n          if (typeof result != 'undefined') {\n            value = result;\n          }\n        }\n        object[key] = value;\n      });\n    }\n    return object;\n  }\n\n  /**\n   * Creates a shallow clone of `object` excluding the specified properties.\n   * Property names may be specified as individual arguments or as arrays of\n   * property names. If a `callback` function is passed, it will be executed\n   * for each property in the `object`, omitting the properties `callback`\n   * returns truthy for. The `callback` is bound to `thisArg` and invoked\n   * with three arguments; (value, key, object).\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The source object.\n   * @param {Function|String} callback|[prop1, prop2, ...] The properties to omit\n   *  or the function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Object} Returns an object without the omitted properties.\n   * @example\n   *\n   * _.omit({ 'name': 'moe', 'age': 40 }, 'age');\n   * // => { 'name': 'moe' }\n   *\n   * _.omit({ 'name': 'moe', 'age': 40 }, function(value) {\n   *   return typeof value == 'number';\n   * });\n   * // => { 'name': 'moe' }\n   */\n  function omit(object, callback, thisArg) {\n    var isFunc = typeof callback == 'function',\n        result = {};\n\n    if (isFunc) {\n      callback = createCallback(callback, thisArg);\n    } else {\n      var props = concat.apply(arrayRef, arguments);\n    }\n    forIn(object, function(value, key, object) {\n      if (isFunc\n            ? !callback(value, key, object)\n            : indexOf(props, key, 1) < 0\n          ) {\n        result[key] = value;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * Creates a two dimensional array of the given object's key-value pairs,\n   * i.e. `[[key1, value1], [key2, value2]]`.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The object to inspect.\n   * @returns {Array} Returns new array of key-value pairs.\n   * @example\n   *\n   * _.pairs({ 'moe': 30, 'larry': 40 });\n   * // => [['moe', 30], ['larry', 40]] (order is not guaranteed)\n   */\n  function pairs(object) {\n    var index = -1,\n        props = keys(object),\n        length = props.length,\n        result = Array(length);\n\n    while (++index < length) {\n      var key = props[index];\n      result[index] = [key, object[key]];\n    }\n    return result;\n  }\n\n  /**\n   * Creates a shallow clone of `object` composed of the specified properties.\n   * Property names may be specified as individual arguments or as arrays of property\n   * names. If `callback` is passed, it will be executed for each property in the\n   * `object`, picking the properties `callback` returns truthy for. The `callback`\n   * is bound to `thisArg` and invoked with three arguments; (value, key, object).\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The source object.\n   * @param {Array|Function|String} callback|[prop1, prop2, ...] The function called\n   *  per iteration or properties to pick, either as individual arguments or arrays.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Object} Returns an object composed of the picked properties.\n   * @example\n   *\n   * _.pick({ 'name': 'moe', '_userid': 'moe1' }, 'name');\n   * // => { 'name': 'moe' }\n   *\n   * _.pick({ 'name': 'moe', '_userid': 'moe1' }, function(value, key) {\n   *   return key.charAt(0) != '_';\n   * });\n   * // => { 'name': 'moe' }\n   */\n  function pick(object, callback, thisArg) {\n    var result = {};\n    if (typeof callback != 'function') {\n      var index = 0,\n          props = concat.apply(arrayRef, arguments),\n          length = isObject(object) ? props.length : 0;\n\n      while (++index < length) {\n        var key = props[index];\n        if (key in object) {\n          result[key] = object[key];\n        }\n      }\n    } else {\n      callback = createCallback(callback, thisArg);\n      forIn(object, function(value, key, object) {\n        if (callback(value, key, object)) {\n          result[key] = value;\n        }\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Creates an array composed of the own enumerable property values of `object`.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The object to inspect.\n   * @returns {Array} Returns a new array of property values.\n   * @example\n   *\n   * _.values({ 'one': 1, 'two': 2, 'three': 3 });\n   * // => [1, 2, 3]\n   */\n  function values(object) {\n    var index = -1,\n        props = keys(object),\n        length = props.length,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = object[props[index]];\n    }\n    return result;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Creates an array of elements from the specified indexes, or keys, of the\n   * `collection`. Indexes may be specified as individual arguments or as arrays\n   * of indexes.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Array|Number|String} [index1, index2, ...] The indexes of\n   *  `collection` to retrieve, either as individual arguments or arrays.\n   * @returns {Array} Returns a new array of elements corresponding to the\n   *  provided indexes.\n   * @example\n   *\n   * _.at(['a', 'b', 'c', 'd', 'e'], [0, 2, 4]);\n   * // => ['a', 'c', 'e']\n   *\n   * _.at(['moe', 'larry', 'curly'], 0, 2);\n   * // => ['moe', 'curly']\n   */\n  function at(collection) {\n    var index = -1,\n        props = concat.apply(arrayRef, slice(arguments, 1)),\n        length = props.length,\n        result = Array(length);\n\n    while(++index < length) {\n      result[index] = collection[props[index]];\n    }\n    return result;\n  }\n\n  /**\n   * Checks if a given `target` element is present in a `collection` using strict\n   * equality for comparisons, i.e. `===`. If `fromIndex` is negative, it is used\n   * as the offset from the end of the collection.\n   *\n   * @static\n   * @memberOf _\n   * @alias include\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Mixed} target The value to check for.\n   * @param {Number} [fromIndex=0] The index to search from.\n   * @returns {Boolean} Returns `true` if the `target` element is found, else `false`.\n   * @example\n   *\n   * _.contains([1, 2, 3], 1);\n   * // => true\n   *\n   * _.contains([1, 2, 3], 1, 2);\n   * // => false\n   *\n   * _.contains({ 'name': 'moe', 'age': 40 }, 'moe');\n   * // => true\n   *\n   * _.contains('curly', 'ur');\n   * // => true\n   */\n  function contains(collection, target, fromIndex) {\n    var index = -1,\n        length = collection ? collection.length : 0,\n        result = false;\n\n    fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex) || 0;\n    if (typeof length == 'number') {\n      result = (isString(collection)\n        ? collection.indexOf(target, fromIndex)\n        : indexOf(collection, target, fromIndex)\n      ) > -1;\n    } else {\n      each(collection, function(value) {\n        if (++index >= fromIndex) {\n          return !(result = value === target);\n        }\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Creates an object composed of keys returned from running each element of the\n   * `collection` through the given `callback`. The corresponding value of each key\n   * is the number of times the key was returned by the `callback`. The `callback`\n   * is bound to `thisArg` and invoked with three arguments; (value, index|key, collection).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Object} Returns the composed aggregate object.\n   * @example\n   *\n   * _.countBy([4.3, 6.1, 6.4], function(num) { return Math.floor(num); });\n   * // => { '4': 1, '6': 2 }\n   *\n   * _.countBy([4.3, 6.1, 6.4], function(num) { return this.floor(num); }, Math);\n   * // => { '4': 1, '6': 2 }\n   *\n   * _.countBy(['one', 'two', 'three'], 'length');\n   * // => { '3': 2, '5': 1 }\n   */\n  function countBy(collection, callback, thisArg) {\n    var result = {};\n    callback = createCallback(callback, thisArg);\n\n    forEach(collection, function(value, key, collection) {\n      key = callback(value, key, collection) + '';\n      (hasOwnProperty.call(result, key) ? result[key]++ : result[key] = 1);\n    });\n    return result;\n  }\n\n  /**\n   * Checks if the `callback` returns a truthy value for **all** elements of a\n   * `collection`. The `callback` is bound to `thisArg` and invoked with three\n   * arguments; (value, index|key, collection).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @alias all\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Boolean} Returns `true` if all elements pass the callback check,\n   *  else `false`.\n   * @example\n   *\n   * _.every([true, 1, null, 'yes'], Boolean);\n   * // => false\n   *\n   * var stooges = [\n   *   { 'name': 'moe', 'age': 40 },\n   *   { 'name': 'larry', 'age': 50 }\n   * ];\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.every(stooges, 'age');\n   * // => true\n   *\n   * // using \"_.where\" callback shorthand\n   * _.every(stooges, { 'age': 50 });\n   * // => false\n   */\n  function every(collection, callback, thisArg) {\n    var result = true;\n    callback = createCallback(callback, thisArg);\n\n    if (isArray(collection)) {\n      var index = -1,\n          length = collection.length;\n\n      while (++index < length) {\n        if (!(result = !!callback(collection[index], index, collection))) {\n          break;\n        }\n      }\n    } else {\n      each(collection, function(value, index, collection) {\n        return (result = !!callback(value, index, collection));\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Examines each element in a `collection`, returning an array of all elements\n   * the `callback` returns truthy for. The `callback` is bound to `thisArg` and\n   * invoked with three arguments; (value, index|key, collection).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @alias select\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array} Returns a new array of elements that passed the callback check.\n   * @example\n   *\n   * var evens = _.filter([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });\n   * // => [2, 4, 6]\n   *\n   * var food = [\n   *   { 'name': 'apple',  'organic': false, 'type': 'fruit' },\n   *   { 'name': 'carrot', 'organic': true,  'type': 'vegetable' }\n   * ];\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.filter(food, 'organic');\n   * // => [{ 'name': 'carrot', 'organic': true, 'type': 'vegetable' }]\n   *\n   * // using \"_.where\" callback shorthand\n   * _.filter(food, { 'type': 'fruit' });\n   * // => [{ 'name': 'apple', 'organic': false, 'type': 'fruit' }]\n   */\n  function filter(collection, callback, thisArg) {\n    var result = [];\n    callback = createCallback(callback, thisArg);\n\n    if (isArray(collection)) {\n      var index = -1,\n          length = collection.length;\n\n      while (++index < length) {\n        var value = collection[index];\n        if (callback(value, index, collection)) {\n          result.push(value);\n        }\n      }\n    } else {\n      each(collection, function(value, index, collection) {\n        if (callback(value, index, collection)) {\n          result.push(value);\n        }\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Examines each element in a `collection`, returning the first that the `callback`\n   * returns truthy for. The `callback` is bound to `thisArg` and invoked with three\n   * arguments; (value, index|key, collection).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @alias detect\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Mixed} Returns the element that passed the callback check,\n   *  else `undefined`.\n   * @example\n   *\n   * var even = _.find([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });\n   * // => 2\n   *\n   * var food = [\n   *   { 'name': 'apple',  'organic': false, 'type': 'fruit' },\n   *   { 'name': 'banana', 'organic': true,  'type': 'fruit' },\n   *   { 'name': 'beet',   'organic': false, 'type': 'vegetable' },\n   *   { 'name': 'carrot', 'organic': true,  'type': 'vegetable' }\n   * ];\n   *\n   * // using \"_.where\" callback shorthand\n   * var veggie = _.find(food, { 'type': 'vegetable' });\n   * // => { 'name': 'beet', 'organic': false, 'type': 'vegetable' }\n   *\n   * // using \"_.pluck\" callback shorthand\n   * var healthy = _.find(food, 'organic');\n   * // => { 'name': 'banana', 'organic': true, 'type': 'fruit' }\n   */\n  function find(collection, callback, thisArg) {\n    var result;\n    callback = createCallback(callback, thisArg);\n\n    forEach(collection, function(value, index, collection) {\n      if (callback(value, index, collection)) {\n        result = value;\n        return false;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * Iterates over a `collection`, executing the `callback` for each element in\n   * the `collection`. The `callback` is bound to `thisArg` and invoked with three\n   * arguments; (value, index|key, collection). Callbacks may exit iteration early\n   * by explicitly returning `false`.\n   *\n   * @static\n   * @memberOf _\n   * @alias each\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function} [callback=identity] The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array|Object|String} Returns `collection`.\n   * @example\n   *\n   * _([1, 2, 3]).forEach(alert).join(',');\n   * // => alerts each number and returns '1,2,3'\n   *\n   * _.forEach({ 'one': 1, 'two': 2, 'three': 3 }, alert);\n   * // => alerts each number value (order is not guaranteed)\n   */\n  function forEach(collection, callback, thisArg) {\n    if (callback && typeof thisArg == 'undefined' && isArray(collection)) {\n      var index = -1,\n          length = collection.length;\n\n      while (++index < length) {\n        if (callback(collection[index], index, collection) === false) {\n          break;\n        }\n      }\n    } else {\n      each(collection, callback, thisArg);\n    }\n    return collection;\n  }\n\n  /**\n   * Creates an object composed of keys returned from running each element of the\n   * `collection` through the `callback`. The corresponding value of each key is\n   * an array of elements passed to `callback` that returned the key. The `callback`\n   * is bound to `thisArg` and invoked with three arguments; (value, index|key, collection).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Object} Returns the composed aggregate object.\n   * @example\n   *\n   * _.groupBy([4.2, 6.1, 6.4], function(num) { return Math.floor(num); });\n   * // => { '4': [4.2], '6': [6.1, 6.4] }\n   *\n   * _.groupBy([4.2, 6.1, 6.4], function(num) { return this.floor(num); }, Math);\n   * // => { '4': [4.2], '6': [6.1, 6.4] }\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.groupBy(['one', 'two', 'three'], 'length');\n   * // => { '3': ['one', 'two'], '5': ['three'] }\n   */\n  function groupBy(collection, callback, thisArg) {\n    var result = {};\n    callback = createCallback(callback, thisArg);\n\n    forEach(collection, function(value, key, collection) {\n      key = callback(value, key, collection) + '';\n      (hasOwnProperty.call(result, key) ? result[key] : result[key] = []).push(value);\n    });\n    return result;\n  }\n\n  /**\n   * Invokes the method named by `methodName` on each element in the `collection`,\n   * returning an array of the results of each invoked method. Additional arguments\n   * will be passed to each invoked method. If `methodName` is a function, it will\n   * be invoked for, and `this` bound to, each element in the `collection`.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|String} methodName The name of the method to invoke or\n   *  the function invoked per iteration.\n   * @param {Mixed} [arg1, arg2, ...] Arguments to invoke the method with.\n   * @returns {Array} Returns a new array of the results of each invoked method.\n   * @example\n   *\n   * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');\n   * // => [[1, 5, 7], [1, 2, 3]]\n   *\n   * _.invoke([123, 456], String.prototype.split, '');\n   * // => [['1', '2', '3'], ['4', '5', '6']]\n   */\n  function invoke(collection, methodName) {\n    var args = slice(arguments, 2),\n        index = -1,\n        isFunc = typeof methodName == 'function',\n        length = collection ? collection.length : 0,\n        result = Array(typeof length == 'number' ? length : 0);\n\n    forEach(collection, function(value) {\n      result[++index] = (isFunc ? methodName : value[methodName]).apply(value, args);\n    });\n    return result;\n  }\n\n  /**\n   * Creates an array of values by running each element in the `collection`\n   * through the `callback`. The `callback` is bound to `thisArg` and invoked with\n   * three arguments; (value, index|key, collection).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @alias collect\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array} Returns a new array of the results of each `callback` execution.\n   * @example\n   *\n   * _.map([1, 2, 3], function(num) { return num * 3; });\n   * // => [3, 6, 9]\n   *\n   * _.map({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { return num * 3; });\n   * // => [3, 6, 9] (order is not guaranteed)\n   *\n   * var stooges = [\n   *   { 'name': 'moe', 'age': 40 },\n   *   { 'name': 'larry', 'age': 50 }\n   * ];\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.map(stooges, 'name');\n   * // => ['moe', 'larry']\n   */\n  function map(collection, callback, thisArg) {\n    var index = -1,\n        length = collection ? collection.length : 0,\n        result = Array(typeof length == 'number' ? length : 0);\n\n    callback = createCallback(callback, thisArg);\n    if (isArray(collection)) {\n      while (++index < length) {\n        result[index] = callback(collection[index], index, collection);\n      }\n    } else {\n      each(collection, function(value, key, collection) {\n        result[++index] = callback(value, key, collection);\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Retrieves the maximum value of an `array`. If `callback` is passed,\n   * it will be executed for each value in the `array` to generate the\n   * criterion by which the value is ranked. The `callback` is bound to\n   * `thisArg` and invoked with three arguments; (value, index, collection).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Mixed} Returns the maximum value.\n   * @example\n   *\n   * _.max([4, 2, 8, 6]);\n   * // => 8\n   *\n   * var stooges = [\n   *   { 'name': 'moe', 'age': 40 },\n   *   { 'name': 'larry', 'age': 50 }\n   * ];\n   *\n   * _.max(stooges, function(stooge) { return stooge.age; });\n   * // => { 'name': 'larry', 'age': 50 };\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.max(stooges, 'age');\n   * // => { 'name': 'larry', 'age': 50 };\n   */\n  function max(collection, callback, thisArg) {\n    var computed = -Infinity,\n        result = computed;\n\n    if (!callback && isArray(collection)) {\n      var index = -1,\n          length = collection.length;\n\n      while (++index < length) {\n        var value = collection[index];\n        if (value > result) {\n          result = value;\n        }\n      }\n    } else {\n      callback = !callback && isString(collection)\n        ? charAtCallback\n        : createCallback(callback, thisArg);\n\n      each(collection, function(value, index, collection) {\n        var current = callback(value, index, collection);\n        if (current > computed) {\n          computed = current;\n          result = value;\n        }\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Retrieves the minimum value of an `array`. If `callback` is passed,\n   * it will be executed for each value in the `array` to generate the\n   * criterion by which the value is ranked. The `callback` is bound to `thisArg`\n   * and invoked with three arguments; (value, index, collection).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Mixed} Returns the minimum value.\n   * @example\n   *\n   * _.min([4, 2, 8, 6]);\n   * // => 2\n   *\n   * var stooges = [\n   *   { 'name': 'moe', 'age': 40 },\n   *   { 'name': 'larry', 'age': 50 }\n   * ];\n   *\n   * _.min(stooges, function(stooge) { return stooge.age; });\n   * // => { 'name': 'moe', 'age': 40 };\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.min(stooges, 'age');\n   * // => { 'name': 'moe', 'age': 40 };\n   */\n  function min(collection, callback, thisArg) {\n    var computed = Infinity,\n        result = computed;\n\n    if (!callback && isArray(collection)) {\n      var index = -1,\n          length = collection.length;\n\n      while (++index < length) {\n        var value = collection[index];\n        if (value < result) {\n          result = value;\n        }\n      }\n    } else {\n      callback = !callback && isString(collection)\n        ? charAtCallback\n        : createCallback(callback, thisArg);\n\n      each(collection, function(value, index, collection) {\n        var current = callback(value, index, collection);\n        if (current < computed) {\n          computed = current;\n          result = value;\n        }\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Retrieves the value of a specified property from all elements in the `collection`.\n   *\n   * @static\n   * @memberOf _\n   * @type Function\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {String} property The property to pluck.\n   * @returns {Array} Returns a new array of property values.\n   * @example\n   *\n   * var stooges = [\n   *   { 'name': 'moe', 'age': 40 },\n   *   { 'name': 'larry', 'age': 50 }\n   * ];\n   *\n   * _.pluck(stooges, 'name');\n   * // => ['moe', 'larry']\n   */\n  var pluck = map;\n\n  /**\n   * Reduces a `collection` to a value that is the accumulated result of running\n   * each element in the `collection` through the `callback`, where each successive\n   * `callback` execution consumes the return value of the previous execution.\n   * If `accumulator` is not passed, the first element of the `collection` will be\n   * used as the initial `accumulator` value. The `callback` is bound to `thisArg`\n   * and invoked with four arguments; (accumulator, value, index|key, collection).\n   *\n   * @static\n   * @memberOf _\n   * @alias foldl, inject\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function} [callback=identity] The function called per iteration.\n   * @param {Mixed} [accumulator] Initial value of the accumulator.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Mixed} Returns the accumulated value.\n   * @example\n   *\n   * var sum = _.reduce([1, 2, 3], function(sum, num) {\n   *   return sum + num;\n   * });\n   * // => 6\n   *\n   * var mapped = _.reduce({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {\n   *   result[key] = num * 3;\n   *   return result;\n   * }, {});\n   * // => { 'a': 3, 'b': 6, 'c': 9 }\n   */\n  function reduce(collection, callback, accumulator, thisArg) {\n    var noaccum = arguments.length < 3;\n    callback = createCallback(callback, thisArg, 4);\n\n    if (isArray(collection)) {\n      var index = -1,\n          length = collection.length;\n\n      if (noaccum) {\n        accumulator = collection[++index];\n      }\n      while (++index < length) {\n        accumulator = callback(accumulator, collection[index], index, collection);\n      }\n    } else {\n      each(collection, function(value, index, collection) {\n        accumulator = noaccum\n          ? (noaccum = false, value)\n          : callback(accumulator, value, index, collection)\n      });\n    }\n    return accumulator;\n  }\n\n  /**\n   * This method is similar to `_.reduce`, except that it iterates over a\n   * `collection` from right to left.\n   *\n   * @static\n   * @memberOf _\n   * @alias foldr\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function} [callback=identity] The function called per iteration.\n   * @param {Mixed} [accumulator] Initial value of the accumulator.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Mixed} Returns the accumulated value.\n   * @example\n   *\n   * var list = [[0, 1], [2, 3], [4, 5]];\n   * var flat = _.reduceRight(list, function(a, b) { return a.concat(b); }, []);\n   * // => [4, 5, 2, 3, 0, 1]\n   */\n  function reduceRight(collection, callback, accumulator, thisArg) {\n    var iterable = collection,\n        length = collection ? collection.length : 0,\n        noaccum = arguments.length < 3;\n\n    if (typeof length != 'number') {\n      var props = keys(collection);\n      length = props.length;\n    }\n    callback = createCallback(callback, thisArg, 4);\n    forEach(collection, function(value, index, collection) {\n      index = props ? props[--length] : --length;\n      accumulator = noaccum\n        ? (noaccum = false, iterable[index])\n        : callback(accumulator, iterable[index], index, collection);\n    });\n    return accumulator;\n  }\n\n  /**\n   * The opposite of `_.filter`, this method returns the elements of a\n   * `collection` that `callback` does **not** return truthy for.\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array} Returns a new array of elements that did **not** pass the\n   *  callback check.\n   * @example\n   *\n   * var odds = _.reject([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });\n   * // => [1, 3, 5]\n   *\n   * var food = [\n   *   { 'name': 'apple',  'organic': false, 'type': 'fruit' },\n   *   { 'name': 'carrot', 'organic': true,  'type': 'vegetable' }\n   * ];\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.reject(food, 'organic');\n   * // => [{ 'name': 'apple', 'organic': false, 'type': 'fruit' }]\n   *\n   * // using \"_.where\" callback shorthand\n   * _.reject(food, { 'type': 'fruit' });\n   * // => [{ 'name': 'carrot', 'organic': true, 'type': 'vegetable' }]\n   */\n  function reject(collection, callback, thisArg) {\n    callback = createCallback(callback, thisArg);\n    return filter(collection, function(value, index, collection) {\n      return !callback(value, index, collection);\n    });\n  }\n\n  /**\n   * Creates an array of shuffled `array` values, using a version of the\n   * Fisher-Yates shuffle. See http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to shuffle.\n   * @returns {Array} Returns a new shuffled collection.\n   * @example\n   *\n   * _.shuffle([1, 2, 3, 4, 5, 6]);\n   * // => [4, 1, 6, 3, 5, 2]\n   */\n  function shuffle(collection) {\n    var index = -1,\n        length = collection ? collection.length : 0,\n        result = Array(typeof length == 'number' ? length : 0);\n\n    forEach(collection, function(value) {\n      var rand = floor(nativeRandom() * (++index + 1));\n      result[index] = result[rand];\n      result[rand] = value;\n    });\n    return result;\n  }\n\n  /**\n   * Gets the size of the `collection` by returning `collection.length` for arrays\n   * and array-like objects or the number of own enumerable properties for objects.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to inspect.\n   * @returns {Number} Returns `collection.length` or number of own enumerable properties.\n   * @example\n   *\n   * _.size([1, 2]);\n   * // => 2\n   *\n   * _.size({ 'one': 1, 'two': 2, 'three': 3 });\n   * // => 3\n   *\n   * _.size('curly');\n   * // => 5\n   */\n  function size(collection) {\n    var length = collection ? collection.length : 0;\n    return typeof length == 'number' ? length : keys(collection).length;\n  }\n\n  /**\n   * Checks if the `callback` returns a truthy value for **any** element of a\n   * `collection`. The function returns as soon as it finds passing value, and\n   * does not iterate over the entire `collection`. The `callback` is bound to\n   * `thisArg` and invoked with three arguments; (value, index|key, collection).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @alias any\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Boolean} Returns `true` if any element passes the callback check,\n   *  else `false`.\n   * @example\n   *\n   * _.some([null, 0, 'yes', false], Boolean);\n   * // => true\n   *\n   * var food = [\n   *   { 'name': 'apple',  'organic': false, 'type': 'fruit' },\n   *   { 'name': 'carrot', 'organic': true,  'type': 'vegetable' }\n   * ];\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.some(food, 'organic');\n   * // => true\n   *\n   * // using \"_.where\" callback shorthand\n   * _.some(food, { 'type': 'meat' });\n   * // => false\n   */\n  function some(collection, callback, thisArg) {\n    var result;\n    callback = createCallback(callback, thisArg);\n\n    if (isArray(collection)) {\n      var index = -1,\n          length = collection.length;\n\n      while (++index < length) {\n        if ((result = callback(collection[index], index, collection))) {\n          break;\n        }\n      }\n    } else {\n      each(collection, function(value, index, collection) {\n        return !(result = callback(value, index, collection));\n      });\n    }\n    return !!result;\n  }\n\n  /**\n   * Creates an array of elements, sorted in ascending order by the results of\n   * running each element in the `collection` through the `callback`. This method\n   * performs a stable sort, that is, it will preserve the original sort order of\n   * equal elements. The `callback` is bound to `thisArg` and invoked with three\n   * arguments; (value, index|key, collection).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array} Returns a new array of sorted elements.\n   * @example\n   *\n   * _.sortBy([1, 2, 3], function(num) { return Math.sin(num); });\n   * // => [3, 1, 2]\n   *\n   * _.sortBy([1, 2, 3], function(num) { return this.sin(num); }, Math);\n   * // => [3, 1, 2]\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.sortBy(['banana', 'strawberry', 'apple'], 'length');\n   * // => ['apple', 'banana', 'strawberry']\n   */\n  function sortBy(collection, callback, thisArg) {\n    var index = -1,\n        length = collection ? collection.length : 0,\n        result = Array(typeof length == 'number' ? length : 0);\n\n    callback = createCallback(callback, thisArg);\n    forEach(collection, function(value, key, collection) {\n      result[++index] = {\n        'criteria': callback(value, key, collection),\n        'index': index,\n        'value': value\n      };\n    });\n\n    length = result.length;\n    result.sort(compareAscending);\n    while (length--) {\n      result[length] = result[length].value;\n    }\n    return result;\n  }\n\n  /**\n   * Converts the `collection` to an array.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to convert.\n   * @returns {Array} Returns the new converted array.\n   * @example\n   *\n   * (function() { return _.toArray(arguments).slice(1); })(1, 2, 3, 4);\n   * // => [2, 3, 4]\n   */\n  function toArray(collection) {\n    if (collection && typeof collection.length == 'number') {\n      return  slice(collection);\n    }\n    return values(collection);\n  }\n\n  /**\n   * Examines each element in a `collection`, returning an array of all elements\n   * that have the given `properties`. When checking `properties`, this method\n   * performs a deep comparison between values to determine if they are equivalent\n   * to each other.\n   *\n   * @static\n   * @memberOf _\n   * @type Function\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Object} properties The object of property values to filter by.\n   * @returns {Array} Returns a new array of elements that have the given `properties`.\n   * @example\n   *\n   * var stooges = [\n   *   { 'name': 'moe', 'age': 40 },\n   *   { 'name': 'larry', 'age': 50 }\n   * ];\n   *\n   * _.where(stooges, { 'age': 40 });\n   * // => [{ 'name': 'moe', 'age': 40 }]\n   */\n  var where = filter;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Creates an array with all falsey values of `array` removed. The values\n   * `false`, `null`, `0`, `\"\"`, `undefined` and `NaN` are all falsey.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to compact.\n   * @returns {Array} Returns a new filtered array.\n   * @example\n   *\n   * _.compact([0, 1, false, 2, '', 3]);\n   * // => [1, 2, 3]\n   */\n  function compact(array) {\n    var index = -1,\n        length = array ? array.length : 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (value) {\n        result.push(value);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Creates an array of `array` elements not present in the other arrays\n   * using strict equality for comparisons, i.e. `===`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to process.\n   * @param {Array} [array1, array2, ...] Arrays to check.\n   * @returns {Array} Returns a new array of `array` elements not present in the\n   *  other arrays.\n   * @example\n   *\n   * _.difference([1, 2, 3, 4, 5], [5, 2, 10]);\n   * // => [1, 3, 4]\n   */\n  function difference(array) {\n    var index = -1,\n        length = array ? array.length : 0,\n        flattened = concat.apply(arrayRef, arguments),\n        contains = cachedContains(flattened, length),\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (!contains(value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Gets the first element of the `array`. If a number `n` is passed, the first\n   * `n` elements of the `array` are returned. If a `callback` function is passed,\n   * the first elements the `callback` returns truthy for are returned. The `callback`\n   * is bound to `thisArg` and invoked with three arguments; (value, index, array).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @alias head, take\n   * @category Arrays\n   * @param {Array} array The array to query.\n   * @param {Function|Object|Number|String} [callback|n] The function called\n   *  per element or the number of elements to return. If a property name or\n   *  object is passed, it will be used to create a \"_.pluck\" or \"_.where\"\n   *  style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Mixed} Returns the first element(s) of `array`.\n   * @example\n   *\n   * _.first([1, 2, 3]);\n   * // => 1\n   *\n   * _.first([1, 2, 3], 2);\n   * // => [1, 2]\n   *\n   * _.first([1, 2, 3], function(num) {\n   *   return num < 3;\n   * });\n   * // => [1, 2]\n   *\n   * var food = [\n   *   { 'name': 'banana', 'organic': true },\n   *   { 'name': 'beet',   'organic': false },\n   * ];\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.first(food, 'organic');\n   * // => [{ 'name': 'banana', 'organic': true }]\n   *\n   * var food = [\n   *   { 'name': 'apple',  'type': 'fruit' },\n   *   { 'name': 'banana', 'type': 'fruit' },\n   *   { 'name': 'beet',   'type': 'vegetable' }\n   * ];\n   *\n   * // using \"_.where\" callback shorthand\n   * _.first(food, { 'type': 'fruit' });\n   * // => [{ 'name': 'apple', 'type': 'fruit' }, { 'name': 'banana', 'type': 'fruit' }]\n   */\n  function first(array, callback, thisArg) {\n    if (array) {\n      var n = 0,\n          length = array.length;\n\n      if (typeof callback != 'number' && callback != null) {\n        var index = -1;\n        callback = createCallback(callback, thisArg);\n        while (++index < length && callback(array[index], index, array)) {\n          n++;\n        }\n      } else {\n        n = callback;\n        if (n == null || thisArg) {\n          return array[0];\n        }\n      }\n      return slice(array, 0, nativeMin(nativeMax(0, n), length));\n    }\n  }\n\n  /**\n   * Flattens a nested array (the nesting can be to any depth). If `shallow` is\n   * truthy, `array` will only be flattened a single level.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to compact.\n   * @param {Boolean} shallow A flag to indicate only flattening a single level.\n   * @returns {Array} Returns a new flattened array.\n   * @example\n   *\n   * _.flatten([1, [2], [3, [[4]]]]);\n   * // => [1, 2, 3, 4];\n   *\n   * _.flatten([1, [2], [3, [[4]]]], true);\n   * // => [1, 2, 3, [[4]]];\n   */\n  function flatten(array, shallow) {\n    var index = -1,\n        length = array ? array.length : 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n\n      // recursively flatten arrays (susceptible to call stack limits)\n      if (isArray(value)) {\n        push.apply(result, shallow ? value : flatten(value));\n      } else {\n        result.push(value);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Gets the index at which the first occurrence of `value` is found using\n   * strict equality for comparisons, i.e. `===`. If the `array` is already\n   * sorted, passing `true` for `fromIndex` will run a faster binary search.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to search.\n   * @param {Mixed} value The value to search for.\n   * @param {Boolean|Number} [fromIndex=0] The index to search from or `true` to\n   *  perform a binary search on a sorted `array`.\n   * @returns {Number} Returns the index of the matched value or `-1`.\n   * @example\n   *\n   * _.indexOf([1, 2, 3, 1, 2, 3], 2);\n   * // => 1\n   *\n   * _.indexOf([1, 2, 3, 1, 2, 3], 2, 3);\n   * // => 4\n   *\n   * _.indexOf([1, 1, 2, 2, 3, 3], 2, true);\n   * // => 2\n   */\n  function indexOf(array, value, fromIndex) {\n    var index = -1,\n        length = array ? array.length : 0;\n\n    if (typeof fromIndex == 'number') {\n      index = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex || 0) - 1;\n    } else if (fromIndex) {\n      index = sortedIndex(array, value);\n      return array[index] === value ? index : -1;\n    }\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Gets all but the last element of `array`. If a number `n` is passed, the\n   * last `n` elements are excluded from the result. If a `callback` function\n   * is passed, the last elements the `callback` returns truthy for are excluded\n   * from the result. The `callback` is bound to `thisArg` and invoked with three\n   * arguments; (value, index, array).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to query.\n   * @param {Function|Object|Number|String} [callback|n=1] The function called\n   *  per element or the number of elements to exclude. If a property name or\n   *  object is passed, it will be used to create a \"_.pluck\" or \"_.where\"\n   *  style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array} Returns a slice of `array`.\n   * @example\n   *\n   * _.initial([1, 2, 3]);\n   * // => [1, 2]\n   *\n   * _.initial([1, 2, 3], 2);\n   * // => [1]\n   *\n   * _.initial([1, 2, 3], function(num) {\n   *   return num > 1;\n   * });\n   * // => [1]\n   *\n   * var food = [\n   *   { 'name': 'beet',   'organic': false },\n   *   { 'name': 'carrot', 'organic': true }\n   * ];\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.initial(food, 'organic');\n   * // => [{ 'name': 'beet',   'organic': false }]\n   *\n   * var food = [\n   *   { 'name': 'banana', 'type': 'fruit' },\n   *   { 'name': 'beet',   'type': 'vegetable' },\n   *   { 'name': 'carrot', 'type': 'vegetable' }\n   * ];\n   *\n   * // using \"_.where\" callback shorthand\n   * _.initial(food, { 'type': 'vegetable' });\n   * // => [{ 'name': 'banana', 'type': 'fruit' }]\n   */\n  function initial(array, callback, thisArg) {\n    if (!array) {\n      return [];\n    }\n    var n = 0,\n        length = array.length;\n\n    if (typeof callback != 'number' && callback != null) {\n      var index = length;\n      callback = createCallback(callback, thisArg);\n      while (index-- && callback(array[index], index, array)) {\n        n++;\n      }\n    } else {\n      n = (callback == null || thisArg) ? 1 : callback || n;\n    }\n    return slice(array, 0, nativeMin(nativeMax(0, length - n), length));\n  }\n\n  /**\n   * Computes the intersection of all the passed-in arrays using strict equality\n   * for comparisons, i.e. `===`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} [array1, array2, ...] Arrays to process.\n   * @returns {Array} Returns a new array of unique elements that are present\n   *  in **all** of the arrays.\n   * @example\n   *\n   * _.intersection([1, 2, 3], [101, 2, 1, 10], [2, 1]);\n   * // => [1, 2]\n   */\n  function intersection(array) {\n    var args = arguments,\n        argsLength = args.length,\n        cache = { '0': {} },\n        index = -1,\n        length = array ? array.length : 0,\n        isLarge = length >= 100,\n        result = [],\n        seen = result;\n\n    outer:\n    while (++index < length) {\n      var value = array[index];\n      if (isLarge) {\n        var key = value + '';\n        var inited = hasOwnProperty.call(cache[0], key)\n          ? !(seen = cache[0][key])\n          : (seen = cache[0][key] = []);\n      }\n      if (inited || indexOf(seen, value) < 0) {\n        if (isLarge) {\n          seen.push(value);\n        }\n        var argsIndex = argsLength;\n        while (--argsIndex) {\n          if (!(cache[argsIndex] || (cache[argsIndex] = cachedContains(args[argsIndex], 0, 100)))(value)) {\n            continue outer;\n          }\n        }\n        result.push(value);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Gets the last element of the `array`. If a number `n` is passed, the last\n   * `n` elements of the `array` are returned. If a `callback` function is passed,\n   * the last elements the `callback` returns truthy for are returned. The `callback`\n   * is bound to `thisArg` and invoked with three arguments; (value, index, array).\n   *\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to query.\n   * @param {Function|Object|Number|String} [callback|n] The function called\n   *  per element or the number of elements to return. If a property name or\n   *  object is passed, it will be used to create a \"_.pluck\" or \"_.where\"\n   *  style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Mixed} Returns the last element(s) of `array`.\n   * @example\n   *\n   * _.last([1, 2, 3]);\n   * // => 3\n   *\n   * _.last([1, 2, 3], 2);\n   * // => [2, 3]\n   *\n   * _.last([1, 2, 3], function(num) {\n   *   return num > 1;\n   * });\n   * // => [2, 3]\n   *\n   * var food = [\n   *   { 'name': 'beet',   'organic': false },\n   *   { 'name': 'carrot', 'organic': true }\n   * ];\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.last(food, 'organic');\n   * // => [{ 'name': 'carrot', 'organic': true }]\n   *\n   * var food = [\n   *   { 'name': 'banana', 'type': 'fruit' },\n   *   { 'name': 'beet',   'type': 'vegetable' },\n   *   { 'name': 'carrot', 'type': 'vegetable' }\n   * ];\n   *\n   * // using \"_.where\" callback shorthand\n   * _.last(food, { 'type': 'vegetable' });\n   * // => [{ 'name': 'beet', 'type': 'vegetable' }, { 'name': 'carrot', 'type': 'vegetable' }]\n   */\n  function last(array, callback, thisArg) {\n    if (array) {\n      var n = 0,\n          length = array.length;\n\n      if (typeof callback != 'number' && callback != null) {\n        var index = length;\n        callback = createCallback(callback, thisArg);\n        while (index-- && callback(array[index], index, array)) {\n          n++;\n        }\n      } else {\n        n = callback;\n        if (n == null || thisArg) {\n          return array[length - 1];\n        }\n      }\n      return slice(array, nativeMax(0, length - n));\n    }\n  }\n\n  /**\n   * Gets the index at which the last occurrence of `value` is found using strict\n   * equality for comparisons, i.e. `===`. If `fromIndex` is negative, it is used\n   * as the offset from the end of the collection.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to search.\n   * @param {Mixed} value The value to search for.\n   * @param {Number} [fromIndex=array.length-1] The index to search from.\n   * @returns {Number} Returns the index of the matched value or `-1`.\n   * @example\n   *\n   * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2);\n   * // => 4\n   *\n   * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2, 3);\n   * // => 1\n   */\n  function lastIndexOf(array, value, fromIndex) {\n    var index = array ? array.length : 0;\n    if (typeof fromIndex == 'number') {\n      index = (fromIndex < 0 ? nativeMax(0, index + fromIndex) : nativeMin(fromIndex, index - 1)) + 1;\n    }\n    while (index--) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Creates an object composed from arrays of `keys` and `values`. Pass either\n   * a single two dimensional array, i.e. `[[key1, value1], [key2, value2]]`, or\n   * two arrays, one of `keys` and one of corresponding `values`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} keys The array of keys.\n   * @param {Array} [values=[]] The array of values.\n   * @returns {Object} Returns an object composed of the given keys and\n   *  corresponding values.\n   * @example\n   *\n   * _.object(['moe', 'larry'], [30, 40]);\n   * // => { 'moe': 30, 'larry': 40 }\n   */\n  function object(keys, values) {\n    var index = -1,\n        length = keys ? keys.length : 0,\n        result = {};\n\n    while (++index < length) {\n      var key = keys[index];\n      if (values) {\n        result[key] = values[index];\n      } else {\n        result[key[0]] = key[1];\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Creates an array of numbers (positive and/or negative) progressing from\n   * `start` up to but not including `end`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Number} [start=0] The start of the range.\n   * @param {Number} end The end of the range.\n   * @param {Number} [step=1] The value to increment or descrement by.\n   * @returns {Array} Returns a new range array.\n   * @example\n   *\n   * _.range(10);\n   * // => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n   *\n   * _.range(1, 11);\n   * // => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n   *\n   * _.range(0, 30, 5);\n   * // => [0, 5, 10, 15, 20, 25]\n   *\n   * _.range(0, -10, -1);\n   * // => [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]\n   *\n   * _.range(0);\n   * // => []\n   */\n  function range(start, end, step) {\n    start = +start || 0;\n    step = +step || 1;\n\n    if (end == null) {\n      end = start;\n      start = 0;\n    }\n    // use `Array(length)` so V8 will avoid the slower \"dictionary\" mode\n    // http://youtu.be/XAqIpGU8ZZk#t=17m25s\n    var index = -1,\n        length = nativeMax(0, ceil((end - start) / step)),\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = start;\n      start += step;\n    }\n    return result;\n  }\n\n  /**\n   * The opposite of `_.initial`, this method gets all but the first value of `array`.\n   * If a number `n` is passed, the first `n` values are excluded from the result.\n   * If a `callback` function is passed, the first elements the `callback` returns\n   * truthy for are excluded from the result. The `callback` is bound to `thisArg`\n   * and invoked with three arguments; (value, index, array).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @alias drop, tail\n   * @category Arrays\n   * @param {Array} array The array to query.\n   * @param {Function|Object|Number|String} [callback|n=1] The function called\n   *  per element or the number of elements to exclude. If a property name or\n   *  object is passed, it will be used to create a \"_.pluck\" or \"_.where\"\n   *  style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array} Returns a slice of `array`.\n   * @example\n   *\n   * _.rest([1, 2, 3]);\n   * // => [2, 3]\n   *\n   * _.rest([1, 2, 3], 2);\n   * // => [3]\n   *\n   * _.rest([1, 2, 3], function(num) {\n   *   return num < 3;\n   * });\n   * // => [3]\n   *\n   * var food = [\n   *   { 'name': 'banana', 'organic': true },\n   *   { 'name': 'beet',   'organic': false },\n   * ];\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.rest(food, 'organic');\n   * // => [{ 'name': 'beet', 'organic': false }]\n   *\n   * var food = [\n   *   { 'name': 'apple',  'type': 'fruit' },\n   *   { 'name': 'banana', 'type': 'fruit' },\n   *   { 'name': 'beet',   'type': 'vegetable' }\n   * ];\n   *\n   * // using \"_.where\" callback shorthand\n   * _.rest(food, { 'type': 'fruit' });\n   * // => [{ 'name': 'beet', 'type': 'vegetable' }]\n   */\n  function rest(array, callback, thisArg) {\n    if (typeof callback != 'number' && callback != null) {\n      var n = 0,\n          index = -1,\n          length = array ? array.length : 0;\n\n      callback = createCallback(callback, thisArg);\n      while (++index < length && callback(array[index], index, array)) {\n        n++;\n      }\n    } else {\n      n = (callback == null || thisArg) ? 1 : nativeMax(0, callback);\n    }\n    return slice(array, n);\n  }\n\n  /**\n   * Uses a binary search to determine the smallest index at which the `value`\n   * should be inserted into `array` in order to maintain the sort order of the\n   * sorted `array`. If `callback` is passed, it will be executed for `value` and\n   * each element in `array` to compute their sort ranking. The `callback` is\n   * bound to `thisArg` and invoked with one argument; (value).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to iterate over.\n   * @param {Mixed} value The value to evaluate.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Number} Returns the index at which the value should be inserted\n   *  into `array`.\n   * @example\n   *\n   * _.sortedIndex([20, 30, 50], 40);\n   * // => 2\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.sortedIndex([{ 'x': 20 }, { 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');\n   * // => 2\n   *\n   * var dict = {\n   *   'wordToNumber': { 'twenty': 20, 'thirty': 30, 'fourty': 40, 'fifty': 50 }\n   * };\n   *\n   * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {\n   *   return dict.wordToNumber[word];\n   * });\n   * // => 2\n   *\n   * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {\n   *   return this.wordToNumber[word];\n   * }, dict);\n   * // => 2\n   */\n  function sortedIndex(array, value, callback, thisArg) {\n    var low = 0,\n        high = array ? array.length : low;\n\n    // explicitly reference `identity` for better inlining in Firefox\n    callback = callback ? createCallback(callback, thisArg, 1) : identity;\n    value = callback(value);\n\n    while (low < high) {\n      var mid = (low + high) >>> 1;\n      callback(array[mid]) < value\n        ? low = mid + 1\n        : high = mid;\n    }\n    return low;\n  }\n\n  /**\n   * Computes the union of the passed-in arrays using strict equality for\n   * comparisons, i.e. `===`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} [array1, array2, ...] Arrays to process.\n   * @returns {Array} Returns a new array of unique values, in order, that are\n   *  present in one or more of the arrays.\n   * @example\n   *\n   * _.union([1, 2, 3], [101, 2, 1, 10], [2, 1]);\n   * // => [1, 2, 3, 101, 10]\n   */\n  function union() {\n    return uniq(concat.apply(arrayRef, arguments));\n  }\n\n  /**\n   * Creates a duplicate-value-free version of the `array` using strict equality\n   * for comparisons, i.e. `===`. If the `array` is already sorted, passing `true`\n   * for `isSorted` will run a faster algorithm. If `callback` is passed, each\n   * element of `array` is passed through a callback` before uniqueness is computed.\n   * The `callback` is bound to `thisArg` and invoked with three arguments; (value, index, array).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @alias unique\n   * @category Arrays\n   * @param {Array} array The array to process.\n   * @param {Boolean} [isSorted=false] A flag to indicate that the `array` is already sorted.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array} Returns a duplicate-value-free array.\n   * @example\n   *\n   * _.uniq([1, 2, 1, 3, 1]);\n   * // => [1, 2, 3]\n   *\n   * _.uniq([1, 1, 2, 2, 3], true);\n   * // => [1, 2, 3]\n   *\n   * _.uniq([1, 2, 1.5, 3, 2.5], function(num) { return Math.floor(num); });\n   * // => [1, 2, 3]\n   *\n   * _.uniq([1, 2, 1.5, 3, 2.5], function(num) { return this.floor(num); }, Math);\n   * // => [1, 2, 3]\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n   * // => [{ 'x': 1 }, { 'x': 2 }]\n   */\n  function uniq(array, isSorted, callback, thisArg) {\n    var index = -1,\n        length = array ? array.length : 0,\n        result = [],\n        seen = result;\n\n    // juggle arguments\n    if (typeof isSorted == 'function') {\n      thisArg = callback;\n      callback = isSorted;\n      isSorted = false;\n    }\n    // init value cache for large arrays\n    var isLarge = !isSorted && length >= 75;\n    if (isLarge) {\n      var cache = {};\n    }\n    if (callback) {\n      seen = [];\n      callback = createCallback(callback, thisArg);\n    }\n    while (++index < length) {\n      var value = array[index],\n          computed = callback ? callback(value, index, array) : value;\n\n      if (isLarge) {\n        var key = computed + '';\n        var inited = hasOwnProperty.call(cache, key)\n          ? !(seen = cache[key])\n          : (seen = cache[key] = []);\n      }\n      if (isSorted\n            ? !index || seen[seen.length - 1] !== computed\n            : inited || indexOf(seen, computed) < 0\n          ) {\n        if (callback || isLarge) {\n          seen.push(computed);\n        }\n        result.push(value);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Creates an array with all occurrences of the passed values removed using\n   * strict equality for comparisons, i.e. `===`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to filter.\n   * @param {Mixed} [value1, value2, ...] Values to remove.\n   * @returns {Array} Returns a new filtered array.\n   * @example\n   *\n   * _.without([1, 2, 1, 0, 3, 1, 4], 0, 1);\n   * // => [2, 3, 4]\n   */\n  function without(array) {\n    var index = -1,\n        length = array ? array.length : 0,\n        contains = cachedContains(arguments, 1),\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (!contains(value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Groups the elements of each array at their corresponding indexes. Useful for\n   * separate data sources that are coordinated through matching array indexes.\n   * For a matrix of nested arrays, `_.zip.apply(...)` can transpose the matrix\n   * in a similar fashion.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} [array1, array2, ...] Arrays to process.\n   * @returns {Array} Returns a new array of grouped elements.\n   * @example\n   *\n   * _.zip(['moe', 'larry'], [30, 40], [true, false]);\n   * // => [['moe', 30, true], ['larry', 40, false]]\n   */\n  function zip(array) {\n    var index = -1,\n        length = array ? max(pluck(arguments, 'length')) : 0,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = pluck(arguments, index);\n    }\n    return result;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Creates a function that is restricted to executing `func` only after it is\n   * called `n` times. The `func` is executed with the `this` binding of the\n   * created function.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Number} n The number of times the function must be called before\n   * it is executed.\n   * @param {Function} func The function to restrict.\n   * @returns {Function} Returns the new restricted function.\n   * @example\n   *\n   * var renderNotes = _.after(notes.length, render);\n   * _.forEach(notes, function(note) {\n   *   note.asyncSave({ 'success': renderNotes });\n   * });\n   * // `renderNotes` is run once, after all notes have saved\n   */\n  function after(n, func) {\n    if (n < 1) {\n      return func();\n    }\n    return function() {\n      if (--n < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  }\n\n  /**\n   * Creates a function that, when called, invokes `func` with the `this`\n   * binding of `thisArg` and prepends any additional `bind` arguments to those\n   * passed to the bound function.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to bind.\n   * @param {Mixed} [thisArg] The `this` binding of `func`.\n   * @param {Mixed} [arg1, arg2, ...] Arguments to be partially applied.\n   * @returns {Function} Returns the new bound function.\n   * @example\n   *\n   * var func = function(greeting) {\n   *   return greeting + ' ' + this.name;\n   * };\n   *\n   * func = _.bind(func, { 'name': 'moe' }, 'hi');\n   * func();\n   * // => 'hi moe'\n   */\n  function bind(func, thisArg) {\n    // use `Function#bind` if it exists and is fast\n    // (in V8 `Function#bind` is slower except when partially applied)\n    return isBindFast || (nativeBind && arguments.length > 2)\n      ? nativeBind.call.apply(nativeBind, arguments)\n      : createBound(func, thisArg, slice(arguments, 2));\n  }\n\n  /**\n   * Binds methods on `object` to `object`, overwriting the existing method.\n   * Method names may be specified as individual arguments or as arrays of method\n   * names. If no method names are provided, all the function properties of `object`\n   * will be bound.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Object} object The object to bind and assign the bound methods to.\n   * @param {String} [methodName1, methodName2, ...] Method names on the object to bind.\n   * @returns {Object} Returns `object`.\n   * @example\n   *\n   * var view = {\n   *  'label': 'docs',\n   *  'onClick': function() { alert('clicked ' + this.label); }\n   * };\n   *\n   * _.bindAll(view);\n   * jQuery('#docs').on('click', view.onClick);\n   * // => alerts 'clicked docs', when the button is clicked\n   */\n  function bindAll(object) {\n    var funcs = concat.apply(arrayRef, arguments),\n        index = funcs.length > 1 ? 0 : (funcs = functions(object), -1),\n        length = funcs.length;\n\n    while (++index < length) {\n      var key = funcs[index];\n      object[key] = bind(object[key], object);\n    }\n    return object;\n  }\n\n  /**\n   * Creates a function that, when called, invokes the method at `object[key]`\n   * and prepends any additional `bindKey` arguments to those passed to the bound\n   * function. This method differs from `_.bind` by allowing bound functions to\n   * reference methods that will be redefined or don't yet exist.\n   * See http://michaux.ca/articles/lazy-function-definition-pattern.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Object} object The object the method belongs to.\n   * @param {String} key The key of the method.\n   * @param {Mixed} [arg1, arg2, ...] Arguments to be partially applied.\n   * @returns {Function} Returns the new bound function.\n   * @example\n   *\n   * var object = {\n   *   'name': 'moe',\n   *   'greet': function(greeting) {\n   *     return greeting + ' ' + this.name;\n   *   }\n   * };\n   *\n   * var func = _.bindKey(object, 'greet', 'hi');\n   * func();\n   * // => 'hi moe'\n   *\n   * object.greet = function(greeting) {\n   *   return greeting + ', ' + this.name + '!';\n   * };\n   *\n   * func();\n   * // => 'hi, moe!'\n   */\n  function bindKey(object, key) {\n    return createBound(object, key, slice(arguments, 2));\n  }\n\n  /**\n   * Creates a function that is the composition of the passed functions,\n   * where each function consumes the return value of the function that follows.\n   * For example, composing the functions `f()`, `g()`, and `h()` produces `f(g(h()))`.\n   * Each function is executed with the `this` binding of the composed function.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} [func1, func2, ...] Functions to compose.\n   * @returns {Function} Returns the new composed function.\n   * @example\n   *\n   * var greet = function(name) { return 'hi ' + name; };\n   * var exclaim = function(statement) { return statement + '!'; };\n   * var welcome = _.compose(exclaim, greet);\n   * welcome('moe');\n   * // => 'hi moe!'\n   */\n  function compose() {\n    var funcs = arguments;\n    return function() {\n      var args = arguments,\n          length = funcs.length;\n\n      while (length--) {\n        args = [funcs[length].apply(this, args)];\n      }\n      return args[0];\n    };\n  }\n\n  /**\n   * Creates a function that will delay the execution of `func` until after\n   * `wait` milliseconds have elapsed since the last time it was invoked. Pass\n   * `true` for `immediate` to cause debounce to invoke `func` on the leading,\n   * instead of the trailing, edge of the `wait` timeout. Subsequent calls to\n   * the debounced function will return the result of the last `func` call.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to debounce.\n   * @param {Number} wait The number of milliseconds to delay.\n   * @param {Boolean} immediate A flag to indicate execution is on the leading\n   *  edge of the timeout.\n   * @returns {Function} Returns the new debounced function.\n   * @example\n   *\n   * var lazyLayout = _.debounce(calculateLayout, 300);\n   * jQuery(window).on('resize', lazyLayout);\n   */\n  function debounce(func, wait, immediate) {\n    var args,\n        result,\n        thisArg,\n        timeoutId;\n\n    function delayed() {\n      timeoutId = null;\n      if (!immediate) {\n        result = func.apply(thisArg, args);\n      }\n    }\n    return function() {\n      var isImmediate = immediate && !timeoutId;\n      args = arguments;\n      thisArg = this;\n\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(delayed, wait);\n\n      if (isImmediate) {\n        result = func.apply(thisArg, args);\n      }\n      return result;\n    };\n  }\n\n  /**\n   * Executes the `func` function after `wait` milliseconds. Additional arguments\n   * will be passed to `func` when it is invoked.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to delay.\n   * @param {Number} wait The number of milliseconds to delay execution.\n   * @param {Mixed} [arg1, arg2, ...] Arguments to invoke the function with.\n   * @returns {Number} Returns the `setTimeout` timeout id.\n   * @example\n   *\n   * var log = _.bind(console.log, console);\n   * _.delay(log, 1000, 'logged later');\n   * // => 'logged later' (Appears after one second.)\n   */\n  function delay(func, wait) {\n    var args = slice(arguments, 2);\n    return setTimeout(function() { func.apply(undefined, args); }, wait);\n  }\n\n  /**\n   * Defers executing the `func` function until the current call stack has cleared.\n   * Additional arguments will be passed to `func` when it is invoked.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to defer.\n   * @param {Mixed} [arg1, arg2, ...] Arguments to invoke the function with.\n   * @returns {Number} Returns the `setTimeout` timeout id.\n   * @example\n   *\n   * _.defer(function() { alert('deferred'); });\n   * // returns from the function before `alert` is called\n   */\n  function defer(func) {\n    var args = slice(arguments, 1);\n    return setTimeout(function() { func.apply(undefined, args); }, 1);\n  }\n  // use `setImmediate` if it's available in Node.js\n  if (isV8 && freeModule && typeof setImmediate == 'function') {\n    defer = bind(setImmediate, window);\n  }\n\n  /**\n   * Creates a function that memoizes the result of `func`. If `resolver` is\n   * passed, it will be used to determine the cache key for storing the result\n   * based on the arguments passed to the memoized function. By default, the first\n   * argument passed to the memoized function is used as the cache key. The `func`\n   * is executed with the `this` binding of the memoized function.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to have its output memoized.\n   * @param {Function} [resolver] A function used to resolve the cache key.\n   * @returns {Function} Returns the new memoizing function.\n   * @example\n   *\n   * var fibonacci = _.memoize(function(n) {\n   *   return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);\n   * });\n   */\n  function memoize(func, resolver) {\n    var cache = {};\n    return function() {\n      var key = (resolver ? resolver.apply(this, arguments) : arguments[0]) + '';\n      return hasOwnProperty.call(cache, key)\n        ? cache[key]\n        : (cache[key] = func.apply(this, arguments));\n    };\n  }\n\n  /**\n   * Creates a function that is restricted to execute `func` once. Repeat calls to\n   * the function will return the value of the first call. The `func` is executed\n   * with the `this` binding of the created function.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to restrict.\n   * @returns {Function} Returns the new restricted function.\n   * @example\n   *\n   * var initialize = _.once(createApplication);\n   * initialize();\n   * initialize();\n   * // `initialize` executes `createApplication` once\n   */\n  function once(func) {\n    var ran,\n        result;\n\n    return function() {\n      if (ran) {\n        return result;\n      }\n      ran = true;\n      result = func.apply(this, arguments);\n\n      // clear the `func` variable so the function may be garbage collected\n      func = null;\n      return result;\n    };\n  }\n\n  /**\n   * Creates a function that, when called, invokes `func` with any additional\n   * `partial` arguments prepended to those passed to the new function. This\n   * method is similar to `_.bind`, except it does **not** alter the `this` binding.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to partially apply arguments to.\n   * @param {Mixed} [arg1, arg2, ...] Arguments to be partially applied.\n   * @returns {Function} Returns the new partially applied function.\n   * @example\n   *\n   * var greet = function(greeting, name) { return greeting + ' ' + name; };\n   * var hi = _.partial(greet, 'hi');\n   * hi('moe');\n   * // => 'hi moe'\n   */\n  function partial(func) {\n    return createBound(func, slice(arguments, 1));\n  }\n\n  /**\n   * This method is similar to `_.partial`, except that `partial` arguments are\n   * appended to those passed to the new function.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to partially apply arguments to.\n   * @param {Mixed} [arg1, arg2, ...] Arguments to be partially applied.\n   * @returns {Function} Returns the new partially applied function.\n   * @example\n   *\n   * var defaultsDeep = _.partialRight(_.merge, _.defaults);\n   *\n   * var options = {\n   *   'variable': 'data',\n   *   'imports': { 'jq': $ }\n   * };\n   *\n   * defaultsDeep(options, _.templateSettings);\n   *\n   * options.variable\n   * // => 'data'\n   *\n   * options.imports\n   * // => { '_': _, 'jq': $ }\n   */\n  function partialRight(func) {\n    return createBound(func, slice(arguments, 1), null, indicatorObject);\n  }\n\n  /**\n   * Creates a function that, when executed, will only call the `func`\n   * function at most once per every `wait` milliseconds. If the throttled\n   * function is invoked more than once during the `wait` timeout, `func` will\n   * also be called on the trailing edge of the timeout. Subsequent calls to the\n   * throttled function will return the result of the last `func` call.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to throttle.\n   * @param {Number} wait The number of milliseconds to throttle executions to.\n   * @returns {Function} Returns the new throttled function.\n   * @example\n   *\n   * var throttled = _.throttle(updatePosition, 100);\n   * jQuery(window).on('scroll', throttled);\n   */\n  function throttle(func, wait) {\n    var args,\n        result,\n        thisArg,\n        timeoutId,\n        lastCalled = 0;\n\n    function trailingCall() {\n      lastCalled = new Date;\n      timeoutId = null;\n      result = func.apply(thisArg, args);\n    }\n    return function() {\n      var now = new Date,\n          remaining = wait - (now - lastCalled);\n\n      args = arguments;\n      thisArg = this;\n\n      if (remaining <= 0) {\n        clearTimeout(timeoutId);\n        timeoutId = null;\n        lastCalled = now;\n        result = func.apply(thisArg, args);\n      }\n      else if (!timeoutId) {\n        timeoutId = setTimeout(trailingCall, remaining);\n      }\n      return result;\n    };\n  }\n\n  /**\n   * Creates a function that passes `value` to the `wrapper` function as its\n   * first argument. Additional arguments passed to the function are appended\n   * to those passed to the `wrapper` function. The `wrapper` is executed with\n   * the `this` binding of the created function.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Mixed} value The value to wrap.\n   * @param {Function} wrapper The wrapper function.\n   * @returns {Function} Returns the new function.\n   * @example\n   *\n   * var hello = function(name) { return 'hello ' + name; };\n   * hello = _.wrap(hello, function(func) {\n   *   return 'before, ' + func('moe') + ', after';\n   * });\n   * hello();\n   * // => 'before, hello moe, after'\n   */\n  function wrap(value, wrapper) {\n    return function() {\n      var args = [value];\n      push.apply(args, arguments);\n      return wrapper.apply(this, args);\n    };\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Converts the characters `&`, `<`, `>`, `\"`, and `'` in `string` to their\n   * corresponding HTML entities.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {String} string The string to escape.\n   * @returns {String} Returns the escaped string.\n   * @example\n   *\n   * _.escape('Moe, Larry & Curly');\n   * // => 'Moe, Larry &amp; Curly'\n   */\n  function escape(string) {\n    return string == null ? '' : (string + '').replace(reUnescapedHtml, escapeHtmlChar);\n  }\n\n  /**\n   * This function returns the first argument passed to it.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {Mixed} value Any value.\n   * @returns {Mixed} Returns `value`.\n   * @example\n   *\n   * var moe = { 'name': 'moe' };\n   * moe === _.identity(moe);\n   * // => true\n   */\n  function identity(value) {\n    return value;\n  }\n\n  /**\n   * Adds functions properties of `object` to the `lodash` function and chainable\n   * wrapper.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {Object} object The object of function properties to add to `lodash`.\n   * @example\n   *\n   * _.mixin({\n   *   'capitalize': function(string) {\n   *     return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n   *   }\n   * });\n   *\n   * _.capitalize('moe');\n   * // => 'Moe'\n   *\n   * _('moe').capitalize();\n   * // => 'Moe'\n   */\n  function mixin(object) {\n    forEach(functions(object), function(methodName) {\n      var func = lodash[methodName] = object[methodName];\n\n      lodash.prototype[methodName] = function() {\n        var args = [this.__wrapped__];\n        push.apply(args, arguments);\n        return new lodash(func.apply(lodash, args));\n      };\n    });\n  }\n\n  /**\n   * Reverts the '_' variable to its previous value and returns a reference to\n   * the `lodash` function.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @returns {Function} Returns the `lodash` function.\n   * @example\n   *\n   * var lodash = _.noConflict();\n   */\n  function noConflict() {\n    window._ = oldDash;\n    return this;\n  }\n\n  /**\n   * Produces a random number between `min` and `max` (inclusive). If only one\n   * argument is passed, a number between `0` and the given number will be returned.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {Number} [min=0] The minimum possible value.\n   * @param {Number} [max=1] The maximum possible value.\n   * @returns {Number} Returns a random number.\n   * @example\n   *\n   * _.random(0, 5);\n   * // => a number between 0 and 5\n   *\n   * _.random(5);\n   * // => also a number between 0 and 5\n   */\n  function random(min, max) {\n    if (min == null && max == null) {\n      max = 1;\n    }\n    min = +min || 0;\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + floor(nativeRandom() * ((+max || 0) - min + 1));\n  }\n\n  /**\n   * Resolves the value of `property` on `object`. If `property` is a function,\n   * it will be invoked and its result returned, else the property value is\n   * returned. If `object` is falsey, then `null` is returned.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {Object} object The object to inspect.\n   * @param {String} property The property to get the value of.\n   * @returns {Mixed} Returns the resolved value.\n   * @example\n   *\n   * var object = {\n   *   'cheese': 'crumpets',\n   *   'stuff': function() {\n   *     return 'nonsense';\n   *   }\n   * };\n   *\n   * _.result(object, 'cheese');\n   * // => 'crumpets'\n   *\n   * _.result(object, 'stuff');\n   * // => 'nonsense'\n   */\n  function result(object, property) {\n    var value = object ? object[property] : undefined;\n    return isFunction(value) ? object[property]() : value;\n  }\n\n  /**\n   * A micro-templating method that handles arbitrary delimiters, preserves\n   * whitespace, and correctly escapes quotes within interpolated code.\n   *\n   * Note: In the development build, `_.template` utilizes sourceURLs for easier\n   * debugging. See http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl\n   *\n   * Note: Lo-Dash may be used in Chrome extensions by either creating a `lodash csp`\n   * build and using precompiled templates, or loading Lo-Dash in a sandbox.\n   *\n   * For more information on precompiling templates see:\n   * http://lodash.com/#custom-builds\n   *\n   * For more information on Chrome extension sandboxes see:\n   * http://developer.chrome.com/stable/extensions/sandboxingEval.html\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {String} text The template text.\n   * @param {Obect} data The data object used to populate the text.\n   * @param {Object} options The options object.\n   *  escape - The \"escape\" delimiter regexp.\n   *  evaluate - The \"evaluate\" delimiter regexp.\n   *  interpolate - The \"interpolate\" delimiter regexp.\n   *  sourceURL - The sourceURL of the template's compiled source.\n   *  variable - The data object variable name.\n   *\n   * @returns {Function|String} Returns a compiled function when no `data` object\n   *  is given, else it returns the interpolated text.\n   * @example\n   *\n   * // using a compiled template\n   * var compiled = _.template('hello <%= name %>');\n   * compiled({ 'name': 'moe' });\n   * // => 'hello moe'\n   *\n   * var list = '<% _.forEach(people, function(name) { %><li><%= name %></li><% }); %>';\n   * _.template(list, { 'people': ['moe', 'larry'] });\n   * // => '<li>moe</li><li>larry</li>'\n   *\n   * // using the \"escape\" delimiter to escape HTML in data property values\n   * _.template('<b><%- value %></b>', { 'value': '<script>' });\n   * // => '<b>&lt;script&gt;</b>'\n   *\n   * // using the ES6 delimiter as an alternative to the default \"interpolate\" delimiter\n   * _.template('hello ${ name }', { 'name': 'curly' });\n   * // => 'hello curly'\n   *\n   * // using the internal `print` function in \"evaluate\" delimiters\n   * _.template('<% print(\"hello \" + epithet); %>!', { 'epithet': 'stooge' });\n   * // => 'hello stooge!'\n   *\n   * // using custom template delimiters\n   * _.templateSettings = {\n   *   'interpolate': /{{([\\s\\S]+?)}}/g\n   * };\n   *\n   * _.template('hello {{ name }}!', { 'name': 'mustache' });\n   * // => 'hello mustache!'\n   *\n   * // using the `sourceURL` option to specify a custom sourceURL for the template\n   * var compiled = _.template('hello <%= name %>', null, { 'sourceURL': '/basic/greeting.jst' });\n   * compiled(data);\n   * // => find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector\n   *\n   * // using the `variable` option to ensure a with-statement isn't used in the compiled template\n   * var compiled = _.template('hi <%= data.name %>!', null, { 'variable': 'data' });\n   * compiled.source;\n   * // => function(data) {\n   *   var __t, __p = '', __e = _.escape;\n   *   __p += 'hi ' + ((__t = ( data.name )) == null ? '' : __t) + '!';\n   *   return __p;\n   * }\n   *\n   * // using the `source` property to inline compiled templates for meaningful\n   * // line numbers in error messages and a stack trace\n   * fs.writeFileSync(path.join(cwd, 'jst.js'), '\\\n   *   var JST = {\\\n   *     \"main\": ' + _.template(mainText).source + '\\\n   *   };\\\n   * ');\n   */\n  function template(text, data, options) {\n    // based on John Resig's `tmpl` implementation\n    // http://ejohn.org/blog/javascript-micro-templating/\n    // and Laura Doktorova's doT.js\n    // https://github.com/olado/doT\n    var settings = lodash.templateSettings;\n    text || (text = '');\n\n    // avoid missing dependencies when `iteratorTemplate` is not defined\n    options = defaults({}, options, settings);\n\n    var imports = defaults({}, options.imports, settings.imports),\n        importsKeys = keys(imports),\n        importsValues = values(imports);\n\n    var isEvaluating,\n        index = 0,\n        interpolate = options.interpolate || reNoMatch,\n        source = \"__p += '\";\n\n    // compile regexp to match each delimiter\n    var reDelimiters = RegExp(\n      (options.escape || reNoMatch).source + '|' +\n      interpolate.source + '|' +\n      (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n      (options.evaluate || reNoMatch).source + '|$'\n    , 'g');\n\n    text.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n      interpolateValue || (interpolateValue = esTemplateValue);\n\n      // escape characters that cannot be included in string literals\n      source += text.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n      // replace delimiters with snippets\n      if (escapeValue) {\n        source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n      }\n      if (evaluateValue) {\n        isEvaluating = true;\n        source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n      }\n      if (interpolateValue) {\n        source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n      }\n      index = offset + match.length;\n\n      // the JS engine embedded in Adobe products requires returning the `match`\n      // string in order to produce the correct `offset` value\n      return match;\n    });\n\n    source += \"';\\n\";\n\n    // if `variable` is not specified and the template contains \"evaluate\"\n    // delimiters, wrap a with-statement around the generated code to add the\n    // data object to the top of the scope chain\n    var variable = options.variable,\n        hasVariable = variable;\n\n    if (!hasVariable) {\n      variable = 'obj';\n      source = 'with (' + variable + ') {\\n' + source + '\\n}\\n';\n    }\n    // cleanup code by stripping empty strings\n    source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n      .replace(reEmptyStringMiddle, '$1')\n      .replace(reEmptyStringTrailing, '$1;');\n\n    // frame code as the function body\n    source = 'function(' + variable + ') {\\n' +\n      (hasVariable ? '' : variable + ' || (' + variable + ' = {});\\n') +\n      \"var __t, __p = '', __e = _.escape\" +\n      (isEvaluating\n        ? ', __j = Array.prototype.join;\\n' +\n          \"function print() { __p += __j.call(arguments, '') }\\n\"\n        : ';\\n'\n      ) +\n      source +\n      'return __p\\n}';\n\n    // Use a sourceURL for easier debugging and wrap in a multi-line comment to\n    // avoid issues with Narwhal, IE conditional compilation, and the JS engine\n    // embedded in Adobe products.\n    // http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl\n    var sourceURL = '\\n/*\\n//@ sourceURL=' + (options.sourceURL || '/lodash/template/source[' + (templateCounter++) + ']') + '\\n*/';\n\n    try {\n      var result = Function(importsKeys, 'return ' + source + sourceURL).apply(undefined, importsValues);\n    } catch(e) {\n      e.source = source;\n      throw e;\n    }\n    if (data) {\n      return result(data);\n    }\n    // provide the compiled function's source via its `toString` method, in\n    // supported environments, or the `source` property as a convenience for\n    // inlining compiled templates during the build process\n    result.source = source;\n    return result;\n  }\n\n  /**\n   * Executes the `callback` function `n` times, returning an array of the results\n   * of each `callback` execution. The `callback` is bound to `thisArg` and invoked\n   * with one argument; (index).\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {Number} n The number of times to execute the callback.\n   * @param {Function} callback The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array} Returns a new array of the results of each `callback` execution.\n   * @example\n   *\n   * var diceRolls = _.times(3, _.partial(_.random, 1, 6));\n   * // => [3, 6, 4]\n   *\n   * _.times(3, function(n) { mage.castSpell(n); });\n   * // => calls `mage.castSpell(n)` three times, passing `n` of `0`, `1`, and `2` respectively\n   *\n   * _.times(3, function(n) { this.cast(n); }, mage);\n   * // => also calls `mage.castSpell(n)` three times\n   */\n  function times(n, callback, thisArg) {\n    n = +n || 0;\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = callback.call(thisArg, index);\n    }\n    return result;\n  }\n\n  /**\n   * The opposite of `_.escape`, this method converts the HTML entities\n   * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to their\n   * corresponding characters.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {String} string The string to unescape.\n   * @returns {String} Returns the unescaped string.\n   * @example\n   *\n   * _.unescape('Moe, Larry &amp; Curly');\n   * // => 'Moe, Larry & Curly'\n   */\n  function unescape(string) {\n    return string == null ? '' : (string + '').replace(reEscapedHtml, unescapeHtmlChar);\n  }\n\n  /**\n   * Generates a unique ID. If `prefix` is passed, the ID will be appended to it.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {String} [prefix] The value to prefix the ID with.\n   * @returns {String} Returns the unique ID.\n   * @example\n   *\n   * _.uniqueId('contact_');\n   * // => 'contact_104'\n   *\n   * _.uniqueId();\n   * // => '105'\n   */\n  function uniqueId(prefix) {\n    var id = ++idCounter;\n    return (prefix == null ? '' : prefix + '') + id;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Invokes `interceptor` with the `value` as the first argument, and then\n   * returns `value`. The purpose of this method is to \"tap into\" a method chain,\n   * in order to perform operations on intermediate results within the chain.\n   *\n   * @static\n   * @memberOf _\n   * @category Chaining\n   * @param {Mixed} value The value to pass to `interceptor`.\n   * @param {Function} interceptor The function to invoke.\n   * @returns {Mixed} Returns `value`.\n   * @example\n   *\n   * _([1, 2, 3, 4])\n   *  .filter(function(num) { return num % 2 == 0; })\n   *  .tap(alert)\n   *  .map(function(num) { return num * num; })\n   *  .value();\n   * // => // [2, 4] (alerted)\n   * // => [4, 16]\n   */\n  function tap(value, interceptor) {\n    interceptor(value);\n    return value;\n  }\n\n  /**\n   * Produces the `toString` result of the wrapped value.\n   *\n   * @name toString\n   * @memberOf _\n   * @category Chaining\n   * @returns {String} Returns the string result.\n   * @example\n   *\n   * _([1, 2, 3]).toString();\n   * // => '1,2,3'\n   */\n  function wrapperToString() {\n    return this.__wrapped__ + '';\n  }\n\n  /**\n   * Extracts the wrapped value.\n   *\n   * @name valueOf\n   * @memberOf _\n   * @alias value\n   * @category Chaining\n   * @returns {Mixed} Returns the wrapped value.\n   * @example\n   *\n   * _([1, 2, 3]).valueOf();\n   * // => [1, 2, 3]\n   */\n  function wrapperValueOf() {\n    return this.__wrapped__;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // add functions that return wrapped values when chaining\n  lodash.after = after;\n  lodash.assign = assign;\n  lodash.at = at;\n  lodash.bind = bind;\n  lodash.bindAll = bindAll;\n  lodash.bindKey = bindKey;\n  lodash.compact = compact;\n  lodash.compose = compose;\n  lodash.countBy = countBy;\n  lodash.debounce = debounce;\n  lodash.defaults = defaults;\n  lodash.defer = defer;\n  lodash.delay = delay;\n  lodash.difference = difference;\n  lodash.filter = filter;\n  lodash.flatten = flatten;\n  lodash.forEach = forEach;\n  lodash.forIn = forIn;\n  lodash.forOwn = forOwn;\n  lodash.functions = functions;\n  lodash.groupBy = groupBy;\n  lodash.initial = initial;\n  lodash.intersection = intersection;\n  lodash.invert = invert;\n  lodash.invoke = invoke;\n  lodash.keys = keys;\n  lodash.map = map;\n  lodash.max = max;\n  lodash.memoize = memoize;\n  lodash.merge = merge;\n  lodash.min = min;\n  lodash.object = object;\n  lodash.omit = omit;\n  lodash.once = once;\n  lodash.pairs = pairs;\n  lodash.partial = partial;\n  lodash.partialRight = partialRight;\n  lodash.pick = pick;\n  lodash.pluck = pluck;\n  lodash.range = range;\n  lodash.reject = reject;\n  lodash.rest = rest;\n  lodash.shuffle = shuffle;\n  lodash.sortBy = sortBy;\n  lodash.tap = tap;\n  lodash.throttle = throttle;\n  lodash.times = times;\n  lodash.toArray = toArray;\n  lodash.union = union;\n  lodash.uniq = uniq;\n  lodash.values = values;\n  lodash.where = where;\n  lodash.without = without;\n  lodash.wrap = wrap;\n  lodash.zip = zip;\n\n  // add aliases\n  lodash.collect = map;\n  lodash.drop = rest;\n  lodash.each = forEach;\n  lodash.extend = assign;\n  lodash.methods = functions;\n  lodash.select = filter;\n  lodash.tail = rest;\n  lodash.unique = uniq;\n\n  // add functions to `lodash.prototype`\n  mixin(lodash);\n\n  /*--------------------------------------------------------------------------*/\n\n  // add functions that return unwrapped values when chaining\n  lodash.clone = clone;\n  lodash.cloneDeep = cloneDeep;\n  lodash.contains = contains;\n  lodash.escape = escape;\n  lodash.every = every;\n  lodash.find = find;\n  lodash.has = has;\n  lodash.identity = identity;\n  lodash.indexOf = indexOf;\n  lodash.isArguments = isArguments;\n  lodash.isArray = isArray;\n  lodash.isBoolean = isBoolean;\n  lodash.isDate = isDate;\n  lodash.isElement = isElement;\n  lodash.isEmpty = isEmpty;\n  lodash.isEqual = isEqual;\n  lodash.isFinite = isFinite;\n  lodash.isFunction = isFunction;\n  lodash.isNaN = isNaN;\n  lodash.isNull = isNull;\n  lodash.isNumber = isNumber;\n  lodash.isObject = isObject;\n  lodash.isPlainObject = isPlainObject;\n  lodash.isRegExp = isRegExp;\n  lodash.isString = isString;\n  lodash.isUndefined = isUndefined;\n  lodash.lastIndexOf = lastIndexOf;\n  lodash.mixin = mixin;\n  lodash.noConflict = noConflict;\n  lodash.random = random;\n  lodash.reduce = reduce;\n  lodash.reduceRight = reduceRight;\n  lodash.result = result;\n  lodash.size = size;\n  lodash.some = some;\n  lodash.sortedIndex = sortedIndex;\n  lodash.template = template;\n  lodash.unescape = unescape;\n  lodash.uniqueId = uniqueId;\n\n  // add aliases\n  lodash.all = every;\n  lodash.any = some;\n  lodash.detect = find;\n  lodash.foldl = reduce;\n  lodash.foldr = reduceRight;\n  lodash.include = contains;\n  lodash.inject = reduce;\n\n  forOwn(lodash, function(func, methodName) {\n    if (!lodash.prototype[methodName]) {\n      lodash.prototype[methodName] = function() {\n        var args = [this.__wrapped__];\n        push.apply(args, arguments);\n        return func.apply(lodash, args);\n      };\n    }\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  // add functions capable of returning wrapped and unwrapped values when chaining\n  lodash.first = first;\n  lodash.last = last;\n\n  // add aliases\n  lodash.take = first;\n  lodash.head = first;\n\n  forOwn(lodash, function(func, methodName) {\n    if (!lodash.prototype[methodName]) {\n      lodash.prototype[methodName]= function(callback, thisArg) {\n        var result = func(this.__wrapped__, callback, thisArg);\n        return callback == null || (thisArg && typeof callback != 'function')\n          ? result\n          : new lodash(result);\n      };\n    }\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * The semantic version number.\n   *\n   * @static\n   * @memberOf _\n   * @type String\n   */\n  lodash.VERSION = '1.0.2';\n\n  // add \"Chaining\" functions to the wrapper\n  lodash.prototype.toString = wrapperToString;\n  lodash.prototype.value = wrapperValueOf;\n  lodash.prototype.valueOf = wrapperValueOf;\n\n  // add `Array` functions that return unwrapped values\n  each(['join', 'pop', 'shift'], function(methodName) {\n    var func = arrayRef[methodName];\n    lodash.prototype[methodName] = function() {\n      return func.apply(this.__wrapped__, arguments);\n    };\n  });\n\n  // add `Array` functions that return the wrapped value\n  each(['push', 'reverse', 'sort', 'unshift'], function(methodName) {\n    var func = arrayRef[methodName];\n    lodash.prototype[methodName] = function() {\n      func.apply(this.__wrapped__, arguments);\n      return this;\n    };\n  });\n\n  // add `Array` functions that return new wrapped values\n  each(['concat', 'slice', 'splice'], function(methodName) {\n    var func = arrayRef[methodName];\n    lodash.prototype[methodName] = function() {\n      return new lodash(func.apply(this.__wrapped__, arguments));\n    };\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  // expose Lo-Dash\n  // some AMD build optimizers, like r.js, check for specific condition patterns like the following:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Expose Lo-Dash to the global object even when an AMD loader is present in\n    // case Lo-Dash was injected by a third-party script and not intended to be\n    // loaded as a module. The global assignment can be reverted in the Lo-Dash\n    // module via its `noConflict()` method.\n    window._ = lodash;\n\n    // define as an anonymous module so, through path mapping, it can be\n    // referenced as the \"underscore\" module\n    define(function() {\n      return lodash;\n    });\n  }\n  // check for `exports` after `define` in case a build optimizer adds an `exports` object\n  else if (freeExports) {\n    // in Node.js or RingoJS v0.8.0+\n    if (freeModule) {\n      (freeModule.exports = lodash)._ = lodash;\n    }\n    // in Narwhal or RingoJS v0.7.0-\n    else {\n      freeExports._ = lodash;\n    }\n  }\n  else {\n    // in a browser or Rhino\n    window._ = lodash;\n  }\n}(this));\n"],"sourceRoot":"/source/"}